{
  "address": "0xfd5769788e152B30B12f48614dE5EbeFa814e849",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum AdminActionReason",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "AdminBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum AdminActionReason",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "AdminClawback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CancelledCredits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "exAnteTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "exPostTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExAnteMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "estimatedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verificationPeriodStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verificationPeriodEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "serialization",
          "type": "string"
        }
      ],
      "name": "ExPostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToAnteHolders",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verificationPeriodStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verificationPeriodEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "monitoringReport",
          "type": "string"
        }
      ],
      "name": "ExPostVerifiedAndMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "exPostTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exPostAmountReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exAnteAmountBurned",
          "type": "uint256"
        }
      ],
      "name": "ExchangeAnteForPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RetiredVintage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct signatureTransferPayload",
          "name": "payload",
          "type": "tuple"
        }
      ],
      "name": "TransferSignatureValid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEstimate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEstimate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum AdminActionReason",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "VintageMitigationEstimateChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ANTE_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLACKLISTED",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLACKLISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAWBACK_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POST_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URI_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_projectName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_methodology",
          "type": "string"
        }
      ],
      "name": "__ProjectStorage_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum AdminActionReason",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "adminClawback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFromAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct signatureTransferPayload",
          "name": "payload",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "cancelCreditsFromSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationPeriodStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationPeriodEnd",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "serialization",
          "type": "string"
        }
      ],
      "name": "createExPostVintage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "serialization",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "estMitigations",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationPeriodEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastVerificationTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct VintageData[]",
          "name": "vintages",
          "type": "tuple[]"
        }
      ],
      "name": "createExPostVintageBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exAnteToExPostTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exPostToExAnteTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exPostVintageMapping",
      "outputs": [
        {
          "internalType": "string",
          "name": "serialization",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "estMitigations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationPeriodStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationPeriodEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastVerificationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_projectName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectMethodology",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectUri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isExPostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAntePercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "methodology",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exPostTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintExAnte",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "retireeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "customUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "retire",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct signatureTransferPayload",
          "name": "payload",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "retireeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "customUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "retireFromSignature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "retirementMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "retiree",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vintageTokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "retireeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "customUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "serializationToExPostTokenIdMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signatureNonces",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testUpgrade",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct signatureTransferPayload",
          "name": "payload",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferFromSignature",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verificationVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountVerified",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToAnteHolders",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationPeriodStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationPeriodEnd",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "monitoringReport",
          "type": "string"
        }
      ],
      "name": "verifyAndMintExPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "0529c9cc2f421010c53cc8545e5d8b64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"AdminBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"AdminClawback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CancelledCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exAnteTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exPostTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExAnteMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serialization\",\"type\":\"string\"}],\"name\":\"ExPostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToAnteHolders\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"monitoringReport\",\"type\":\"string\"}],\"name\":\"ExPostVerifiedAndMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exPostTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exPostAmountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exAnteAmountBurned\",\"type\":\"uint256\"}],\"name\":\"ExchangeAnteForPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RetiredVintage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct signatureTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"name\":\"TransferSignatureValid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEstimate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEstimate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"VintageMitigationEstimateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANTE_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLACKLISTED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLACKLISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAWBACK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POST_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_methodology\",\"type\":\"string\"}],\"name\":\"__ProjectStorage_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"adminClawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancelCreditsFromSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialization\",\"type\":\"string\"}],\"name\":\"createExPostVintage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"serialization\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"estMitigations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVerificationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VintageData[]\",\"name\":\"vintages\",\"type\":\"tuple[]\"}],\"name\":\"createExPostVintageBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exAnteToExPostTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exPostToExAnteTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exPostVintageMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"serialization\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"estMitigations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVerificationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectMethodology\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectUri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExPostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAntePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"methodology\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exPostTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintExAnte\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"retire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"retireFromSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"retirementMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"retiree\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vintageTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"serializationToExPostTokenIdMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatureNonces\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testUpgrade\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verificationVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountVerified\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToAnteHolders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"monitoringReport\",\"type\":\"string\"}],\"name\":\"verifyAndMintExPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"  Balances are counted in 10^-18 TCO2e\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Project.sol\":\"Project\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xed79d68fc69539630aab88fc02b0be8ebfc97cbbda9a4ffabcf7551d7b04fc0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8b8d73aa1f554bbe7ff13b46e07ffaeb71fd6df32f677b0a498a0af980ba2115\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf55d23a7d80645e0a0764414dbd7d27c913d53bf68f509ac533a297dc3d0643d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x79b5e59e0a314f71d872a0ddc58c73bd13b714968c26b8ef33ad69dcc49bc8ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Project.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n\\n\\nimport './ProjectStorage.sol';\\nimport './interfaces/ICarbonContractRegistry.sol';\\nimport './utils/CustomSignaturesUpgradeable.sol';\\nimport './interfaces/IProject.sol';\\n\\n/**\\n * @title \\n * @author \\n * @notice \\n * \\n * Balances are counted in 10^-18 TCO2e\\n */\\ncontract Project is\\n\\tIProject,\\n\\tInitializable,\\n\\tERC1155Upgradeable,\\n\\tAccessControlUpgradeable,\\n\\tPausableUpgradeable,\\n\\tERC1155SupplyUpgradeable,\\n\\tUUPSUpgradeable,\\n\\tCustomSignaturesUpgradeable,\\n\\tProjectStorage,\\n\\tERC1155HolderUpgradeable\\n{\\n\\tbytes32 public constant URI_SETTER_ROLE = keccak256('URI_SETTER_ROLE');\\n\\tbytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n\\tbytes32 public constant ANTE_MINTER_ROLE = keccak256('ANTE_MINTER_ROLE');\\n\\tbytes32 public constant POST_MINTER_ROLE = keccak256('POST_MINTER_ROLE');\\n\\tbytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\tbytes32 public constant UPGRADER_ROLE = keccak256('UPGRADER_ROLE');\\n\\tbytes32 public constant BLACKLISTED = keccak256('BLACKLISTED');\\n\\tbytes32 public constant BLACKLISTER_ROLE = keccak256('BLACKLISTER_ROLE');\\n\\tbytes32 public constant BURNER_ROLE = keccak256('BURNER_ROLE');\\n\\tbytes32 public constant VERIFIER_ROLE = keccak256('VERIFIER_ROLE');\\n\\tbytes32 public constant CLAWBACK_ROLE = keccak256('CLAWBACK_ROLE');\\n\\n\\n/// @custom:oz-upgrades-unsafe-allow constructor\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress _contractRegistry,\\n\\t\\taddress _owner,\\n\\t\\tuint256 _projectId,\\n\\t\\tstring memory _projectName,\\n\\t\\tstring memory _projectMethodology,\\n\\t\\tstring memory _projectUri\\n\\t) public initializer {\\n\\t\\t__ERC1155_init('');\\n\\t\\t__AccessControl_init();\\n\\t\\t__Pausable_init();\\n\\t\\t__ERC1155Supply_init();\\n\\t\\t__UUPSUpgradeable_init();\\n\\t\\t__CustomSignatures_init(\\\"Carbon Registry\\\", '0.0.1');\\n\\n\\t\\t// Our Inits\\n\\t\\t__ProjectStorage_init(_contractRegistry, _projectId, _projectName, _projectUri, _projectMethodology);\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _owner);\\n\\t\\t_grantRole(URI_SETTER_ROLE, _owner);\\n\\t\\t_grantRole(PAUSER_ROLE, _owner);\\n\\t\\t_grantRole(ANTE_MINTER_ROLE, _owner);\\n\\t\\t_grantRole(POST_MINTER_ROLE, _owner);\\n\\t\\t_grantRole(UPGRADER_ROLE, _owner);\\n\\t\\t_grantRole(BLACKLISTER_ROLE, _owner);\\n\\t\\t_grantRole(VERIFIER_ROLE, _owner);\\n\\t\\t_grantRole(CLAWBACK_ROLE, _owner);\\n\\n\\t\\t_grantRole(POST_MINTER_ROLE, msg.sender); // Just so projectFactory can mint exPost on creation of the project\\n\\t}\\n\\n\\tmodifier notBlacklisted(address account) {\\n\\t\\trequire(\\n\\t\\t\\t!hasRole(BLACKLISTED, account),\\n\\t\\t\\\"0\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyExPostTokens(uint256[] memory tokenIds) {\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\trequire(isExPostToken(tokenIds[i]), \\\"1\\\");\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyExPostToken(uint256 tokenId) {\\n\\t\\trequire(isExPostToken(tokenId), \\\"1\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyVerifiedStatus(bool isVerified, uint256 tokenId) {\\n\\t\\trequire(\\n\\t\\t\\t(exPostVintageMapping[tokenId].lastVerificationTimestamp >=\\n\\t\\t\\t\\texPostVintageMapping[tokenId].verificationPeriodEnd) ==\\n\\t\\t\\t\\tisVerified,\\n\\t\\t\\tisVerified\\n\\t\\t\\t\\t? \\\"2\\\"\\n\\t\\t\\t\\t: \\\"3\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction isExPostToken(uint256 tokenId) public view returns (bool) {\\n\\t\\treturn bytes(exPostVintageMapping[tokenId].serialization).length > 0;\\n\\t}\\n\\n\\tfunction testUpgrade() external pure returns(string memory) {\\n\\t\\treturn \\\"0.0.10\\\";\\n\\t}\\n\\n\\t// ----------------------------------\\n\\t//         Minting Functions\\n\\t// ----------------------------------\\n\\n\\tfunction createExPostVintage(\\n\\t\\tuint256 estAmount,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring memory serialization\\n\\t) public onlyRole(POST_MINTER_ROLE) {\\n\\t\\t\\n\\t\\trequire(\\n\\t\\t\\tverificationPeriodEnd > verificationPeriodStart,\\n\\t\\t\\t\\\"4\\\"\\n\\t\\t);\\n\\t\\tuint256 newTokenId = nextTokenId();\\n\\t\\tICarbonContractRegistry(contractRegistry).registerSerialization(\\n\\t\\t\\tserialization\\n\\t\\t);\\n\\t\\tserializationToExPostTokenIdMapping[serialization] = newTokenId;\\n\\t\\texPostVintageMapping[newTokenId] = VintageData(\\n\\t\\t\\tserialization,\\n\\t\\t\\testAmount,\\n\\t\\t\\tverificationPeriodStart,\\n\\t\\t\\tverificationPeriodEnd,\\n\\t\\t\\t0\\n\\t\\t);\\n\\t\\temit ExPostCreated(\\n\\t\\t\\tnewTokenId,\\n\\t\\t\\testAmount,\\n\\t\\t\\tverificationPeriodStart,\\n\\t\\t\\tverificationPeriodEnd,\\n\\t\\t\\tserialization\\n\\t\\t);\\n\\t}\\n\\n\\tfunction createExPostVintageBatch(\\n\\t\\tVintageData[] memory vintages\\n\\t) public onlyRole(POST_MINTER_ROLE) {\\n\\t\\tfor (uint256 i = 0; i < vintages.length; i++) {\\n\\t\\t\\tcreateExPostVintage(\\n\\t\\t\\t\\tvintages[i].estMitigations,\\n\\t\\t\\t\\tvintages[i].verificationPeriodStart,\\n\\t\\t\\t\\tvintages[i].verificationPeriodEnd,\\n\\t\\t\\t\\tvintages[i].serialization\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mintExAnte(\\n\\t\\taddress account,\\n\\t\\tuint256 exPostTokenId,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t)\\n\\t\\tpublic\\n\\t\\tonlyRole(ANTE_MINTER_ROLE)\\n\\t\\tonlyExPostToken(exPostTokenId)\\n\\t\\tonlyVerifiedStatus(false, exPostTokenId)\\n\\t{\\n\\t\\tuint256 exAnteTokenId = exPostToExAnteTokenId[exPostTokenId];\\n\\t\\tif (exAnteTokenId == 0) {\\n\\t\\t\\texAnteTokenId = nextTokenId();\\n\\t\\t\\texPostToExAnteTokenId[exPostTokenId] = exAnteTokenId;\\n\\t\\t\\texAnteToExPostTokenId[exAnteTokenId] = exPostTokenId;\\n\\t\\t}\\n\\t\\temit ExAnteMinted(exAnteTokenId, exPostTokenId, account,  amount);\\n\\t\\t_mint(account, exAnteTokenId, amount, data);\\n\\t}\\n\\n\\tfunction verifyAndMintExPost(\\n\\t\\taddress verificationVault,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amountVerified,\\n\\t\\tuint256 amountToAnteHolders,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring memory monitoringReport\\n\\t)\\n\\t\\tpublic\\n\\t\\tonlyRole(VERIFIER_ROLE)\\n\\t\\tonlyExPostToken(tokenId)\\n\\t\\tonlyVerifiedStatus(false, tokenId)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tamountVerified >= amountToAnteHolders,\\n\\t\\t\\t\\\"6\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 exAnteTokenId = exPostToExAnteTokenId[tokenId];\\n\\t\\tif (exAnteTokenId == 0) {\\n\\t\\t\\t// If exAnteTokenId is zero then there are no ante holders\\n\\t\\t\\trequire(amountToAnteHolders == 0, \\\"9\\\");\\n\\t\\t}\\n\\n\\t\\temit ExPostVerifiedAndMinted(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tamountVerified,\\n\\t\\t\\tamountToAnteHolders,\\n\\t\\t\\tverificationPeriodStart,\\n\\t\\t\\tverificationPeriodEnd,\\n\\t\\t\\tmonitoringReport\\n\\t\\t);\\n\\n\\t\\tif (amountVerified - amountToAnteHolders > 0) {\\n\\t\\t\\t// Mint To Verification Vault\\n\\t\\t\\t_mint(\\n\\t\\t\\t\\tverificationVault,\\n\\t\\t\\t\\ttokenId,\\n\\t\\t\\t\\tamountVerified - amountToAnteHolders,\\n\\t\\t\\t\\t''\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\texPostVintageMapping[tokenId]\\n\\t\\t\\t.lastVerificationTimestamp = verificationPeriodEnd;\\n\\n\\t\\tif (amountToAnteHolders > 0) {\\n\\t\\t\\t// Mint to this address, where ante holders will claim\\n\\t\\t\\t_mint(address(this), tokenId, amountToAnteHolders, '');\\n\\t\\t}\\n\\t}\\n\\n\\tfunction adminClawback(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason reason\\n\\t) public onlyRole(CLAWBACK_ROLE) {\\n\\t\\temit AdminClawback(from, to, tokenId, amount, reason);\\n\\t\\t_safeTransferFrom(from, to, tokenId, amount, '');\\n\\t}\\n\\n\\t// function exchangeAnteForPostEvenSteven(\\n\\t// \\taddress[] memory accounts,\\n\\t// \\tuint256 exPostTokenId,\\n\\t// \\tbytes memory data\\n\\t// )\\n\\t// \\texternal\\n\\t// \\tonlyExPostToken(exPostTokenId)\\n\\t// {\\n\\t// \\tuint256 exAnteTokenId = exPostToExAnteTokenId[exPostTokenId];\\n\\t// \\trequire(exAnteTokenId != 0, \\\"9\\\");\\n\\t// \\tuint256 currentExAnteSupply = totalSupply(exAnteTokenId);\\n\\t// \\tuint256 currentExPostSupplyInContract = balanceOf(\\n\\t// \\t\\taddress(this),\\n\\t// \\t\\texPostTokenId\\n\\t// \\t);\\n\\t// \\trequire(currentExPostSupplyInContract > 0, \\\"10\\\");\\n\\n\\t// \\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\t\\n\\t// \\t\\tuint256 amountExAnte = balanceOf(accounts[i], exAnteTokenId);\\n\\t// \\t\\tuint256 amountExPost = (amountExAnte *\\n\\t// \\t\\t\\tcurrentExPostSupplyInContract) / currentExAnteSupply;\\n\\t// \\t\\tuint256 exAnteBurnAmount = amountExAnte;\\n\\t// \\t\\tif (amountExAnte > amountExPost) {\\n\\t// \\t\\t\\texAnteBurnAmount = amountExPost;\\n\\t// \\t\\t}\\n\\t// \\t\\t\\t\\t\\temit ExchangeAnteForPost(\\n\\t// \\t\\t\\taccounts[i],\\n\\t// \\t\\t\\texPostTokenId,\\n\\t// \\t\\t\\tamountExPost,\\n\\t// \\t\\t\\texAnteBurnAmount\\n\\t// \\t\\t);\\n\\t// \\t\\t_burn(accounts[i], exAnteTokenId, exAnteBurnAmount);\\n\\t// \\t\\t_safeTransferFrom(\\n\\t// \\t\\t\\taddress(this),\\n\\t// \\t\\t\\taccounts[i],\\n\\t// \\t\\t\\texPostTokenId,\\n\\t// \\t\\t\\tamountExPost,\\n\\t// \\t\\t\\tdata\\n\\t// \\t\\t);\\n\\t// \\t}\\n\\t// }\\n\\n\\t// ----------------------------------\\n\\t//              Actions\\n\\t// ----------------------------------\\n\\n\\n\\tfunction transferFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureTransferPayload calldata payload,\\n\\t\\tbytes memory data\\n\\t) public payable onlyValidSignatureTransfer(signature, payload) {\\n\\t\\t_safeTransferFrom(\\n\\t\\t\\tpayload.signer,\\n\\t\\t\\tpayload.to,\\n\\t\\t\\tpayload.tokenId,\\n\\t\\t\\tpayload.amount,\\n\\t\\t\\tdata\\n\\t\\t);\\n\\t}\\n\\n\\tfunction burnFromAccount(\\n\\t\\taddress account,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount\\n\\t) public onlyRole(CLAWBACK_ROLE) {\\n\\t\\t_burn(account, tokenId, amount);\\n\\t}\\n\\n\\tfunction retire(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\taddress beneficiary,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t) public onlyExPostToken(tokenId) returns (uint256 nftTokenId) {\\n\\t\\tif(msg.sender == beneficiary){\\n\\t\\t\\treturn _retire(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\ttokenId,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tretireeName,\\n\\t\\t\\t\\tcustomUri,\\n\\t\\t\\t\\tcomment,\\n\\t\\t\\t\\tdata\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\trequire(beneficiary != address(0));\\n\\t\\t_safeTransferFrom(msg.sender, beneficiary, tokenId, amount, data);\\n\\t\\treturn _retire(\\n\\t\\t\\tbeneficiary,\\n\\t\\t\\ttokenId,\\n\\t\\t\\tamount,\\n\\t\\t\\tretireeName,\\n\\t\\t\\tcustomUri,\\n\\t\\t\\tcomment,\\n\\t\\t\\tdata\\n\\t\\t);\\n\\t}\\n\\n\\tfunction retireFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureTransferPayload calldata payload,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t)\\n\\t\\tpublic\\n\\t\\tonlyExPostToken(payload.tokenId)\\n\\t\\tonlyValidSignatureTransfer(signature, payload)\\n\\t\\treturns (uint256 nftTokenId)\\n\\t{\\n\\t\\tif(payload.signer == payload.to){\\n\\t\\t\\treturn _retire(\\n\\t\\t\\t\\tpayload.signer,\\n\\t\\t\\t\\tpayload.tokenId,\\n\\t\\t\\t\\tpayload.amount,\\n\\t\\t\\t\\tretireeName,\\n\\t\\t\\t\\tcustomUri,\\n\\t\\t\\t\\tcomment,\\n\\t\\t\\t\\tdata\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(payload.to != address(0));\\n\\t\\t_safeTransferFrom(payload.signer, payload.to, payload.tokenId, payload.amount, data);\\n\\t\\treturn _retire(\\n\\t\\t\\tpayload.to,\\n\\t\\t\\tpayload.tokenId,\\n\\t\\t\\tpayload.amount,\\n\\t\\t\\tretireeName,\\n\\t\\t\\tcustomUri,\\n\\t\\t\\tcomment,\\n\\t\\t\\tdata\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _retire(\\n\\t\\taddress retiree,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t) internal returns(uint256 nftTokenId) {\\n\\t\\t_burn(retiree, tokenId, amount);\\n\\t\\tnftTokenId = mintRetirementCertificate(retiree, tokenId, amount, retireeName, customUri, comment);\\n\\t\\temit RetiredVintage(retiree, tokenId, amount, nftTokenId, data);\\n\\t}\\n\\n\\tfunction mintRetirementCertificate(\\n\\t\\taddress account,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 nftTokenId = nextTokenId();\\n\\t\\tretirementMapping[nftTokenId] = RetirementData(\\n\\t\\t\\taccount,\\n\\t\\t\\tamount,\\n\\t\\t\\ttokenId,\\n\\t\\t\\tretireeName,\\n\\t\\t\\tcustomUri,\\n\\t\\t\\tcomment\\n\\t\\t);\\n\\t\\t_mint(account, nftTokenId, 1, '');\\n\\t\\treturn nftTokenId;\\n\\t}\\n\\n\\n\\tfunction cancelCreditsFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureTransferPayload calldata payload,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t)\\n\\t\\tpublic\\n\\t\\tonlyValidSignatureTransfer(signature, payload)\\n\\t{\\n\\t\\temit CancelledCredits(payload.signer, payload.tokenId, payload.amount,comment, data);\\n\\t\\t_burn(payload.signer, payload.tokenId, payload.amount);\\n\\t}\\n\\n\\t// ----------------------------------\\n\\t//              Hooks\\n\\t// ----------------------------------\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t)\\n\\t\\tinternal\\n\\t\\toverride(ERC1155Upgradeable, ERC1155SupplyUpgradeable)\\n\\t\\twhenNotPaused\\n\\t\\tnotBlacklisted(from)\\n\\t\\tnotBlacklisted(to)\\n\\t{\\n\\t\\tfor(uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\trequire((retirementMapping[ids[i]].amount == 0) || (from == address(0) || to == address(0)), \\\"11\\\");\\n\\t\\t}\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\tfunction setURI(string memory newuri) public onlyRole(URI_SETTER_ROLE) {\\n\\t\\t_setURI(newuri);\\n\\t}\\n\\n\\tfunction pause() public onlyRole(PAUSER_ROLE) {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyRole(PAUSER_ROLE) {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction nextTokenId() internal returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\ttopTokenId += 1;\\n\\t\\t}\\n\\t\\treturn topTokenId;\\n\\t}\\n\\n\\tfunction _authorizeUpgrade(\\n\\t\\taddress newImplementation\\n\\t) internal override onlyRole(UPGRADER_ROLE) {}\\n\\n\\t// The following functions are overrides required by Solidity.\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC1155Upgradeable, AccessControlUpgradeable,ERC1155ReceiverUpgradeable)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x7543b93ec8f34180df6bbc7961ba443b1203adafc04777c56bf6a5e9d770bd3b\",\"license\":\"MIT\"},\"contracts/ProjectStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./types/ProjectTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nabstract contract ProjectStorageV1 is Initializable {\\n    uint256 public topTokenId; \\n    uint256 public projectId;\\n    uint8 public maxAntePercentage; // Deprecated - but has to stay here because of immutability of storage space.\\n    string public projectName; \\n    address public contractRegistry;\\n    mapping(uint256 => VintageData) public exPostVintageMapping;\\n    mapping(uint256 => uint256) public exAnteToExPostTokenId;\\n    mapping(uint256 => uint256) public exPostToExAnteTokenId;\\n    mapping(string => uint256) public serializationToExPostTokenIdMapping;\\n    mapping(uint256 => RetirementData) public retirementMapping;\\n}\\n\\nabstract contract ProjectStorageV2 {\\n    string public projectUri;\\n    string public methodology; // The id of the methodology\\n}\\n\\nabstract contract ProjectStorage is ProjectStorageV1, ProjectStorageV2 {\\n\\n    function __ProjectStorage_init(\\n        address _contractRegistry,\\n        uint256 _projectId,\\n        string memory _projectName,\\n        string memory _projectUri,\\n        string memory _methodology\\n    ) public initializer {\\n        contractRegistry = _contractRegistry;\\n        projectName = _projectName;\\n        projectId = _projectId;\\n        projectUri = _projectUri;\\n        methodology = _methodology;\\n    }\\n        // /**\\n    //  * @dev This empty reserved space is put in place to allow future versions to add new\\n    //  * variables without shifting down storage in the inheritance chain.\\n    //  * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    //  */\\n    uint256[38] private __gap;\\n}\\n\",\"keccak256\":\"0xb0b40c6e4f9a5bbf7c90504a070dd8ea5a7234388a5868328a28159b9c3bbb21\",\"license\":\"MIT\"},\"contracts/interfaces/ICarbonContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface ICarbonContractRegistry {\\n    // ----------------------------------\\n    //              SETTERS\\n    // ----------------------------------\\n\\n    function createNewVerifiedVault() external;\\n\\n    function registerSerialization(string calldata serialization) external;\\n\\n    function setBeaconAddress(address beaconAddress) external;\\n\\n    function setTokenVaultBeaconAddress(address tokenVaultBeaconAddress) external;\\n\\n    // ----------------------------------\\n    //              GETTERS\\n    // ----------------------------------\\n\\n    function getTokenVaultBeaconAddress() external view returns (address);\\n\\n    function getVerifiedVaultAddress(uint256 id) external view returns (address);\\n\\n    function getSerializationAddress(\\n        string calldata serialization\\n    ) external view returns (address);\\n\\n    function getProjectAddressFromId(\\n        uint256 projectId\\n    ) external view returns (address);\\n\\n    function getProjectIdFromAddress(\\n        address projectAddress\\n    ) external view returns (uint256);\\n\\n    function getBeaconAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6ac054c780b257b4b4b672de824e1176c20eb31e49b1b66795200121bb796118\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProject.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport '../types/ProjectTypes.sol';\\n\\ninterface IProject {\\n\\tevent ExPostCreated(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 estimatedAmount,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring serialization\\n\\t);\\n\\n\\tevent VintageMitigationEstimateChanged(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 newEstimate,\\n\\t\\tuint256 oldEstimate,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent ExAnteMinted(\\n\\t\\tuint256 indexed exAnteTokenId,\\n\\t\\tuint256 indexed exPostTokenId,\\n\\t\\taddress indexed account,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\tevent ExPostVerifiedAndMinted(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 amountToAnteHolders,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring monitoringReport\\n\\t);\\n\\n\\tevent AdminBurn(\\n\\t\\taddress indexed from,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent AdminClawback(\\n\\t\\taddress indexed from,\\n\\t\\taddress to,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent ExchangeAnteForPost(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 indexed exPostTokenId,\\n\\t\\tuint256 exPostAmountReceived,\\n\\t\\tuint256 exAnteAmountBurned\\n\\t);\\n\\n\\tevent RetiredVintage(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 nftTokenId,\\n\\t\\tbytes data\\n\\t);\\n\\n\\tevent CancelledCredits(\\n\\t\\taddress indexed account, \\n\\t\\tuint256 indexed tokenId, \\n\\t\\tuint256 amount, \\n\\t\\tstring reason,\\n\\t\\tbytes data\\n\\t\\t);\\n\\n\\tfunction retire(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\taddress beneficiary,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t) external returns (uint256 nftTokenId) ;\\n}\",\"keccak256\":\"0x3957df57c1efde16bc09d628939201da41ea7c7b827a0f0330bbb20464d266de\",\"license\":\"UNLICENSED\"},\"contracts/types/ProjectTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct VintageData {\\n    string serialization;\\n    uint256 estMitigations; // in TC02e\\n    uint256 verificationPeriodStart; // timestamp seconds since Unix\\n    uint256 verificationPeriodEnd;\\n    uint256 lastVerificationTimestamp;\\n}\\n\\nstruct RetirementData {\\n    address retiree;\\n    uint256 amount;\\n    uint256 vintageTokenId;\\n    string retireeName;\\n    string customUri;\\n    string comment;\\n}\\n\\nenum AdminActionReason {\\n    NoReason,\\n    OverEstimated,\\n    UnderEstimated,\\n    CreditsLost,\\n    CreditsGained\\n}\\n\\nabstract contract ProjectTypes {}\\n\",\"keccak256\":\"0xc33719689b0f5257f012954fe55d7a0193ac3a4587a9fa452d66426347527e9e\",\"license\":\"MIT\"},\"contracts/utils/CustomSignaturesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Mojoflower\\n//\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nstruct signatureTransferPayload {\\n    uint256 deadline;\\n    string description;\\n    address signer;\\n    address to;\\n    uint256 tokenId;\\n    uint256 amount;\\n    uint256 nonce;\\n}\\n\\nstruct signatureGenericPayload {\\n    uint256 deadline;\\n    string description;\\n    address signer;\\n    uint256 nonce;\\n}\\n\\nabstract contract CustomSignaturesTypes {}\\n\",\"keccak256\":\"0xb67da48bd20169efa7b11f2fad5ffa6fb8567ba17b48981cb1a6878f044e7851\",\"license\":\"UNLICENSED\"},\"contracts/utils/CustomSignaturesUpgradeable.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Mojoflower\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"./CustomSignaturesTypes.sol\\\";\\n\\ncontract CustomSignaturesUpgradeable is EIP712Upgradeable {\\n    mapping(address => uint32) public signatureNonces;\\n    event TransferSignatureValid(bytes signature, signatureTransferPayload payload);\\n\\n    function __CustomSignatures_init(\\n        string memory signatureName,\\n        string memory version\\n    ) internal onlyInitializing {\\n        __EIP712_init(signatureName, version);\\n    }\\n\\n    modifier onlyValidSignatureTransfer(\\n        bytes calldata signature,\\n        signatureTransferPayload calldata payload\\n    ) {\\n        emit TransferSignatureValid(signature, payload);\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"signatureTransferPayload(uint256 deadline,string description,address signer,address to,uint256 tokenId,uint256 amount,uint256 nonce)\\\"\\n                    ),\\n                    payload.deadline,\\n                    keccak256(abi.encodePacked(payload.description)), // https://ethereum.stackexchange.com/questions/131282/ethers-eip712-wont-work-with-strings\\n                    payload.signer,\\n                    payload.to,\\n                    payload.tokenId,\\n                    payload.amount,\\n                    signatureNonces[payload.signer]\\n                )\\n            )\\n        );\\n        checkBaseSignature(digest, signature, payload.signer, payload.deadline);\\n        signatureNonces[payload.signer]++;\\n        _;\\n    }\\n\\n    function checkBaseSignature(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address payloadSigner,\\n        uint256 payloadDeadline\\n    ) internal view returns (address signer) {\\n        signer = ECDSAUpgradeable.recover(digest, signature);\\n        require(signer == payloadSigner && signer != address(0), \\\"Invalid signature\\\");\\n        require(block.timestamp < payloadDeadline, \\\"Signature expired\\\");\\n    }\\n\\n    // /**\\n    //  * @dev This empty reserved space is put in place to allow future versions to add new\\n    //  * variables without shifting down storage in the inheritance chain.\\n    //  * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    //  */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cb222b8f06f6ce28628a13f387954bb8ac4e0c6c55700dc9e4e2205180ed0f8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051615aa26200011f600039600081816114cb0152818161150b015281816118a8015281816118e801526119600152615aa26000f3fe6080604052600436106102d25760003560e01c8062fdd58e146102d757806301139ca71461030a57806301ffc9a71461032c57806302fe53051461035c5780630e89341c1461037c57806310c1e7a1146103a957806322088ebf146103c9578063248a9ca3146103e9578063275d4dec14610409578063282c51f3146104295780632ea05e441461045d5780632eb2c2d61461047f5780632f2ff15d1461049f5780633584c384146104bf57806336568abe146104ed5780633659cfe61461050d5780633f4ba83a1461052d5780633fafa1271461054257806341a30d3c146105595780634e1273f4146105795780634f1ef286146105a65780634f558e79146105b957806352d1902d146105e857806354ff0795146105fd5780635c975abb146106365780635e3bbaab1461064e578063610e70121461067057806361eeb0891461069d5780636929a19c146106b45780636f63984d146106e6578063728e68e314610706578063748957de1461073757806379c276051461074c5780637f3457101461076c5780638456cb591461078e57806384b0196e146107a35780638f76c1da146107cb57806391d14854146107f95780639a33e300146108195780639d6aed0b1461082e5780639eeb1d501461085d578063a0e1b17114610872578063a106277114610892578063a217fddf146108b2578063a22cb465146108c7578063aa8b2ea7146108e7578063abf410e514610909578063af93ff7214610937578063bc197c8114610957578063bd85b0391461099c578063d5391393146109c9578063d547741f146109fd578063dbd8483d14610a1d578063deb0420714610a66578063e36408d014610a86578063e63ab1e914610a99578063e7705db614610abb578063e985e9c514610add578063eda3b77b14610b26578063edc0b2e614610b46578063f23a6e6114610b68578063f242432a14610b94578063f515e6f214610bb4578063f72c0d8b14610bd6575b600080fd5b3480156102e357600080fd5b506102f76102f2366004614316565b610bf8565b6040519081526020015b60405180910390f35b34801561031657600080fd5b5061032a61032536600461441a565b610c90565b005b34801561033857600080fd5b5061034c6103473660046144e1565b610ec3565b6040519015158152602001610301565b34801561036857600080fd5b5061032a6103773660046144fe565b610ed4565b34801561038857600080fd5b5061039c610397366004614532565b610ef9565b60405161030191906145a3565b3480156103b557600080fd5b5061032a6103c43660046145b6565b610f8d565b3480156103d557600080fd5b5061032a6103e436600461466f565b6110c6565b3480156103f557600080fd5b506102f7610404366004614532565b611339565b34801561041557600080fd5b506102f7610424366004614721565b61134e565b34801561043557600080fd5b506102f77f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b34801561046957600080fd5b506102f7600080516020615a0d83398151915281565b34801561048b57600080fd5b5061032a61049a366004614885565b6113da565b3480156104ab57600080fd5b5061032a6104ba366004614914565b611426565b3480156104cb57600080fd5b506102f76104da366004614532565b6101fe6020526000908152604090205481565b3480156104f957600080fd5b5061032a610508366004614914565b611447565b34801561051957600080fd5b5061032a610528366004614940565b6114c1565b34801561053957600080fd5b5061032a611589565b34801561054e57600080fd5b506102f76101f85481565b34801561056557600080fd5b5061032a61057436600461495b565b6115a9565b34801561058557600080fd5b506105996105943660046149c9565b611775565b6040516103019190614ace565b61032a6105b4366004614ae1565b61189e565b3480156105c557600080fd5b5061034c6105d4366004614532565b600090815260fb6020526040902054151590565b3480156105f457600080fd5b506102f7611953565b34801561060957600080fd5b506102f76106183660046144fe565b80516020818301810180516101ff8252928201919093012091525481565b34801561064257600080fd5b5060c95460ff1661034c565b34801561065a57600080fd5b506102f7600080516020615a2d83398151915281565b34801561067c57600080fd5b506101f95461068b9060ff1681565b60405160ff9091168152602001610301565b3480156106a957600080fd5b506102f76101f75481565b3480156106c057600080fd5b506106d46106cf366004614532565b611a02565b60405161030196959493929190614b31565b3480156106f257600080fd5b5061034c610701366004614532565b611bdc565b34801561071257600080fd5b50610726610721366004614532565b611c03565b604051610301959493929190614b84565b34801561074357600080fd5b5061039c611cba565b34801561075857600080fd5b5061032a610767366004614bbb565b611d49565b34801561077857600080fd5b506102f760008051602061596683398151915281565b34801561079a57600080fd5b5061032a611dff565b3480156107af57600080fd5b506107b8611e1f565b6040516103019796959493929190614cd7565b3480156107d757600080fd5b506102f76107e6366004614532565b6101fd6020526000908152604090205481565b34801561080557600080fd5b5061034c610814366004614914565b611ebf565b34801561082557600080fd5b5061039c611eea565b34801561083a57600080fd5b506040805180820190915260068152650302e302e31360d41b602082015261039c565b34801561086957600080fd5b5061039c611ef8565b34801561087e57600080fd5b5061032a61088d366004614d47565b611f06565b34801561089e57600080fd5b5061032a6108ad366004614d88565b6120a5565b3480156108be57600080fd5b506102f7600081565b3480156108d357600080fd5b5061032a6108e2366004614dfa565b6121c2565b3480156108f357600080fd5b506102f760008051602061594683398151915281565b34801561091557600080fd5b506101fb5461092a906001600160a01b031681565b6040516103019190614e36565b34801561094357600080fd5b506102f7610952366004614e4a565b6121cd565b34801561096357600080fd5b50610983610972366004614885565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610301565b3480156109a857600080fd5b506102f76109b7366004614532565b600090815260fb602052604090205490565b3480156109d557600080fd5b506102f77f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610a0957600080fd5b5061032a610a18366004614914565b6123dc565b348015610a2957600080fd5b50610a51610a38366004614940565b6101c56020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610301565b348015610a7257600080fd5b5061032a610a81366004614f29565b6123f8565b61032a610a94366004614f88565b612487565b348015610aa557600080fd5b506102f76000805160206159a683398151915281565b348015610ac757600080fd5b506102f7600080516020615a4d83398151915281565b348015610ae957600080fd5b5061034c610af8366004615009565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b348015610b3257600080fd5b5061032a610b41366004615033565b6125c5565b348015610b5257600080fd5b506102f76000805160206158a683398151915281565b348015610b7457600080fd5b50610983610b83366004615066565b63f23a6e6160e01b95945050505050565b348015610ba057600080fd5b5061032a610baf366004615066565b6125ee565b348015610bc057600080fd5b506102f76000805160206159ed83398151915281565b348015610be257600080fd5b506102f760008051602061590683398151915281565b60006001600160a01b038316610c685760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b600054610100900460ff1615808015610cb05750600054600160ff909116105b80610cd15750610cbf30612633565b158015610cd1575060005460ff166001145b610ced5760405162461bcd60e51b8152600401610c5f906150ca565b6000805460ff191660011790558015610d10576000805461ff0019166101001790555b610d2860405180602001604052806000815250612642565b610d30612672565b610d3861269b565b610d40612672565b610d48612672565b610d966040518060400160405280600f81526020016e436172626f6e20526567697374727960881b81525060405180604001604052806005815260200164302e302e3160d81b8152506126ca565b610da387868685876120a5565b610dae6000876126fb565b610dc6600080516020615966833981519152876126fb565b610dde6000805160206159a6833981519152876126fb565b610df66000805160206158a6833981519152876126fb565b610e0e600080516020615a2d833981519152876126fb565b610e26600080516020615906833981519152876126fb565b610e3e6000805160206159ed833981519152876126fb565b610e56600080516020615a4d833981519152876126fb565b610e6e600080516020615a0d833981519152876126fb565b610e86600080516020615a2d833981519152336126fb565b8015610eba576000805461ff0019169055604051600181526000805160206159868339815191529060200160405180910390a15b50505050505050565b6000610ece82612781565b92915050565b600080516020615966833981519152610eec816127a6565b610ef5826127b0565b5050565b606060678054610f0890615118565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3490615118565b8015610f815780601f10610f5657610100808354040283529160200191610f81565b820191906000526020600020905b815481529060010190602001808311610f6457829003601f168201915b50505050509050919050565b6000805160206158a6833981519152610fa5816127a6565b83610faf81611bdc565b610fcb5760405162461bcd60e51b8152600401610c5f9061514c565b60008581526101fc602052604081206003810154600490910154879111604051806040016040528060018152602001603360f81b815250906110205760405162461bcd60e51b8152600401610c5f91906145a3565b5060008781526101fe60205260408120549081900361106a57506101f780546001019081905560008881526101fe602090815260408083208490558383526101fd90915290208890555b886001600160a01b031688827f1fe9ade752d24e4f4dca10f5c807a7cc8630c7604280c8b124097d93b5bb02a18a6040516110a791815260200190565b60405180910390a46110bb898289896127c3565b505050505050505050565b8484846000805160206158e68339815191528383836040516110ea93929190615190565b60405180910390a1600061120160008051602061588683398151915283356111156020860186615268565b6040516020016111269291906152ae565b6040516020818303038152906040528051906020012085604001602081019061114f9190614940565b61115f6080880160608901614940565b608088013560a08901356101c5600061117e60608d0160408e01614940565b6001600160a01b03908116825260208083019390935260409182016000205482519384019a909a529082019790975260608101959095529285166080850152931660a083015260c082019290925260e081019190915263ffffffff90911661010082015261012001604051602081830303815290604052805190602001206128cd565b90506112558185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124e925050506060860160408701614940565b85356128fa565b506101c5600061126b6060850160408601614940565b6001600160a01b0316815260208101919091526040016000908120805463ffffffff1691611298836152d4565b91906101000a81548163ffffffff021916908363ffffffff1602179055505086608001358760400160208101906112cf9190614940565b6001600160a01b03167f782105afe5542acae5ab54dc3dab8b54887fd38a79f55330b3e1e70c3063d67b8960a00135898960405161130f939291906152f7565b60405180910390a36110bb61132a6060890160408a01614940565b88608001358960a001356129bc565b60009081526097602052604090206001015490565b60008761135a81611bdc565b6113765760405162461bcd60e51b8152600401610c5f9061514c565b6001600160a01b038716330361139c57611395338a8a89898989612b3e565b91506113ce565b6001600160a01b0387166113af57600080fd5b6113bc33888b8b87612bac565b6113cb878a8a89898989612b3e565b91505b50979650505050505050565b6001600160a01b0385163314806113f657506113f68533610af8565b6114125760405162461bcd60e51b8152600401610c5f90615322565b61141f8585858585612ccb565b5050505050565b61142f82611339565b611438816127a6565b61144283836126fb565b505050565b6001600160a01b03811633146114b75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c5f565b610ef58282612eb1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115095760405162461bcd60e51b8152600401610c5f90615370565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661153b612f18565b6001600160a01b0316146115615760405162461bcd60e51b8152600401610c5f906153aa565b61156a81612f34565b6040805160008082526020820190925261158691839190612f4c565b50565b6000805160206159a68339815191526115a1816127a6565b6115866130b7565b600080516020615a4d8339815191526115c1816127a6565b866115cb81611bdc565b6115e75760405162461bcd60e51b8152600401610c5f9061514c565b60008881526101fc6020526040812060038101546004909101548a9111604051806040016040528060018152602001603360f81b8152509061163c5760405162461bcd60e51b8152600401610c5f91906145a3565b50878910156116715760405162461bcd60e51b81526020600482015260016024820152601b60f91b6044820152606401610c5f565b60008a81526101fe6020526040812054908190036116bb5788156116bb5760405162461bcd60e51b81526020600482015260016024820152603960f81b6044820152606401610c5f565b8a7fe19de0f3da1193000100a217838f49f6bdda20dc974d33b61f92faaf446d181d8b8b8b8b8b6040516116f39594939291906153e4565b60405180910390a260006117078a8c61540f565b1115611731576117318c8c61171c8c8e61540f565b604051806020016040528060008152506127c3565b60008b81526101fc60205260409020600401879055881561176757611767308c8b604051806020016040528060008152506127c3565b505050505050505050505050565b606081518351146117da5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610c5f565b600083516001600160401b038111156117f5576117f5614340565b60405190808252806020026020018201604052801561181e578160200160208202803683370190505b50905060005b84518110156118965761186985828151811061184257611842615426565b602002602001015185838151811061185c5761185c615426565b6020026020010151610bf8565b82828151811061187b5761187b615426565b602090810291909101015261188f8161543c565b9050611824565b509392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036118e65760405162461bcd60e51b8152600401610c5f90615370565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611918612f18565b6001600160a01b03161461193e5760405162461bcd60e51b8152600401610c5f906153aa565b61194782612f34565b610ef582826001612f4c565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119ee5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610c5f565b506000805160206159268339815191525b90565b6102006020526000908152604090208054600182015460028301546003840180546001600160a01b03909416949293919291611a3d90615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6990615118565b8015611ab65780601f10611a8b57610100808354040283529160200191611ab6565b820191906000526020600020905b815481529060010190602001808311611a9957829003601f168201915b505050505090806004018054611acb90615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611af790615118565b8015611b445780601f10611b1957610100808354040283529160200191611b44565b820191906000526020600020905b815481529060010190602001808311611b2757829003601f168201915b505050505090806005018054611b5990615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8590615118565b8015611bd25780601f10611ba757610100808354040283529160200191611bd2565b820191906000526020600020905b815481529060010190602001808311611bb557829003601f168201915b5050505050905086565b60008181526101fc602052604081208054829190611bf990615118565b9050119050919050565b6101fc60205260009081526040902080548190611c1f90615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4b90615118565b8015611c985780601f10611c6d57610100808354040283529160200191611c98565b820191906000526020600020905b815481529060010190602001808311611c7b57829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b6102018054611cc890615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf490615118565b8015611d415780601f10611d1657610100808354040283529160200191611d41565b820191906000526020600020905b815481529060010190602001808311611d2457829003601f168201915b505050505081565b600080516020615a2d833981519152611d61816127a6565b60005b825181101561144257611ded838281518110611d8257611d82615426565b602002602001015160200151848381518110611da057611da0615426565b602002602001015160400151858481518110611dbe57611dbe615426565b602002602001015160600151868581518110611ddc57611ddc615426565b602002602001015160000151611f06565b80611df78161543c565b915050611d64565b6000805160206159a6833981519152611e17816127a6565b611586613103565b600060608060008060006060610191546000801b148015611e41575061019254155b611e855760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610c5f565b611e8d613140565b611e956131d3565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101fa8054611cc890615118565b6102028054611cc890615118565b600080516020615a2d833981519152611f1e816127a6565b838311611f515760405162461bcd60e51b81526020600482015260016024820152600d60fa1b6044820152606401610c5f565b6000611f656101f780546001019081905590565b6101fb546040516344d9d59b60e01b81529192506001600160a01b0316906344d9d59b90611f979086906004016145a3565b600060405180830381600087803b158015611fb157600080fd5b505af1158015611fc5573d6000803e3d6000fd5b50505050806101ff84604051611fdb9190615455565b90815260408051602092819003830181209390935560a083018152858352818301899052828101889052606083018790526000608084018190528481526101fc8352208251805191926120339284929091019061426a565b5060208201518160010155604082015181600201556060820151816003015560808201518160040155905050807fc5fb6d85b5baef0a615415607787aea341771027b7e4da34da58eaeb661154ea878787876040516120959493929190615471565b60405180910390a2505050505050565b600054610100900460ff16158080156120c55750600054600160ff909116105b806120e657506120d430612633565b1580156120e6575060005460ff166001145b6121025760405162461bcd60e51b8152600401610c5f906150ca565b6000805460ff191660011790558015612125576000805461ff0019166101001790555b6101fb80546001600160a01b0319166001600160a01b0388161790558351612155906101fa90602087019061426a565b506101f885905582516121709061020190602086019061426a565b5081516121859061020290602085019061426a565b5080156121ba576000805461ff0019169055604051600181526000805160206159868339815191529060200160405180910390a15b505050505050565b610ef53383836131e3565b600085608001356121dd81611bdc565b6121f95760405162461bcd60e51b8152600401610c5f9061514c565b8888886000805160206158e683398151915283838360405161221d93929190615190565b60405180910390a1600061224860008051602061588683398151915283356111156020860186615268565b90506122958185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124e925050506060860160408701614940565b506101c560006122ab6060850160408601614940565b6001600160a01b0316815260208101919091526040016000908120805463ffffffff16916122d8836152d4565b91906101000a81548163ffffffff021916908363ffffffff160217905550508a606001602081019061230a9190614940565b6001600160a01b031661232360608d0160408e01614940565b6001600160a01b03160361235e5761235761234460608d0160408e01614940565b8c608001358d60a001358d8d8d8d612b3e565b95506123cc565b600061237060808d0160608e01614940565b6001600160a01b03160361238357600080fd5b6123b661239660608d0160408e01614940565b6123a660808e0160608f01614940565b8d608001358e60a001358b612bac565b6123c961234460808d0160608e01614940565b95505b5050505050979650505050505050565b6123e582611339565b6123ee816127a6565b6114428383612eb1565b600080516020615a0d833981519152612410816127a6565b81600481111561242257612422615496565b604080516001600160a01b038881168252602082018790528792908a16917fa8b90aeef4d9590cac2ff486fc2b5d9749ed41f9388a7eb159eef94cf5fb65ab910160405180910390a46121ba8686868660405180602001604052806000815250612bac565b8383836000805160206158e68339815191528383836040516124ab93929190615190565b60405180910390a160006124d660008051602061588683398151915283356111156020860186615268565b90506125238185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124e925050506060860160408701614940565b506101c560006125396060850160408601614940565b6001600160a01b0316815260208101919091526040016000908120805463ffffffff1691612566836152d4565b91906101000a81548163ffffffff021916908363ffffffff160217905550506125bb86604001602081019061259b9190614940565b6125ab6080890160608a01614940565b88608001358960a0013589612bac565b5050505050505050565b600080516020615a0d8339815191526125dd816127a6565b6125e88484846129bc565b50505050565b6001600160a01b03851633148061260a575061260a8533610af8565b6126265760405162461bcd60e51b8152600401610c5f90615322565b61141f8585858585612bac565b6001600160a01b03163b151590565b600054610100900460ff166126695760405162461bcd60e51b8152600401610c5f906154ac565b611586816132c3565b600054610100900460ff166126995760405162461bcd60e51b8152600401610c5f906154ac565b565b600054610100900460ff166126c25760405162461bcd60e51b8152600401610c5f906154ac565b6126996132f3565b600054610100900460ff166126f15760405162461bcd60e51b8152600401610c5f906154ac565b610ef58282613326565b6127058282611ebf565b610ef55760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561273d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006001600160e01b03198216630271189760e51b1480610ece5750610ece82613357565b611586813361337c565b8051610ef590606790602084019061426a565b6001600160a01b0384166128235760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610c5f565b33600061282f856133d5565b9050600061283c856133d5565b905061284d83600089858589613420565b60008681526065602090815260408083206001600160a01b038b1684529091528120805487929061287f9084906154f7565b909155505060408051878152602081018790526001600160a01b03808a169260009291871691600080516020615866833981519152910160405180910390a4610eba83600089898989613549565b6000610ece6128da6136ab565b8360405161190160f01b8152600281019290925260228201526042902090565b600061290685856136ba565b9050826001600160a01b0316816001600160a01b031614801561293157506001600160a01b03811615155b6129715760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610c5f565b8142106129b45760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610c5f565b949350505050565b6001600160a01b038316612a1e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610c5f565b336000612a2a846133d5565b90506000612a37846133d5565b9050612a5783876000858560405180602001604052806000815250613420565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015612ad65760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610c5f565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a9052909290881691600080516020615866833981519152910160405180910390a4604080516020810190915260009052610eba565b6000612b4b8888886129bc565b612b598888888888886136d6565b905086886001600160a01b03167f1325d882b2ca749c878a4ab3a393f6e51b69026faa05426b6d1ec6776a3f2f3c888486604051612b999392919061550f565b60405180910390a3979650505050505050565b6001600160a01b038416612bd25760405162461bcd60e51b8152600401610c5f90615537565b336000612bde856133d5565b90506000612beb856133d5565b9050612bfb838989858589613420565b60008681526065602090815260408083206001600160a01b038c16845290915290205485811015612c3e5760405162461bcd60e51b8152600401610c5f9061557c565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612c7d9084906154f7565b909155505060408051888152602081018890526001600160a01b03808b16928c82169291881691600080516020615866833981519152910160405180910390a46110bb848a8a8a8a8a613549565b8151835114612d2d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c5f565b6001600160a01b038416612d535760405162461bcd60e51b8152600401610c5f90615537565b33612d62818787878787613420565b60005b8451811015612e4b576000858281518110612d8257612d82615426565b602002602001015190506000858381518110612da057612da0615426565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015612df15760405162461bcd60e51b8152600401610c5f9061557c565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612e309084906154f7565b9250508190555050505080612e449061543c565b9050612d65565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612e9b9291906155c6565b60405180910390a46121ba8187878787876137d5565b612ebb8282611ebf565b15610ef55760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020615926833981519152546001600160a01b031690565b600080516020615906833981519152610ef5816127a6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612f7f5761144283613897565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612fd9575060408051601f3d908101601f19168201909252612fd6918101906155eb565b60015b61303c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610c5f565b60008051602061592683398151915281146130ab5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610c5f565b50611442838383613931565b6130bf613956565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516130f99190614e36565b60405180910390a1565b61310b61399f565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130ec3390565b6060610193805461315090615118565b80601f016020809104026020016040519081016040528092919081815260200182805461317c90615118565b80156131c95780601f1061319e576101008083540402835291602001916131c9565b820191906000526020600020905b8154815290600101906020018083116131ac57829003601f168201915b5050505050905090565b6060610194805461315090615118565b816001600160a01b0316836001600160a01b0316036132565760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610c5f565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff166132ea5760405162461bcd60e51b8152600401610c5f906154ac565b611586816127b0565b600054610100900460ff1661331a5760405162461bcd60e51b8152600401610c5f906154ac565b60c9805460ff19169055565b600054610100900460ff1661334d5760405162461bcd60e51b8152600401610c5f906154ac565b610ef582826139e5565b60006001600160e01b03198216637965db0b60e01b1480610ece5750610ece82613a46565b6133868282611ebf565b610ef55761339381613a96565b61339e836020613aa8565b6040516020016133af929190615604565b60408051601f198184030181529082905262461bcd60e51b8252610c5f916004016145a3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061340f5761340f615426565b602090810291909101015292915050565b61342861399f565b8461344160008051602061594683398151915282611ebf565b1561345e5760405162461bcd60e51b8152600401610c5f90615673565b8461347760008051602061594683398151915282611ebf565b156134945760405162461bcd60e51b8152600401610c5f90615673565b60005b855181101561353a5761020060008783815181106134b7576134b7615426565b6020026020010151815260200190815260200160002060010154600014806134f757506001600160a01b03881615806134f757506001600160a01b038716155b6135285760405162461bcd60e51b8152602060048201526002602482015261313160f01b6044820152606401610c5f565b806135328161543c565b915050613497565b506125bb888888888888613c4a565b61355b846001600160a01b0316612633565b156121ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613594908990899088908890889060040161568e565b6020604051808303816000875af19250505080156135cf575060408051601f3d908101601f191682019092526135cc918101906156c8565b60015b61367b576135db6156e5565b806308c379a00361361457506135ef615700565b806135fa5750613616565b8060405162461bcd60e51b8152600401610c5f91906145a3565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610c5f565b6001600160e01b0319811663f23a6e6160e01b14610eba5760405162461bcd60e51b8152600401610c5f90615789565b60006136b5613dc3565b905090565b60008060006136c98585613e37565b9150915061189681613e7c565b6000806136eb6101f780546001019081905590565b6040805160c0810182526001600160a01b038b8116825260208083018b81528385018d8152606085018c8152608086018c905260a086018b90526000888152610200855296909620855181546001600160a01b031916951694909417845590516001840155516002830155925180519495509193909261377292600385019291019061426a565b506080820151805161378e91600484019160209091019061426a565b5060a082015180516137aa91600584019160209091019061426a565b509050506137ca88826001604051806020016040528060008152506127c3565b979650505050505050565b6137e7846001600160a01b0316612633565b156121ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061382090899089908890889088906004016157d1565b6020604051808303816000875af192505050801561385b575060408051601f3d908101601f19168201909252613858918101906156c8565b60015b613867576135db6156e5565b6001600160e01b0319811663bc197c8160e01b14610eba5760405162461bcd60e51b8152600401610c5f90615789565b6138a081612633565b6139025760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c5f565b60008051602061592683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61393a83613fc1565b6000825111806139475750805b15611442576125e88383614001565b60c95460ff166126995760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c5f565b60c95460ff16156126995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c5f565b600054610100900460ff16613a0c5760405162461bcd60e51b8152600401610c5f906154ac565b8151613a209061019390602085019061426a565b508051613a359061019490602084019061426a565b505060006101918190556101925550565b60006001600160e01b03198216636cdb3d1360e11b1480613a7757506001600160e01b031982166303a24d0760e21b145b80610ece57506301ffc9a760e01b6001600160e01b0319831614610ece565b6060610ece6001600160a01b03831660145b60606000613ab783600261582f565b613ac29060026154f7565b6001600160401b03811115613ad957613ad9614340565b6040519080825280601f01601f191660200182016040528015613b03576020820181803683370190505b509050600360fc1b81600081518110613b1e57613b1e615426565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b4d57613b4d615426565b60200101906001600160f81b031916908160001a9053506000613b7184600261582f565b613b7c9060016154f7565b90505b6001811115613bf4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613bb057613bb0615426565b1a60f81b828281518110613bc657613bc6615426565b60200101906001600160f81b031916908160001a90535060049490941c93613bed8161584e565b9050613b7f565b508315613c435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c5f565b9392505050565b6001600160a01b038516613cd15760005b8351811015613ccf57828181518110613c7657613c76615426565b602002602001015160fb6000868481518110613c9457613c94615426565b602002602001015181526020019081526020016000206000828254613cb991906154f7565b90915550613cc890508161543c565b9050613c5b565b505b6001600160a01b0384166121ba5760005b8351811015610eba576000848281518110613cff57613cff615426565b602002602001015190506000848381518110613d1d57613d1d615426565b60200260200101519050600060fb600084815260200190815260200160002054905081811015613da05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610c5f565b600092835260fb602052604090922091039055613dbc8161543c565b9050613ce2565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613dee614026565b613df6614084565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000808251604103613e6d5760208301516040840151606085015160001a613e61878285856140b6565b94509450505050613e75565b506000905060025b9250929050565b6000816004811115613e9057613e90615496565b03613e985750565b6001816004811115613eac57613eac615496565b03613ef45760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610c5f565b6002816004811115613f0857613f08615496565b03613f555760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c5f565b6003816004811115613f6957613f69615496565b036115865760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c5f565b613fca81613897565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060613c4383836040518060600160405280602781526020016159c660279139614170565b600080614031613140565b805190915015614048578051602090910120919050565b6101915480156140585792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5090565b60008061408f6131d3565b8051909150156140a6578051602090910120919050565b6101925480156140585792915050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156140e35750600090506003614167565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614137573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661416057600060019250925050614167565b9150600090505b94509492505050565b6060600080856001600160a01b03168560405161418d9190615455565b600060405180830381855af49150503d80600081146141c8576040519150601f19603f3d011682016040523d82523d6000602084013e6141cd565b606091505b50915091506141de868383876141e8565b9695505050505050565b6060831561425557825160000361424e5761420285612633565b61424e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c5f565b50816129b4565b6129b483838151156135fa5781518083602001fd5b82805461427690615118565b90600052602060002090601f01602090048101928261429857600085556142de565b82601f106142b157805160ff19168380011785556142de565b828001600101855582156142de579182015b828111156142de5782518255916020019190600101906142c3565b506140809291505b8082111561408057600081556001016142e6565b80356001600160a01b038116811461431157600080fd5b919050565b6000806040838503121561432957600080fd5b614332836142fa565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60a081016001600160401b038111828210171561437557614375614340565b60405250565b601f8201601f191681016001600160401b03811182821017156143a0576143a0614340565b6040525050565b600082601f8301126143b857600080fd5b81356001600160401b038111156143d1576143d1614340565b6040516143e8601f8301601f19166020018261437b565b8181528460208386010111156143fd57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561443357600080fd5b61443c876142fa565b955061444a602088016142fa565b94506040870135935060608701356001600160401b038082111561446d57600080fd5b6144798a838b016143a7565b9450608089013591508082111561448f57600080fd5b61449b8a838b016143a7565b935060a08901359150808211156144b157600080fd5b506144be89828a016143a7565b9150509295509295509295565b6001600160e01b03198116811461158657600080fd5b6000602082840312156144f357600080fd5b8135613c43816144cb565b60006020828403121561451057600080fd5b81356001600160401b0381111561452657600080fd5b6129b4848285016143a7565b60006020828403121561454457600080fd5b5035919050565b60005b8381101561456657818101518382015260200161454e565b838111156125e85750506000910152565b6000815180845261458f81602086016020860161454b565b601f01601f19169290920160200192915050565b602081526000613c436020830184614577565b600080600080608085870312156145cc57600080fd5b6145d5856142fa565b9350602085013592506040850135915060608501356001600160401b038111156145fe57600080fd5b61460a878288016143a7565b91505092959194509250565b60008083601f84011261462857600080fd5b5081356001600160401b0381111561463f57600080fd5b602083019150836020828501011115613e7557600080fd5b600060e0828403121561466957600080fd5b50919050565b60008060008060006080868803121561468757600080fd5b85356001600160401b038082111561469e57600080fd5b6146aa89838a01614616565b909750955060208801359150808211156146c357600080fd5b6146cf89838a01614657565b945060408801359150808211156146e557600080fd5b6146f189838a016143a7565b9350606088013591508082111561470757600080fd5b50614714888289016143a7565b9150509295509295909350565b600080600080600080600060e0888a03121561473c57600080fd5b8735965060208801359550614753604089016142fa565b945060608801356001600160401b038082111561476f57600080fd5b61477b8b838c016143a7565b955060808a013591508082111561479157600080fd5b61479d8b838c016143a7565b945060a08a01359150808211156147b357600080fd5b6147bf8b838c016143a7565b935060c08a01359150808211156147d557600080fd5b506147e28a828b016143a7565b91505092959891949750929550565b60006001600160401b0382111561480a5761480a614340565b5060051b60200190565b600082601f83011261482557600080fd5b81356020614832826147f1565b60405161483f828261437b565b83815260059390931b850182019282810191508684111561485f57600080fd5b8286015b8481101561487a5780358352918301918301614863565b509695505050505050565b600080600080600060a0868803121561489d57600080fd5b6148a6866142fa565b94506148b4602087016142fa565b935060408601356001600160401b03808211156148d057600080fd5b6148dc89838a01614814565b945060608801359150808211156148f257600080fd5b6148fe89838a01614814565b9350608088013591508082111561470757600080fd5b6000806040838503121561492757600080fd5b82359150614937602084016142fa565b90509250929050565b60006020828403121561495257600080fd5b613c43826142fa565b600080600080600080600060e0888a03121561497657600080fd5b61497f886142fa565b96506020880135955060408801359450606088013593506080880135925060a0880135915060c08801356001600160401b038111156149bd57600080fd5b6147e28a828b016143a7565b600080604083850312156149dc57600080fd5b82356001600160401b03808211156149f357600080fd5b818501915085601f830112614a0757600080fd5b81356020614a14826147f1565b604051614a21828261437b565b83815260059390931b8501820192828101915089841115614a4157600080fd5b948201945b83861015614a6657614a57866142fa565b82529482019490820190614a46565b96505086013592505080821115614a7c57600080fd5b50614a8985828601614814565b9150509250929050565b600081518084526020808501945080840160005b83811015614ac357815187529582019590820190600101614aa7565b509495945050505050565b602081526000613c436020830184614a93565b60008060408385031215614af457600080fd5b614afd836142fa565b915060208301356001600160401b03811115614b1857600080fd5b614a89858286016143a7565b6001600160a01b03169052565b60018060a01b038716815285602082015284604082015260c060608201526000614b5e60c0830186614577565b8281036080840152614b708186614577565b905082810360a08401526113cb8185614577565b60a081526000614b9760a0830188614577565b90508560208301528460408301528360608301528260808301529695505050505050565b60006020808385031215614bce57600080fd5b82356001600160401b0380821115614be557600080fd5b818501915085601f830112614bf957600080fd5b8135614c04816147f1565b60408051614c12838261437b565b83815260059390931b8501860192868101925089841115614c3257600080fd5b8686015b84811015614cc957803586811115614c4e5760008081fd5b870160a0818d03601f1901811315614c665760008081fd5b8451614c7181614356565b8a83013589811115614c835760008081fd5b614c918f8d838701016143a7565b825250828601358b82015260608084013587830152608080850135918301919091529190920135908201528452928701928701614c36565b509998505050505050505050565b60ff60f81b8816815260e060208201526000614cf660e0830189614577565b8281036040840152614d088189614577565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050614d398185614a93565b9a9950505050505050505050565b60008060008060808587031215614d5d57600080fd5b84359350602085013592506040850135915060608501356001600160401b038111156145fe57600080fd5b600080600080600060a08688031215614da057600080fd5b614da9866142fa565b94506020860135935060408601356001600160401b0380821115614dcc57600080fd5b614dd889838a016143a7565b94506060880135915080821115614dee57600080fd5b6148fe89838a016143a7565b60008060408385031215614e0d57600080fd5b614e16836142fa565b915060208301358015158114614e2b57600080fd5b809150509250929050565b6001600160a01b0391909116815260200190565b600080600080600080600060c0888a031215614e6557600080fd5b87356001600160401b0380821115614e7c57600080fd5b614e888b838c01614616565b909950975060208a0135915080821115614ea157600080fd5b614ead8b838c01614657565b965060408a0135915080821115614ec357600080fd5b614ecf8b838c016143a7565b955060608a0135915080821115614ee557600080fd5b614ef18b838c016143a7565b945060808a0135915080821115614f0757600080fd5b614f138b838c016143a7565b935060a08a01359150808211156147d557600080fd5b600080600080600060a08688031215614f4157600080fd5b614f4a866142fa565b9450614f58602087016142fa565b93506040860135925060608601359150608086013560058110614f7a57600080fd5b809150509295509295909350565b60008060008060608587031215614f9e57600080fd5b84356001600160401b0380821115614fb557600080fd5b614fc188838901614616565b90965094506020870135915080821115614fda57600080fd5b614fe688838901614657565b93506040870135915080821115614ffc57600080fd5b5061460a878288016143a7565b6000806040838503121561501c57600080fd5b615025836142fa565b9150614937602084016142fa565b60008060006060848603121561504857600080fd5b615051846142fa565b95602085013595506040909401359392505050565b600080600080600060a0868803121561507e57600080fd5b615087866142fa565b9450615095602087016142fa565b9350604086013592506060860135915060808601356001600160401b038111156150be57600080fd5b614714888289016143a7565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c9082168061512c57607f821691505b60208210810361466957634e487b7160e01b600052602260045260246000fd5b6020808252600190820152603160f81b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006151a4604083018587615167565b8281036020840152833581526020840135601e198536030181126151c757600080fd5b840180356001600160401b038111156151df57600080fd5b8036038613156151ee57600080fd5b60e0602084015261520660e084018260208501615167565b915050615215604086016142fa565b6152226040840182614b24565b5061522f606086016142fa565b61523c6060840182614b24565b506080850135608083015260a085013560a083015260c085013560c08301528092505050949350505050565b6000808335601e1984360301811261527f57600080fd5b8301803591506001600160401b0382111561529957600080fd5b602001915036819003821315613e7557600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036152ed576152ed6152be565b6001019392505050565b8381526060602082015260006153106060830185614577565b82810360408401526141de8185614577565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201526000805160206158c683398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201526000805160206158c683398151915260408201526b6163746976652070726f787960a01b606082015260800190565b85815284602082015283604082015282606082015260a0608082015260006137ca60a0830184614577565b600082821015615421576154216152be565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001820161544e5761544e6152be565b5060010190565b6000825161546781846020870161454b565b9190910192915050565b8481528360208201528260408201526080606082015260006141de6080830184614577565b634e487b7160e01b600052602160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111561550a5761550a6152be565b500190565b83815282602082015260606040820152600061552e6060830184614577565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006155d96040830185614a93565b828103602084015261552e8185614a93565b6000602082840312156155fd57600080fd5b5051919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161563681601785016020880161454b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161566781602884016020880161454b565b01602801949350505050565b6020808252600190820152600360fc1b604082015260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137ca90830184614577565b6000602082840312156156da57600080fd5b8151613c43816144cb565b600060033d11156119ff5760046000803e5060005160e01c90565b600060443d101561570e5790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561573d57505050505090565b82850191508151818111156157555750505050505090565b843d870101602082850101111561576f5750505050505090565b61577e6020828601018761437b565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906157fd90830186614a93565b828103606084015261580f8186614a93565b905082810360808401526158238185614577565b98975050505050505050565b6000816000190483118215151615615849576158496152be565b500290565b60008161585d5761585d6152be565b50600019019056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6279da588818fa1bb747c46ac45fd0af16861a77c5222cf5ac4538360ca4f77a2cd5bbb2f0fbfc1d5938ca13cabd3156d362f7862fa87504c8d589f5e8f2cbc45346756e6374696f6e206d7573742062652063616c6c6564207468726f75676820bdde33eca765abe07e416fa5225f9a5dbc393366c8bbf45df689e69ee318a934189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcf48dee1a72497b9e734e498e1b3086c0d2dbcca13f16f15848f974469f906bbf7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656498db8a220cd0f09badce9f22d0ba7e93edb3d404448cc3560d391ab096ad16e94bbc247fc4736523c8bdd1853fee2acfa817d663f8f4422b13e78ebf99e204a2ddf79b8d2110dbe281cf3bb7762d508cea586c974794c8fc949d41b0db1145130ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09a2646970667358221220b982eeeeaca38fbe16293f4f57a201889e774fe9dc50e5ca1830adffc0a7d8f664736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106102d25760003560e01c8062fdd58e146102d757806301139ca71461030a57806301ffc9a71461032c57806302fe53051461035c5780630e89341c1461037c57806310c1e7a1146103a957806322088ebf146103c9578063248a9ca3146103e9578063275d4dec14610409578063282c51f3146104295780632ea05e441461045d5780632eb2c2d61461047f5780632f2ff15d1461049f5780633584c384146104bf57806336568abe146104ed5780633659cfe61461050d5780633f4ba83a1461052d5780633fafa1271461054257806341a30d3c146105595780634e1273f4146105795780634f1ef286146105a65780634f558e79146105b957806352d1902d146105e857806354ff0795146105fd5780635c975abb146106365780635e3bbaab1461064e578063610e70121461067057806361eeb0891461069d5780636929a19c146106b45780636f63984d146106e6578063728e68e314610706578063748957de1461073757806379c276051461074c5780637f3457101461076c5780638456cb591461078e57806384b0196e146107a35780638f76c1da146107cb57806391d14854146107f95780639a33e300146108195780639d6aed0b1461082e5780639eeb1d501461085d578063a0e1b17114610872578063a106277114610892578063a217fddf146108b2578063a22cb465146108c7578063aa8b2ea7146108e7578063abf410e514610909578063af93ff7214610937578063bc197c8114610957578063bd85b0391461099c578063d5391393146109c9578063d547741f146109fd578063dbd8483d14610a1d578063deb0420714610a66578063e36408d014610a86578063e63ab1e914610a99578063e7705db614610abb578063e985e9c514610add578063eda3b77b14610b26578063edc0b2e614610b46578063f23a6e6114610b68578063f242432a14610b94578063f515e6f214610bb4578063f72c0d8b14610bd6575b600080fd5b3480156102e357600080fd5b506102f76102f2366004614316565b610bf8565b6040519081526020015b60405180910390f35b34801561031657600080fd5b5061032a61032536600461441a565b610c90565b005b34801561033857600080fd5b5061034c6103473660046144e1565b610ec3565b6040519015158152602001610301565b34801561036857600080fd5b5061032a6103773660046144fe565b610ed4565b34801561038857600080fd5b5061039c610397366004614532565b610ef9565b60405161030191906145a3565b3480156103b557600080fd5b5061032a6103c43660046145b6565b610f8d565b3480156103d557600080fd5b5061032a6103e436600461466f565b6110c6565b3480156103f557600080fd5b506102f7610404366004614532565b611339565b34801561041557600080fd5b506102f7610424366004614721565b61134e565b34801561043557600080fd5b506102f77f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b34801561046957600080fd5b506102f7600080516020615a0d83398151915281565b34801561048b57600080fd5b5061032a61049a366004614885565b6113da565b3480156104ab57600080fd5b5061032a6104ba366004614914565b611426565b3480156104cb57600080fd5b506102f76104da366004614532565b6101fe6020526000908152604090205481565b3480156104f957600080fd5b5061032a610508366004614914565b611447565b34801561051957600080fd5b5061032a610528366004614940565b6114c1565b34801561053957600080fd5b5061032a611589565b34801561054e57600080fd5b506102f76101f85481565b34801561056557600080fd5b5061032a61057436600461495b565b6115a9565b34801561058557600080fd5b506105996105943660046149c9565b611775565b6040516103019190614ace565b61032a6105b4366004614ae1565b61189e565b3480156105c557600080fd5b5061034c6105d4366004614532565b600090815260fb6020526040902054151590565b3480156105f457600080fd5b506102f7611953565b34801561060957600080fd5b506102f76106183660046144fe565b80516020818301810180516101ff8252928201919093012091525481565b34801561064257600080fd5b5060c95460ff1661034c565b34801561065a57600080fd5b506102f7600080516020615a2d83398151915281565b34801561067c57600080fd5b506101f95461068b9060ff1681565b60405160ff9091168152602001610301565b3480156106a957600080fd5b506102f76101f75481565b3480156106c057600080fd5b506106d46106cf366004614532565b611a02565b60405161030196959493929190614b31565b3480156106f257600080fd5b5061034c610701366004614532565b611bdc565b34801561071257600080fd5b50610726610721366004614532565b611c03565b604051610301959493929190614b84565b34801561074357600080fd5b5061039c611cba565b34801561075857600080fd5b5061032a610767366004614bbb565b611d49565b34801561077857600080fd5b506102f760008051602061596683398151915281565b34801561079a57600080fd5b5061032a611dff565b3480156107af57600080fd5b506107b8611e1f565b6040516103019796959493929190614cd7565b3480156107d757600080fd5b506102f76107e6366004614532565b6101fd6020526000908152604090205481565b34801561080557600080fd5b5061034c610814366004614914565b611ebf565b34801561082557600080fd5b5061039c611eea565b34801561083a57600080fd5b506040805180820190915260068152650302e302e31360d41b602082015261039c565b34801561086957600080fd5b5061039c611ef8565b34801561087e57600080fd5b5061032a61088d366004614d47565b611f06565b34801561089e57600080fd5b5061032a6108ad366004614d88565b6120a5565b3480156108be57600080fd5b506102f7600081565b3480156108d357600080fd5b5061032a6108e2366004614dfa565b6121c2565b3480156108f357600080fd5b506102f760008051602061594683398151915281565b34801561091557600080fd5b506101fb5461092a906001600160a01b031681565b6040516103019190614e36565b34801561094357600080fd5b506102f7610952366004614e4a565b6121cd565b34801561096357600080fd5b50610983610972366004614885565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610301565b3480156109a857600080fd5b506102f76109b7366004614532565b600090815260fb602052604090205490565b3480156109d557600080fd5b506102f77f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610a0957600080fd5b5061032a610a18366004614914565b6123dc565b348015610a2957600080fd5b50610a51610a38366004614940565b6101c56020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610301565b348015610a7257600080fd5b5061032a610a81366004614f29565b6123f8565b61032a610a94366004614f88565b612487565b348015610aa557600080fd5b506102f76000805160206159a683398151915281565b348015610ac757600080fd5b506102f7600080516020615a4d83398151915281565b348015610ae957600080fd5b5061034c610af8366004615009565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b348015610b3257600080fd5b5061032a610b41366004615033565b6125c5565b348015610b5257600080fd5b506102f76000805160206158a683398151915281565b348015610b7457600080fd5b50610983610b83366004615066565b63f23a6e6160e01b95945050505050565b348015610ba057600080fd5b5061032a610baf366004615066565b6125ee565b348015610bc057600080fd5b506102f76000805160206159ed83398151915281565b348015610be257600080fd5b506102f760008051602061590683398151915281565b60006001600160a01b038316610c685760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b600054610100900460ff1615808015610cb05750600054600160ff909116105b80610cd15750610cbf30612633565b158015610cd1575060005460ff166001145b610ced5760405162461bcd60e51b8152600401610c5f906150ca565b6000805460ff191660011790558015610d10576000805461ff0019166101001790555b610d2860405180602001604052806000815250612642565b610d30612672565b610d3861269b565b610d40612672565b610d48612672565b610d966040518060400160405280600f81526020016e436172626f6e20526567697374727960881b81525060405180604001604052806005815260200164302e302e3160d81b8152506126ca565b610da387868685876120a5565b610dae6000876126fb565b610dc6600080516020615966833981519152876126fb565b610dde6000805160206159a6833981519152876126fb565b610df66000805160206158a6833981519152876126fb565b610e0e600080516020615a2d833981519152876126fb565b610e26600080516020615906833981519152876126fb565b610e3e6000805160206159ed833981519152876126fb565b610e56600080516020615a4d833981519152876126fb565b610e6e600080516020615a0d833981519152876126fb565b610e86600080516020615a2d833981519152336126fb565b8015610eba576000805461ff0019169055604051600181526000805160206159868339815191529060200160405180910390a15b50505050505050565b6000610ece82612781565b92915050565b600080516020615966833981519152610eec816127a6565b610ef5826127b0565b5050565b606060678054610f0890615118565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3490615118565b8015610f815780601f10610f5657610100808354040283529160200191610f81565b820191906000526020600020905b815481529060010190602001808311610f6457829003601f168201915b50505050509050919050565b6000805160206158a6833981519152610fa5816127a6565b83610faf81611bdc565b610fcb5760405162461bcd60e51b8152600401610c5f9061514c565b60008581526101fc602052604081206003810154600490910154879111604051806040016040528060018152602001603360f81b815250906110205760405162461bcd60e51b8152600401610c5f91906145a3565b5060008781526101fe60205260408120549081900361106a57506101f780546001019081905560008881526101fe602090815260408083208490558383526101fd90915290208890555b886001600160a01b031688827f1fe9ade752d24e4f4dca10f5c807a7cc8630c7604280c8b124097d93b5bb02a18a6040516110a791815260200190565b60405180910390a46110bb898289896127c3565b505050505050505050565b8484846000805160206158e68339815191528383836040516110ea93929190615190565b60405180910390a1600061120160008051602061588683398151915283356111156020860186615268565b6040516020016111269291906152ae565b6040516020818303038152906040528051906020012085604001602081019061114f9190614940565b61115f6080880160608901614940565b608088013560a08901356101c5600061117e60608d0160408e01614940565b6001600160a01b03908116825260208083019390935260409182016000205482519384019a909a529082019790975260608101959095529285166080850152931660a083015260c082019290925260e081019190915263ffffffff90911661010082015261012001604051602081830303815290604052805190602001206128cd565b90506112558185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124e925050506060860160408701614940565b85356128fa565b506101c5600061126b6060850160408601614940565b6001600160a01b0316815260208101919091526040016000908120805463ffffffff1691611298836152d4565b91906101000a81548163ffffffff021916908363ffffffff1602179055505086608001358760400160208101906112cf9190614940565b6001600160a01b03167f782105afe5542acae5ab54dc3dab8b54887fd38a79f55330b3e1e70c3063d67b8960a00135898960405161130f939291906152f7565b60405180910390a36110bb61132a6060890160408a01614940565b88608001358960a001356129bc565b60009081526097602052604090206001015490565b60008761135a81611bdc565b6113765760405162461bcd60e51b8152600401610c5f9061514c565b6001600160a01b038716330361139c57611395338a8a89898989612b3e565b91506113ce565b6001600160a01b0387166113af57600080fd5b6113bc33888b8b87612bac565b6113cb878a8a89898989612b3e565b91505b50979650505050505050565b6001600160a01b0385163314806113f657506113f68533610af8565b6114125760405162461bcd60e51b8152600401610c5f90615322565b61141f8585858585612ccb565b5050505050565b61142f82611339565b611438816127a6565b61144283836126fb565b505050565b6001600160a01b03811633146114b75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c5f565b610ef58282612eb1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115095760405162461bcd60e51b8152600401610c5f90615370565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661153b612f18565b6001600160a01b0316146115615760405162461bcd60e51b8152600401610c5f906153aa565b61156a81612f34565b6040805160008082526020820190925261158691839190612f4c565b50565b6000805160206159a68339815191526115a1816127a6565b6115866130b7565b600080516020615a4d8339815191526115c1816127a6565b866115cb81611bdc565b6115e75760405162461bcd60e51b8152600401610c5f9061514c565b60008881526101fc6020526040812060038101546004909101548a9111604051806040016040528060018152602001603360f81b8152509061163c5760405162461bcd60e51b8152600401610c5f91906145a3565b50878910156116715760405162461bcd60e51b81526020600482015260016024820152601b60f91b6044820152606401610c5f565b60008a81526101fe6020526040812054908190036116bb5788156116bb5760405162461bcd60e51b81526020600482015260016024820152603960f81b6044820152606401610c5f565b8a7fe19de0f3da1193000100a217838f49f6bdda20dc974d33b61f92faaf446d181d8b8b8b8b8b6040516116f39594939291906153e4565b60405180910390a260006117078a8c61540f565b1115611731576117318c8c61171c8c8e61540f565b604051806020016040528060008152506127c3565b60008b81526101fc60205260409020600401879055881561176757611767308c8b604051806020016040528060008152506127c3565b505050505050505050505050565b606081518351146117da5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610c5f565b600083516001600160401b038111156117f5576117f5614340565b60405190808252806020026020018201604052801561181e578160200160208202803683370190505b50905060005b84518110156118965761186985828151811061184257611842615426565b602002602001015185838151811061185c5761185c615426565b6020026020010151610bf8565b82828151811061187b5761187b615426565b602090810291909101015261188f8161543c565b9050611824565b509392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036118e65760405162461bcd60e51b8152600401610c5f90615370565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611918612f18565b6001600160a01b03161461193e5760405162461bcd60e51b8152600401610c5f906153aa565b61194782612f34565b610ef582826001612f4c565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119ee5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610c5f565b506000805160206159268339815191525b90565b6102006020526000908152604090208054600182015460028301546003840180546001600160a01b03909416949293919291611a3d90615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6990615118565b8015611ab65780601f10611a8b57610100808354040283529160200191611ab6565b820191906000526020600020905b815481529060010190602001808311611a9957829003601f168201915b505050505090806004018054611acb90615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611af790615118565b8015611b445780601f10611b1957610100808354040283529160200191611b44565b820191906000526020600020905b815481529060010190602001808311611b2757829003601f168201915b505050505090806005018054611b5990615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8590615118565b8015611bd25780601f10611ba757610100808354040283529160200191611bd2565b820191906000526020600020905b815481529060010190602001808311611bb557829003601f168201915b5050505050905086565b60008181526101fc602052604081208054829190611bf990615118565b9050119050919050565b6101fc60205260009081526040902080548190611c1f90615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4b90615118565b8015611c985780601f10611c6d57610100808354040283529160200191611c98565b820191906000526020600020905b815481529060010190602001808311611c7b57829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b6102018054611cc890615118565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf490615118565b8015611d415780601f10611d1657610100808354040283529160200191611d41565b820191906000526020600020905b815481529060010190602001808311611d2457829003601f168201915b505050505081565b600080516020615a2d833981519152611d61816127a6565b60005b825181101561144257611ded838281518110611d8257611d82615426565b602002602001015160200151848381518110611da057611da0615426565b602002602001015160400151858481518110611dbe57611dbe615426565b602002602001015160600151868581518110611ddc57611ddc615426565b602002602001015160000151611f06565b80611df78161543c565b915050611d64565b6000805160206159a6833981519152611e17816127a6565b611586613103565b600060608060008060006060610191546000801b148015611e41575061019254155b611e855760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610c5f565b611e8d613140565b611e956131d3565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101fa8054611cc890615118565b6102028054611cc890615118565b600080516020615a2d833981519152611f1e816127a6565b838311611f515760405162461bcd60e51b81526020600482015260016024820152600d60fa1b6044820152606401610c5f565b6000611f656101f780546001019081905590565b6101fb546040516344d9d59b60e01b81529192506001600160a01b0316906344d9d59b90611f979086906004016145a3565b600060405180830381600087803b158015611fb157600080fd5b505af1158015611fc5573d6000803e3d6000fd5b50505050806101ff84604051611fdb9190615455565b90815260408051602092819003830181209390935560a083018152858352818301899052828101889052606083018790526000608084018190528481526101fc8352208251805191926120339284929091019061426a565b5060208201518160010155604082015181600201556060820151816003015560808201518160040155905050807fc5fb6d85b5baef0a615415607787aea341771027b7e4da34da58eaeb661154ea878787876040516120959493929190615471565b60405180910390a2505050505050565b600054610100900460ff16158080156120c55750600054600160ff909116105b806120e657506120d430612633565b1580156120e6575060005460ff166001145b6121025760405162461bcd60e51b8152600401610c5f906150ca565b6000805460ff191660011790558015612125576000805461ff0019166101001790555b6101fb80546001600160a01b0319166001600160a01b0388161790558351612155906101fa90602087019061426a565b506101f885905582516121709061020190602086019061426a565b5081516121859061020290602085019061426a565b5080156121ba576000805461ff0019169055604051600181526000805160206159868339815191529060200160405180910390a15b505050505050565b610ef53383836131e3565b600085608001356121dd81611bdc565b6121f95760405162461bcd60e51b8152600401610c5f9061514c565b8888886000805160206158e683398151915283838360405161221d93929190615190565b60405180910390a1600061224860008051602061588683398151915283356111156020860186615268565b90506122958185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124e925050506060860160408701614940565b506101c560006122ab6060850160408601614940565b6001600160a01b0316815260208101919091526040016000908120805463ffffffff16916122d8836152d4565b91906101000a81548163ffffffff021916908363ffffffff160217905550508a606001602081019061230a9190614940565b6001600160a01b031661232360608d0160408e01614940565b6001600160a01b03160361235e5761235761234460608d0160408e01614940565b8c608001358d60a001358d8d8d8d612b3e565b95506123cc565b600061237060808d0160608e01614940565b6001600160a01b03160361238357600080fd5b6123b661239660608d0160408e01614940565b6123a660808e0160608f01614940565b8d608001358e60a001358b612bac565b6123c961234460808d0160608e01614940565b95505b5050505050979650505050505050565b6123e582611339565b6123ee816127a6565b6114428383612eb1565b600080516020615a0d833981519152612410816127a6565b81600481111561242257612422615496565b604080516001600160a01b038881168252602082018790528792908a16917fa8b90aeef4d9590cac2ff486fc2b5d9749ed41f9388a7eb159eef94cf5fb65ab910160405180910390a46121ba8686868660405180602001604052806000815250612bac565b8383836000805160206158e68339815191528383836040516124ab93929190615190565b60405180910390a160006124d660008051602061588683398151915283356111156020860186615268565b90506125238185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124e925050506060860160408701614940565b506101c560006125396060850160408601614940565b6001600160a01b0316815260208101919091526040016000908120805463ffffffff1691612566836152d4565b91906101000a81548163ffffffff021916908363ffffffff160217905550506125bb86604001602081019061259b9190614940565b6125ab6080890160608a01614940565b88608001358960a0013589612bac565b5050505050505050565b600080516020615a0d8339815191526125dd816127a6565b6125e88484846129bc565b50505050565b6001600160a01b03851633148061260a575061260a8533610af8565b6126265760405162461bcd60e51b8152600401610c5f90615322565b61141f8585858585612bac565b6001600160a01b03163b151590565b600054610100900460ff166126695760405162461bcd60e51b8152600401610c5f906154ac565b611586816132c3565b600054610100900460ff166126995760405162461bcd60e51b8152600401610c5f906154ac565b565b600054610100900460ff166126c25760405162461bcd60e51b8152600401610c5f906154ac565b6126996132f3565b600054610100900460ff166126f15760405162461bcd60e51b8152600401610c5f906154ac565b610ef58282613326565b6127058282611ebf565b610ef55760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561273d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006001600160e01b03198216630271189760e51b1480610ece5750610ece82613357565b611586813361337c565b8051610ef590606790602084019061426a565b6001600160a01b0384166128235760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610c5f565b33600061282f856133d5565b9050600061283c856133d5565b905061284d83600089858589613420565b60008681526065602090815260408083206001600160a01b038b1684529091528120805487929061287f9084906154f7565b909155505060408051878152602081018790526001600160a01b03808a169260009291871691600080516020615866833981519152910160405180910390a4610eba83600089898989613549565b6000610ece6128da6136ab565b8360405161190160f01b8152600281019290925260228201526042902090565b600061290685856136ba565b9050826001600160a01b0316816001600160a01b031614801561293157506001600160a01b03811615155b6129715760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610c5f565b8142106129b45760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610c5f565b949350505050565b6001600160a01b038316612a1e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610c5f565b336000612a2a846133d5565b90506000612a37846133d5565b9050612a5783876000858560405180602001604052806000815250613420565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015612ad65760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610c5f565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a9052909290881691600080516020615866833981519152910160405180910390a4604080516020810190915260009052610eba565b6000612b4b8888886129bc565b612b598888888888886136d6565b905086886001600160a01b03167f1325d882b2ca749c878a4ab3a393f6e51b69026faa05426b6d1ec6776a3f2f3c888486604051612b999392919061550f565b60405180910390a3979650505050505050565b6001600160a01b038416612bd25760405162461bcd60e51b8152600401610c5f90615537565b336000612bde856133d5565b90506000612beb856133d5565b9050612bfb838989858589613420565b60008681526065602090815260408083206001600160a01b038c16845290915290205485811015612c3e5760405162461bcd60e51b8152600401610c5f9061557c565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612c7d9084906154f7565b909155505060408051888152602081018890526001600160a01b03808b16928c82169291881691600080516020615866833981519152910160405180910390a46110bb848a8a8a8a8a613549565b8151835114612d2d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c5f565b6001600160a01b038416612d535760405162461bcd60e51b8152600401610c5f90615537565b33612d62818787878787613420565b60005b8451811015612e4b576000858281518110612d8257612d82615426565b602002602001015190506000858381518110612da057612da0615426565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015612df15760405162461bcd60e51b8152600401610c5f9061557c565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612e309084906154f7565b9250508190555050505080612e449061543c565b9050612d65565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612e9b9291906155c6565b60405180910390a46121ba8187878787876137d5565b612ebb8282611ebf565b15610ef55760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020615926833981519152546001600160a01b031690565b600080516020615906833981519152610ef5816127a6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612f7f5761144283613897565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612fd9575060408051601f3d908101601f19168201909252612fd6918101906155eb565b60015b61303c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610c5f565b60008051602061592683398151915281146130ab5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610c5f565b50611442838383613931565b6130bf613956565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516130f99190614e36565b60405180910390a1565b61310b61399f565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130ec3390565b6060610193805461315090615118565b80601f016020809104026020016040519081016040528092919081815260200182805461317c90615118565b80156131c95780601f1061319e576101008083540402835291602001916131c9565b820191906000526020600020905b8154815290600101906020018083116131ac57829003601f168201915b5050505050905090565b6060610194805461315090615118565b816001600160a01b0316836001600160a01b0316036132565760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610c5f565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff166132ea5760405162461bcd60e51b8152600401610c5f906154ac565b611586816127b0565b600054610100900460ff1661331a5760405162461bcd60e51b8152600401610c5f906154ac565b60c9805460ff19169055565b600054610100900460ff1661334d5760405162461bcd60e51b8152600401610c5f906154ac565b610ef582826139e5565b60006001600160e01b03198216637965db0b60e01b1480610ece5750610ece82613a46565b6133868282611ebf565b610ef55761339381613a96565b61339e836020613aa8565b6040516020016133af929190615604565b60408051601f198184030181529082905262461bcd60e51b8252610c5f916004016145a3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061340f5761340f615426565b602090810291909101015292915050565b61342861399f565b8461344160008051602061594683398151915282611ebf565b1561345e5760405162461bcd60e51b8152600401610c5f90615673565b8461347760008051602061594683398151915282611ebf565b156134945760405162461bcd60e51b8152600401610c5f90615673565b60005b855181101561353a5761020060008783815181106134b7576134b7615426565b6020026020010151815260200190815260200160002060010154600014806134f757506001600160a01b03881615806134f757506001600160a01b038716155b6135285760405162461bcd60e51b8152602060048201526002602482015261313160f01b6044820152606401610c5f565b806135328161543c565b915050613497565b506125bb888888888888613c4a565b61355b846001600160a01b0316612633565b156121ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613594908990899088908890889060040161568e565b6020604051808303816000875af19250505080156135cf575060408051601f3d908101601f191682019092526135cc918101906156c8565b60015b61367b576135db6156e5565b806308c379a00361361457506135ef615700565b806135fa5750613616565b8060405162461bcd60e51b8152600401610c5f91906145a3565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610c5f565b6001600160e01b0319811663f23a6e6160e01b14610eba5760405162461bcd60e51b8152600401610c5f90615789565b60006136b5613dc3565b905090565b60008060006136c98585613e37565b9150915061189681613e7c565b6000806136eb6101f780546001019081905590565b6040805160c0810182526001600160a01b038b8116825260208083018b81528385018d8152606085018c8152608086018c905260a086018b90526000888152610200855296909620855181546001600160a01b031916951694909417845590516001840155516002830155925180519495509193909261377292600385019291019061426a565b506080820151805161378e91600484019160209091019061426a565b5060a082015180516137aa91600584019160209091019061426a565b509050506137ca88826001604051806020016040528060008152506127c3565b979650505050505050565b6137e7846001600160a01b0316612633565b156121ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061382090899089908890889088906004016157d1565b6020604051808303816000875af192505050801561385b575060408051601f3d908101601f19168201909252613858918101906156c8565b60015b613867576135db6156e5565b6001600160e01b0319811663bc197c8160e01b14610eba5760405162461bcd60e51b8152600401610c5f90615789565b6138a081612633565b6139025760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c5f565b60008051602061592683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61393a83613fc1565b6000825111806139475750805b15611442576125e88383614001565b60c95460ff166126995760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c5f565b60c95460ff16156126995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c5f565b600054610100900460ff16613a0c5760405162461bcd60e51b8152600401610c5f906154ac565b8151613a209061019390602085019061426a565b508051613a359061019490602084019061426a565b505060006101918190556101925550565b60006001600160e01b03198216636cdb3d1360e11b1480613a7757506001600160e01b031982166303a24d0760e21b145b80610ece57506301ffc9a760e01b6001600160e01b0319831614610ece565b6060610ece6001600160a01b03831660145b60606000613ab783600261582f565b613ac29060026154f7565b6001600160401b03811115613ad957613ad9614340565b6040519080825280601f01601f191660200182016040528015613b03576020820181803683370190505b509050600360fc1b81600081518110613b1e57613b1e615426565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b4d57613b4d615426565b60200101906001600160f81b031916908160001a9053506000613b7184600261582f565b613b7c9060016154f7565b90505b6001811115613bf4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613bb057613bb0615426565b1a60f81b828281518110613bc657613bc6615426565b60200101906001600160f81b031916908160001a90535060049490941c93613bed8161584e565b9050613b7f565b508315613c435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c5f565b9392505050565b6001600160a01b038516613cd15760005b8351811015613ccf57828181518110613c7657613c76615426565b602002602001015160fb6000868481518110613c9457613c94615426565b602002602001015181526020019081526020016000206000828254613cb991906154f7565b90915550613cc890508161543c565b9050613c5b565b505b6001600160a01b0384166121ba5760005b8351811015610eba576000848281518110613cff57613cff615426565b602002602001015190506000848381518110613d1d57613d1d615426565b60200260200101519050600060fb600084815260200190815260200160002054905081811015613da05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610c5f565b600092835260fb602052604090922091039055613dbc8161543c565b9050613ce2565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613dee614026565b613df6614084565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000808251604103613e6d5760208301516040840151606085015160001a613e61878285856140b6565b94509450505050613e75565b506000905060025b9250929050565b6000816004811115613e9057613e90615496565b03613e985750565b6001816004811115613eac57613eac615496565b03613ef45760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610c5f565b6002816004811115613f0857613f08615496565b03613f555760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c5f565b6003816004811115613f6957613f69615496565b036115865760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c5f565b613fca81613897565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060613c4383836040518060600160405280602781526020016159c660279139614170565b600080614031613140565b805190915015614048578051602090910120919050565b6101915480156140585792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5090565b60008061408f6131d3565b8051909150156140a6578051602090910120919050565b6101925480156140585792915050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156140e35750600090506003614167565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614137573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661416057600060019250925050614167565b9150600090505b94509492505050565b6060600080856001600160a01b03168560405161418d9190615455565b600060405180830381855af49150503d80600081146141c8576040519150601f19603f3d011682016040523d82523d6000602084013e6141cd565b606091505b50915091506141de868383876141e8565b9695505050505050565b6060831561425557825160000361424e5761420285612633565b61424e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c5f565b50816129b4565b6129b483838151156135fa5781518083602001fd5b82805461427690615118565b90600052602060002090601f01602090048101928261429857600085556142de565b82601f106142b157805160ff19168380011785556142de565b828001600101855582156142de579182015b828111156142de5782518255916020019190600101906142c3565b506140809291505b8082111561408057600081556001016142e6565b80356001600160a01b038116811461431157600080fd5b919050565b6000806040838503121561432957600080fd5b614332836142fa565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60a081016001600160401b038111828210171561437557614375614340565b60405250565b601f8201601f191681016001600160401b03811182821017156143a0576143a0614340565b6040525050565b600082601f8301126143b857600080fd5b81356001600160401b038111156143d1576143d1614340565b6040516143e8601f8301601f19166020018261437b565b8181528460208386010111156143fd57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561443357600080fd5b61443c876142fa565b955061444a602088016142fa565b94506040870135935060608701356001600160401b038082111561446d57600080fd5b6144798a838b016143a7565b9450608089013591508082111561448f57600080fd5b61449b8a838b016143a7565b935060a08901359150808211156144b157600080fd5b506144be89828a016143a7565b9150509295509295509295565b6001600160e01b03198116811461158657600080fd5b6000602082840312156144f357600080fd5b8135613c43816144cb565b60006020828403121561451057600080fd5b81356001600160401b0381111561452657600080fd5b6129b4848285016143a7565b60006020828403121561454457600080fd5b5035919050565b60005b8381101561456657818101518382015260200161454e565b838111156125e85750506000910152565b6000815180845261458f81602086016020860161454b565b601f01601f19169290920160200192915050565b602081526000613c436020830184614577565b600080600080608085870312156145cc57600080fd5b6145d5856142fa565b9350602085013592506040850135915060608501356001600160401b038111156145fe57600080fd5b61460a878288016143a7565b91505092959194509250565b60008083601f84011261462857600080fd5b5081356001600160401b0381111561463f57600080fd5b602083019150836020828501011115613e7557600080fd5b600060e0828403121561466957600080fd5b50919050565b60008060008060006080868803121561468757600080fd5b85356001600160401b038082111561469e57600080fd5b6146aa89838a01614616565b909750955060208801359150808211156146c357600080fd5b6146cf89838a01614657565b945060408801359150808211156146e557600080fd5b6146f189838a016143a7565b9350606088013591508082111561470757600080fd5b50614714888289016143a7565b9150509295509295909350565b600080600080600080600060e0888a03121561473c57600080fd5b8735965060208801359550614753604089016142fa565b945060608801356001600160401b038082111561476f57600080fd5b61477b8b838c016143a7565b955060808a013591508082111561479157600080fd5b61479d8b838c016143a7565b945060a08a01359150808211156147b357600080fd5b6147bf8b838c016143a7565b935060c08a01359150808211156147d557600080fd5b506147e28a828b016143a7565b91505092959891949750929550565b60006001600160401b0382111561480a5761480a614340565b5060051b60200190565b600082601f83011261482557600080fd5b81356020614832826147f1565b60405161483f828261437b565b83815260059390931b850182019282810191508684111561485f57600080fd5b8286015b8481101561487a5780358352918301918301614863565b509695505050505050565b600080600080600060a0868803121561489d57600080fd5b6148a6866142fa565b94506148b4602087016142fa565b935060408601356001600160401b03808211156148d057600080fd5b6148dc89838a01614814565b945060608801359150808211156148f257600080fd5b6148fe89838a01614814565b9350608088013591508082111561470757600080fd5b6000806040838503121561492757600080fd5b82359150614937602084016142fa565b90509250929050565b60006020828403121561495257600080fd5b613c43826142fa565b600080600080600080600060e0888a03121561497657600080fd5b61497f886142fa565b96506020880135955060408801359450606088013593506080880135925060a0880135915060c08801356001600160401b038111156149bd57600080fd5b6147e28a828b016143a7565b600080604083850312156149dc57600080fd5b82356001600160401b03808211156149f357600080fd5b818501915085601f830112614a0757600080fd5b81356020614a14826147f1565b604051614a21828261437b565b83815260059390931b8501820192828101915089841115614a4157600080fd5b948201945b83861015614a6657614a57866142fa565b82529482019490820190614a46565b96505086013592505080821115614a7c57600080fd5b50614a8985828601614814565b9150509250929050565b600081518084526020808501945080840160005b83811015614ac357815187529582019590820190600101614aa7565b509495945050505050565b602081526000613c436020830184614a93565b60008060408385031215614af457600080fd5b614afd836142fa565b915060208301356001600160401b03811115614b1857600080fd5b614a89858286016143a7565b6001600160a01b03169052565b60018060a01b038716815285602082015284604082015260c060608201526000614b5e60c0830186614577565b8281036080840152614b708186614577565b905082810360a08401526113cb8185614577565b60a081526000614b9760a0830188614577565b90508560208301528460408301528360608301528260808301529695505050505050565b60006020808385031215614bce57600080fd5b82356001600160401b0380821115614be557600080fd5b818501915085601f830112614bf957600080fd5b8135614c04816147f1565b60408051614c12838261437b565b83815260059390931b8501860192868101925089841115614c3257600080fd5b8686015b84811015614cc957803586811115614c4e5760008081fd5b870160a0818d03601f1901811315614c665760008081fd5b8451614c7181614356565b8a83013589811115614c835760008081fd5b614c918f8d838701016143a7565b825250828601358b82015260608084013587830152608080850135918301919091529190920135908201528452928701928701614c36565b509998505050505050505050565b60ff60f81b8816815260e060208201526000614cf660e0830189614577565b8281036040840152614d088189614577565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050614d398185614a93565b9a9950505050505050505050565b60008060008060808587031215614d5d57600080fd5b84359350602085013592506040850135915060608501356001600160401b038111156145fe57600080fd5b600080600080600060a08688031215614da057600080fd5b614da9866142fa565b94506020860135935060408601356001600160401b0380821115614dcc57600080fd5b614dd889838a016143a7565b94506060880135915080821115614dee57600080fd5b6148fe89838a016143a7565b60008060408385031215614e0d57600080fd5b614e16836142fa565b915060208301358015158114614e2b57600080fd5b809150509250929050565b6001600160a01b0391909116815260200190565b600080600080600080600060c0888a031215614e6557600080fd5b87356001600160401b0380821115614e7c57600080fd5b614e888b838c01614616565b909950975060208a0135915080821115614ea157600080fd5b614ead8b838c01614657565b965060408a0135915080821115614ec357600080fd5b614ecf8b838c016143a7565b955060608a0135915080821115614ee557600080fd5b614ef18b838c016143a7565b945060808a0135915080821115614f0757600080fd5b614f138b838c016143a7565b935060a08a01359150808211156147d557600080fd5b600080600080600060a08688031215614f4157600080fd5b614f4a866142fa565b9450614f58602087016142fa565b93506040860135925060608601359150608086013560058110614f7a57600080fd5b809150509295509295909350565b60008060008060608587031215614f9e57600080fd5b84356001600160401b0380821115614fb557600080fd5b614fc188838901614616565b90965094506020870135915080821115614fda57600080fd5b614fe688838901614657565b93506040870135915080821115614ffc57600080fd5b5061460a878288016143a7565b6000806040838503121561501c57600080fd5b615025836142fa565b9150614937602084016142fa565b60008060006060848603121561504857600080fd5b615051846142fa565b95602085013595506040909401359392505050565b600080600080600060a0868803121561507e57600080fd5b615087866142fa565b9450615095602087016142fa565b9350604086013592506060860135915060808601356001600160401b038111156150be57600080fd5b614714888289016143a7565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c9082168061512c57607f821691505b60208210810361466957634e487b7160e01b600052602260045260246000fd5b6020808252600190820152603160f81b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006151a4604083018587615167565b8281036020840152833581526020840135601e198536030181126151c757600080fd5b840180356001600160401b038111156151df57600080fd5b8036038613156151ee57600080fd5b60e0602084015261520660e084018260208501615167565b915050615215604086016142fa565b6152226040840182614b24565b5061522f606086016142fa565b61523c6060840182614b24565b506080850135608083015260a085013560a083015260c085013560c08301528092505050949350505050565b6000808335601e1984360301811261527f57600080fd5b8301803591506001600160401b0382111561529957600080fd5b602001915036819003821315613e7557600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036152ed576152ed6152be565b6001019392505050565b8381526060602082015260006153106060830185614577565b82810360408401526141de8185614577565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201526000805160206158c683398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201526000805160206158c683398151915260408201526b6163746976652070726f787960a01b606082015260800190565b85815284602082015283604082015282606082015260a0608082015260006137ca60a0830184614577565b600082821015615421576154216152be565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001820161544e5761544e6152be565b5060010190565b6000825161546781846020870161454b565b9190910192915050565b8481528360208201528260408201526080606082015260006141de6080830184614577565b634e487b7160e01b600052602160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111561550a5761550a6152be565b500190565b83815282602082015260606040820152600061552e6060830184614577565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006155d96040830185614a93565b828103602084015261552e8185614a93565b6000602082840312156155fd57600080fd5b5051919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161563681601785016020880161454b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161566781602884016020880161454b565b01602801949350505050565b6020808252600190820152600360fc1b604082015260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137ca90830184614577565b6000602082840312156156da57600080fd5b8151613c43816144cb565b600060033d11156119ff5760046000803e5060005160e01c90565b600060443d101561570e5790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561573d57505050505090565b82850191508151818111156157555750505050505090565b843d870101602082850101111561576f5750505050505090565b61577e6020828601018761437b565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906157fd90830186614a93565b828103606084015261580f8186614a93565b905082810360808401526158238185614577565b98975050505050505050565b6000816000190483118215151615615849576158496152be565b500290565b60008161585d5761585d6152be565b50600019019056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6279da588818fa1bb747c46ac45fd0af16861a77c5222cf5ac4538360ca4f77a2cd5bbb2f0fbfc1d5938ca13cabd3156d362f7862fa87504c8d589f5e8f2cbc45346756e6374696f6e206d7573742062652063616c6c6564207468726f75676820bdde33eca765abe07e416fa5225f9a5dbc393366c8bbf45df689e69ee318a934189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcf48dee1a72497b9e734e498e1b3086c0d2dbcca13f16f15848f974469f906bbf7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656498db8a220cd0f09badce9f22d0ba7e93edb3d404448cc3560d391ab096ad16e94bbc247fc4736523c8bdd1853fee2acfa817d663f8f4422b13e78ebf99e204a2ddf79b8d2110dbe281cf3bb7762d508cea586c974794c8fc949d41b0db1145130ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09a2646970667358221220b982eeeeaca38fbe16293f4f57a201889e774fe9dc50e5ca1830adffc0a7d8f664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "  Balances are counted in 10^-18 TCO2e",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/Project.sol:Project",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 810,
        "contract": "contracts/Project.sol:Project",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3343,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4378,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1264,
        "contract": "contracts/Project.sol:Project",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1270,
        "contract": "contracts/Project.sol:Project",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1272,
        "contract": "contracts/Project.sol:Project",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 2479,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 28,
        "contract": "contracts/Project.sol:Project",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1128,
        "contract": "contracts/Project.sol:Project",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 1233,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2657,
        "contract": "contracts/Project.sol:Project",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2820,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 789,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1105,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4068,
        "contract": "contracts/Project.sol:Project",
        "label": "_hashedName",
        "offset": 0,
        "slot": "401",
        "type": "t_bytes32"
      },
      {
        "astId": 4071,
        "contract": "contracts/Project.sol:Project",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "402",
        "type": "t_bytes32"
      },
      {
        "astId": 4073,
        "contract": "contracts/Project.sol:Project",
        "label": "_name",
        "offset": 0,
        "slot": "403",
        "type": "t_string_storage"
      },
      {
        "astId": 4075,
        "contract": "contracts/Project.sol:Project",
        "label": "_version",
        "offset": 0,
        "slot": "404",
        "type": "t_string_storage"
      },
      {
        "astId": 4333,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "405",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6869,
        "contract": "contracts/Project.sol:Project",
        "label": "signatureNonces",
        "offset": 0,
        "slot": "453",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 7002,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "454",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6530,
        "contract": "contracts/Project.sol:Project",
        "label": "topTokenId",
        "offset": 0,
        "slot": "503",
        "type": "t_uint256"
      },
      {
        "astId": 6532,
        "contract": "contracts/Project.sol:Project",
        "label": "projectId",
        "offset": 0,
        "slot": "504",
        "type": "t_uint256"
      },
      {
        "astId": 6534,
        "contract": "contracts/Project.sol:Project",
        "label": "maxAntePercentage",
        "offset": 0,
        "slot": "505",
        "type": "t_uint8"
      },
      {
        "astId": 6536,
        "contract": "contracts/Project.sol:Project",
        "label": "projectName",
        "offset": 0,
        "slot": "506",
        "type": "t_string_storage"
      },
      {
        "astId": 6538,
        "contract": "contracts/Project.sol:Project",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "507",
        "type": "t_address"
      },
      {
        "astId": 6543,
        "contract": "contracts/Project.sol:Project",
        "label": "exPostVintageMapping",
        "offset": 0,
        "slot": "508",
        "type": "t_mapping(t_uint256,t_struct(VintageData)6811_storage)"
      },
      {
        "astId": 6547,
        "contract": "contracts/Project.sol:Project",
        "label": "exAnteToExPostTokenId",
        "offset": 0,
        "slot": "509",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6551,
        "contract": "contracts/Project.sol:Project",
        "label": "exPostToExAnteTokenId",
        "offset": 0,
        "slot": "510",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6555,
        "contract": "contracts/Project.sol:Project",
        "label": "serializationToExPostTokenIdMapping",
        "offset": 0,
        "slot": "511",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 6560,
        "contract": "contracts/Project.sol:Project",
        "label": "retirementMapping",
        "offset": 0,
        "slot": "512",
        "type": "t_mapping(t_uint256,t_struct(RetirementData)6824_storage)"
      },
      {
        "astId": 6563,
        "contract": "contracts/Project.sol:Project",
        "label": "projectUri",
        "offset": 0,
        "slot": "513",
        "type": "t_string_storage"
      },
      {
        "astId": 6565,
        "contract": "contracts/Project.sol:Project",
        "label": "methodology",
        "offset": 0,
        "slot": "514",
        "type": "t_string_storage"
      },
      {
        "astId": 6610,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "515",
        "type": "t_array(t_uint256)38_storage"
      },
      {
        "astId": 2962,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "553",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/Project.sol:Project",
        "label": "__gap",
        "offset": 0,
        "slot": "603",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)38_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[38]",
        "numberOfBytes": "1216"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)23_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RetirementData)6824_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RetirementData)",
        "numberOfBytes": "32",
        "value": "t_struct(RetirementData)6824_storage"
      },
      "t_mapping(t_uint256,t_struct(VintageData)6811_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VintageData)",
        "numberOfBytes": "32",
        "value": "t_struct(VintageData)6811_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RetirementData)6824_storage": {
        "encoding": "inplace",
        "label": "struct RetirementData",
        "members": [
          {
            "astId": 6813,
            "contract": "contracts/Project.sol:Project",
            "label": "retiree",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6815,
            "contract": "contracts/Project.sol:Project",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6817,
            "contract": "contracts/Project.sol:Project",
            "label": "vintageTokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6819,
            "contract": "contracts/Project.sol:Project",
            "label": "retireeName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6821,
            "contract": "contracts/Project.sol:Project",
            "label": "customUri",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 6823,
            "contract": "contracts/Project.sol:Project",
            "label": "comment",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)23_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 20,
            "contract": "contracts/Project.sol:Project",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 22,
            "contract": "contracts/Project.sol:Project",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VintageData)6811_storage": {
        "encoding": "inplace",
        "label": "struct VintageData",
        "members": [
          {
            "astId": 6802,
            "contract": "contracts/Project.sol:Project",
            "label": "serialization",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6804,
            "contract": "contracts/Project.sol:Project",
            "label": "estMitigations",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6806,
            "contract": "contracts/Project.sol:Project",
            "label": "verificationPeriodStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6808,
            "contract": "contracts/Project.sol:Project",
            "label": "verificationPeriodEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6810,
            "contract": "contracts/Project.sol:Project",
            "label": "lastVerificationTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}