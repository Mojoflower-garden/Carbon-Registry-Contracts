{
  "manifestVersion": "3.2",
  "proxies": [],
  "impls": {
    "06e23252b1d24e06c888230a2b6e560ca476f05f48eebb8240aa7b0b94ed066c": {
      "address": "0x4E015Af07C197c81E589C095A5529A4bB4f55F93",
      "txHash": "0x980738819cbee1f265619e9ac5b17d8f7e286455c2a71b73b9ad7ac1418b80cc",
      "layout": {
        "solcVersion": "0.8.13",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:528"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:23"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:76"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "projectId",
            "type": "t_string_storage",
            "src": "../project:/contracts/ProjectStorage.sol:8"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "maxAntePercentage",
            "type": "t_uint8",
            "src": "../project:/contracts/ProjectStorage.sol:9"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "vintageMapping",
            "type": "t_mapping(t_uint256,t_struct(VintageData)6280_storage)",
            "src": "../project:/contracts/ProjectStorage.sol:10"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "serializationToTokenIdMapping",
            "type": "t_mapping(t_string_memory_ptr,t_uint256)",
            "src": "../project:/contracts/ProjectStorage.sol:11"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "exPostToExAnteToken",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/ProjectStorage.sol:12"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "isTokenMintable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/ProjectStorage.sol:13"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "isTokenClawbackEnabled",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/ProjectStorage.sol:14"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "retirementMapping",
            "type": "t_mapping(t_uint256,t_struct(RetirementData)6293_storage)",
            "src": "../project:/contracts/ProjectStorage.sol:15"
          },
          {
            "contract": "ProjectStorageV1",
            "label": "__gap",
            "type": "t_array(t_uint256)42_storage",
            "src": "../project:/contracts/ProjectStorage.sol:26"
          },
          {
            "contract": "Project",
            "label": "tokenCounter",
            "type": "t_struct(Counter)5327_storage",
            "src": "../project:/contracts/Project.sol:34"
          }
        ],
        "types": {
          "t_struct(Counter)5327_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_struct(VintageData)6280_storage)": {
            "label": "mapping(uint256 => struct VintageData)"
          },
          "t_struct(VintageData)6280_storage": {
            "label": "struct VintageData",
            "members": [
              {
                "label": "serialization",
                "type": "t_string_storage"
              },
              {
                "label": "verified",
                "type": "t_bool"
              },
              {
                "label": "tokenType",
                "type": "t_enum(TokenType)6272"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_enum(TokenType)6272": {
            "label": "enum TokenType",
            "members": [
              "NotSet",
              "ExPost",
              "ExAnte",
              "RetirementNft"
            ]
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_struct(RetirementData)6293_storage)": {
            "label": "mapping(uint256 => struct RetirementData)"
          },
          "t_struct(RetirementData)6293_storage": {
            "label": "struct RetirementData",
            "members": [
              {
                "label": "retireeAddress",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "vintageTokenId",
                "type": "t_uint256"
              },
              {
                "label": "retiree",
                "type": "t_string_storage"
              },
              {
                "label": "customUri",
                "type": "t_string_storage"
              },
              {
                "label": "comment",
                "type": "t_string_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)42_storage": {
            "label": "uint256[42]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    }
  }
}
