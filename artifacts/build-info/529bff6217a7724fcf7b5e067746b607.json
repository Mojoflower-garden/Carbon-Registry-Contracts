{"id":"529bff6217a7724fcf7b5e067746b607","_format":"hh-sol-build-info-1","solcVersion":"0.8.13","solcLongVersion":"0.8.13+commit.abaa5c0e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/BatchCreditActions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n// Importing the IERC1155Upgradeable interface from OpenZeppelin\nimport \"./interfaces/IProject.sol\";\nimport \"./utils/CustomSignaturesTypes.sol\";\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nstruct SignatureBatchTransferPayload {\n    address contractAddress;\n    signatureBatchTransferPayload payload;\n    bytes signature;\n}\n\ncontract BatchCreditActions is\n\tInitializable,\n\tPausableUpgradeable,\n\tAccessControlUpgradeable,\n\tUUPSUpgradeable {\n    \n    bytes32 public constant UPGRADER_ROLE = keccak256('UPGRADER_ROLE');\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n\tconstructor() {\n\t\t_disableInitializers();\n\t}\n\n    function initialize() public initializer {\n\t\t__Pausable_init();\n\t\t__AccessControl_init();\n\t\t__UUPSUpgradeable_init();\n\n\t\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\t_grantRole(UPGRADER_ROLE, msg.sender);\n\t}\n\nfunction handleTransfers(\n    SignatureBatchTransferPayload[] calldata transferItems,\n    bytes calldata transferData\n) public {\n    for (uint256 i = 0; i < transferItems.length; i++) {\n        IProject erc1155 = IProject(transferItems[i].contractAddress);\n        erc1155.batchTransferFromSignature(\n            transferItems[i].signature,\n            transferItems[i].payload,\n            transferData\n        );\n    }\n}\n\nfunction handleRetirements(\n    SignatureBatchTransferPayload[] calldata retirementItems,\n    string memory retireeName,\n    string memory customUri,\n    string memory comment,\n    bytes calldata retirementData\n) public {\n    for (uint256 i = 0; i < retirementItems.length; i++) {\n        IProject project = IProject(retirementItems[i].contractAddress);\n        project.retireFromSignature(\n            retirementItems[i].signature,\n            retirementItems[i].payload,\n            retireeName,\n            customUri,\n            comment,\n            retirementData\n        );\n    }\n}\n\nfunction batchTransferOrRetire(\n    SignatureBatchTransferPayload[] calldata transferItems,\n    SignatureBatchTransferPayload[] calldata retirementItems,\n    string memory retireeName,\n    string memory customUri,\n    string memory comment,\n    bytes calldata transferData,\n    bytes calldata retirementData\n) public {\n    handleTransfers(transferItems, transferData);\n    handleRetirements(retirementItems, retireeName, customUri, comment, retirementData);\n}\n\n\n    function _authorizeUpgrade(\n\taddress newImplementation\n\t) internal override onlyRole(UPGRADER_ROLE) {}\n}\n"},"contracts/interfaces/IProject.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport '../types/ProjectTypes.sol';\nimport '../utils/CustomSignaturesTypes.sol';\n\ninterface IProject {\n\tevent ExPostCreated(\n\t\tuint256 indexed tokenId,\n\t\tuint256 estimatedAmount,\n\t\tuint256 verificationPeriodStart,\n\t\tuint256 verificationPeriodEnd,\n\t\tstring serialization\n\t);\n\n\tevent VintageMitigationEstimateChanged(\n\t\tuint256 indexed tokenId,\n\t\tuint256 newEstimate,\n\t\tuint256 oldEstimate,\n\t\tAdminActionReason indexed reason\n\t);\n\n\tevent ExAnteMinted(\n\t\tuint256 indexed exAnteTokenId,\n\t\tuint256 indexed exPostTokenId,\n\t\taddress indexed account,\n\t\tuint256 amount\n\t);\n\n\tevent ExPostVerifiedAndMinted(\n\t\tuint256 indexed tokenId,\n\t\tuint256 amount,\n\t\tuint256 amountToAnteHolders,\n\t\tuint256 verificationPeriodStart,\n\t\tuint256 verificationPeriodEnd,\n\t\tstring monitoringReport\n\t);\n\n\tevent AdminBurn(\n\t\taddress indexed from,\n\t\tuint256 indexed tokenId,\n\t\tuint256 amount,\n\t\tAdminActionReason indexed reason\n\t);\n\n\tevent AdminClawback(\n\t\taddress indexed from,\n\t\taddress to,\n\t\tuint256 indexed tokenId,\n\t\tuint256 amount,\n\t\tAdminActionReason indexed reason\n\t);\n\n\tevent ExchangeAnteForPost(\n\t\taddress indexed account,\n\t\tuint256 indexed exPostTokenId,\n\t\tuint256 exPostAmountReceived,\n\t\tuint256 exAnteAmountBurned\n\t);\n\n\tevent RetiredVintage(\n\t\taddress indexed account,\n\t\tuint256 indexed tokenId,\n\t\tuint256 amount,\n\t\tuint256 nftTokenId,\n\t\tbytes data\n\t);\n\n\tevent CancelledCredits(\n\t\taddress indexed account, \n\t\tuint256 indexed tokenId, \n\t\tuint256 amount, \n\t\tstring reason,\n\t\tbytes data\n\t\t);\n\n\tfunction retire(\n\t\tuint256 tokenId,\n\t\tuint256 amount,\n\t\taddress beneficiary,\n\t\tstring memory retireeName,\n\t\tstring memory customUri,\n\t\tstring memory comment,\n\t\tbytes memory data\n\t) external returns (uint256 nftTokenId) ;\n\n\tfunction batchTransferFromSignature(\n\t\tbytes calldata signature,\n\t\tsignatureBatchTransferPayload calldata payload,\n\t\tbytes memory data\n\t) external payable;\n\n\tfunction retireFromSignature(\n\t\tbytes calldata signature,\n\t\tsignatureBatchTransferPayload calldata payload,\n\t\tstring memory retireeName,\n\t\tstring memory customUri,\n\t\tstring memory comment,\n\t\tbytes memory data\n\t)\n\t\texternal\n\t\treturns (uint256[] memory);\n}"},"contracts/types/ProjectTypes.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nstruct VintageData {\n    string serialization;\n    uint256 estMitigations; // in TC02e\n    uint256 verificationPeriodStart; // timestamp seconds since Unix\n    uint256 verificationPeriodEnd;\n    uint256 lastVerificationTimestamp;\n}\n\nstruct RetirementData {\n    address retiree;\n    uint256 amount;\n    uint256 vintageTokenId;\n    string retireeName;\n    string customUri;\n    string comment;\n}\n\nenum AdminActionReason {\n    NoReason,\n    OverEstimated,\n    UnderEstimated,\n    CreditsLost,\n    CreditsGained\n}\n\nabstract contract ProjectTypes {}\n"},"contracts/utils/CustomSignaturesTypes.sol":{"content":"// SPDX-FileCopyrightText: 2023 Mojoflower\n//\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nstruct signatureBatchTransferPayload {\n    uint256 deadline;\n    string description;\n    address signer;\n    address to;\n    uint256[] tokenIds;\n    uint256[] amounts;\n    uint256 nonce;\n}\n\nabstract contract CustomSignaturesTypes {}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[336],"ContextUpgradeable":[1590],"ERC165Upgradeable":[1974],"IAccessControlUpgradeable":[409],"IERC165Upgradeable":[1986],"Initializable":[944],"MathUpgradeable":[2852],"SignedMathUpgradeable":[2957],"StringsUpgradeable":[1929]},"id":337,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":337,"sourceUnit":410,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":337,"sourceUnit":1591,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":337,"sourceUnit":1930,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":337,"sourceUnit":1975,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":337,"sourceUnit":945,"src":"314:63:0","symbolAliases":[{"foreign":{"id":6,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"322:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"2086:13:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"2086:13:0"},{"baseName":{"id":11,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1590,"src":"2101:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"2101:18:0"},{"baseName":{"id":13,"name":"IAccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":409,"src":"2121:25:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"2121:25:0"},{"baseName":{"id":15,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1974,"src":"2148:17:0"},"id":16,"nodeType":"InheritanceSpecifier","src":"2148:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"379:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":336,"linearizedBaseContracts":[336,1974,1986,409,1590,944],"name":"AccessControlUpgradeable","nameLocation":"2058:24:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControlUpgradeable.RoleData","id":23,"members":[{"constant":false,"id":20,"mutability":"mutable","name":"members","nameLocation":"2223:7:0","nodeType":"VariableDeclaration","scope":23,"src":"2198:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":19,"keyType":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"2206:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2198:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":18,"name":"bool","nodeType":"ElementaryTypeName","src":"2217:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":22,"mutability":"mutable","name":"adminRole","nameLocation":"2248:9:0","nodeType":"VariableDeclaration","scope":23,"src":"2240:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":21,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2179:8:0","nodeType":"StructDefinition","scope":336,"src":"2172:92:0","visibility":"public"},{"constant":false,"id":28,"mutability":"mutable","name":"_roles","nameLocation":"2307:6:0","nodeType":"VariableDeclaration","scope":336,"src":"2270:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":27,"keyType":{"id":24,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2278:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2270:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":26,"nodeType":"UserDefinedTypeName","pathNode":{"id":25,"name":"RoleData","nodeType":"IdentifierPath","referencedDeclaration":23,"src":"2289:8:0"},"referencedDeclaration":23,"src":"2289:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$23_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":31,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2344:18:0","nodeType":"VariableDeclaration","scope":336,"src":"2320:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2320:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":30,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2365:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":41,"nodeType":"Block","src":"2788:44:0","statements":[{"expression":{"arguments":[{"id":37,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"2809:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":36,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[108,147],"referencedDeclaration":108,"src":"2798:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2798:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":39,"nodeType":"ExpressionStatement","src":"2798:16:0"},{"id":40,"nodeType":"PlaceholderStatement","src":"2824:1:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"2376:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":42,"name":"onlyRole","nameLocation":"2765:8:0","nodeType":"ModifierDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"role","nameLocation":"2782:4:0","nodeType":"VariableDeclaration","scope":42,"src":"2774:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":33,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2774:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2773:14:0"},"src":"2756:76:0","virtual":false,"visibility":"internal"},{"body":{"id":47,"nodeType":"Block","src":"2896:7:0","statements":[]},"id":48,"implemented":true,"kind":"function","modifiers":[{"id":45,"kind":"modifierInvocation","modifierName":{"id":44,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"2879:16:0"},"nodeType":"ModifierInvocation","src":"2879:16:0"}],"name":"__AccessControl_init","nameLocation":"2847:20:0","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"2867:2:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"2896:0:0"},"scope":336,"src":"2838:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"2977:7:0","statements":[]},"id":54,"implemented":true,"kind":"function","modifiers":[{"id":51,"kind":"modifierInvocation","modifierName":{"id":50,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"2960:16:0"},"nodeType":"ModifierInvocation","src":"2960:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2918:30:0","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[],"src":"2948:2:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"2977:0:0"},"scope":336,"src":"2909:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1968],"body":{"id":75,"nodeType":"Block","src":"3141:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":63,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"3158:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":65,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3178:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$409_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$409_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":64,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3173:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3173:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$409","typeString":"type(contract IAccessControlUpgradeable)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"3173:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3158:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":71,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"3244:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":69,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3220:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$336_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1968,"src":"3220:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3220:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3158:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":62,"id":74,"nodeType":"Return","src":"3151:105:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"2989:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":76,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3059:17:0","nodeType":"FunctionDefinition","overrides":{"id":59,"nodeType":"OverrideSpecifier","overrides":[],"src":"3117:8:0"},"parameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"interfaceId","nameLocation":"3084:11:0","nodeType":"VariableDeclaration","scope":76,"src":"3077:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":56,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3077:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3076:20:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":76,"src":"3135:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":60,"name":"bool","nodeType":"ElementaryTypeName","src":"3135:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3134:6:0"},"scope":336,"src":"3050:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[376],"body":{"id":94,"nodeType":"Block","src":"3442:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":87,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"3459:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":89,"indexExpression":{"id":88,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"3466:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3459:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$23_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":90,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":20,"src":"3459:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":92,"indexExpression":{"id":91,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"3480:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3459:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":86,"id":93,"nodeType":"Return","src":"3452:36:0"}]},"documentation":{"id":77,"nodeType":"StructuredDocumentation","src":"3269:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":95,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3359:7:0","nodeType":"FunctionDefinition","overrides":{"id":83,"nodeType":"OverrideSpecifier","overrides":[],"src":"3418:8:0"},"parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"role","nameLocation":"3375:4:0","nodeType":"VariableDeclaration","scope":95,"src":"3367:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":78,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3367:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"account","nameLocation":"3389:7:0","nodeType":"VariableDeclaration","scope":95,"src":"3381:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80,"name":"address","nodeType":"ElementaryTypeName","src":"3381:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3366:31:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":95,"src":"3436:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":84,"name":"bool","nodeType":"ElementaryTypeName","src":"3436:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3435:6:0"},"scope":336,"src":"3350:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":107,"nodeType":"Block","src":"3845:47:0","statements":[{"expression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3866:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":103,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"3872:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3872:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[108,147],"referencedDeclaration":147,"src":"3855:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3855:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":106,"nodeType":"ExpressionStatement","src":"3855:30:0"}]},"documentation":{"id":96,"nodeType":"StructuredDocumentation","src":"3501:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":108,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3798:10:0","nodeType":"FunctionDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"role","nameLocation":"3817:4:0","nodeType":"VariableDeclaration","scope":108,"src":"3809:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":97,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3809:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3808:14:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"3845:0:0"},"scope":336,"src":"3789:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":146,"nodeType":"Block","src":"4246:428:0","statements":[{"condition":{"id":120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4260:23:0","subExpression":{"arguments":[{"id":117,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"4269:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":118,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"4275:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":116,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4261:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4261:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"IfStatement","src":"4256:412:0","trueBody":{"id":144,"nodeType":"Block","src":"4285:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4393:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":129,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"4475:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":127,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"4444:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1929_$","typeString":"type(library StringsUpgradeable)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1903,"src":"4444:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4444:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4509:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":136,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"4593:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4585:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":134,"name":"uint256","nodeType":"ElementaryTypeName","src":"4585:7:0","typeDescriptions":{}}},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4585:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4600:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":132,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"4554:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1929_$","typeString":"type(library StringsUpgradeable)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1883,"src":"4554:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4554:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":124,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4351:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4351:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4351:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4323:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":122,"name":"string","nodeType":"ElementaryTypeName","src":"4323:6:0","typeDescriptions":{}}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4323:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":121,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4299:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4299:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"4299:358:0"}]}}]},"documentation":{"id":109,"nodeType":"StructuredDocumentation","src":"3898:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":147,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4182:10:0","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"role","nameLocation":"4201:4:0","nodeType":"VariableDeclaration","scope":147,"src":"4193:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":113,"mutability":"mutable","name":"account","nameLocation":"4215:7:0","nodeType":"VariableDeclaration","scope":147,"src":"4207:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"4207:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4192:31:0"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"4246:0:0"},"scope":336,"src":"4173:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[384],"body":{"id":161,"nodeType":"Block","src":"4938:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":156,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"4955:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":158,"indexExpression":{"id":157,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4962:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4955:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$23_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":159,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":22,"src":"4955:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":155,"id":160,"nodeType":"Return","src":"4948:29:0"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"4680:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":162,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4864:12:0","nodeType":"FunctionDefinition","overrides":{"id":152,"nodeType":"OverrideSpecifier","overrides":[],"src":"4911:8:0"},"parameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"role","nameLocation":"4885:4:0","nodeType":"VariableDeclaration","scope":162,"src":"4877:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4877:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4876:14:0"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":162,"src":"4929:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4929:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4928:9:0"},"scope":336,"src":"4855:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[392],"body":{"id":181,"nodeType":"Block","src":"5383:42:0","statements":[{"expression":{"arguments":[{"id":177,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"5404:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":178,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"5410:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":176,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"5393:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5393:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":180,"nodeType":"ExpressionStatement","src":"5393:25:0"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"4990:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":182,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":172,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"5376:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":171,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"5363:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5363:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":174,"kind":"modifierInvocation","modifierName":{"id":170,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":42,"src":"5354:8:0"},"nodeType":"ModifierInvocation","src":"5354:28:0"}],"name":"grantRole","nameLocation":"5289:9:0","nodeType":"FunctionDefinition","overrides":{"id":169,"nodeType":"OverrideSpecifier","overrides":[],"src":"5345:8:0"},"parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"role","nameLocation":"5307:4:0","nodeType":"VariableDeclaration","scope":182,"src":"5299:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5299:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"account","nameLocation":"5321:7:0","nodeType":"VariableDeclaration","scope":182,"src":"5313:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"5313:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5298:31:0"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"5383:0:0"},"scope":336,"src":"5280:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[400],"body":{"id":201,"nodeType":"Block","src":"5809:43:0","statements":[{"expression":{"arguments":[{"id":197,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"5831:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":198,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"5837:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":196,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"5819:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5819:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":200,"nodeType":"ExpressionStatement","src":"5819:26:0"}]},"documentation":{"id":183,"nodeType":"StructuredDocumentation","src":"5431:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":202,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":192,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"5802:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":191,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"5789:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5789:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":194,"kind":"modifierInvocation","modifierName":{"id":190,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":42,"src":"5780:8:0"},"nodeType":"ModifierInvocation","src":"5780:28:0"}],"name":"revokeRole","nameLocation":"5714:10:0","nodeType":"FunctionDefinition","overrides":{"id":189,"nodeType":"OverrideSpecifier","overrides":[],"src":"5771:8:0"},"parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"role","nameLocation":"5733:4:0","nodeType":"VariableDeclaration","scope":202,"src":"5725:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5725:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"account","nameLocation":"5747:7:0","nodeType":"VariableDeclaration","scope":202,"src":"5739:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"5739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5724:31:0"},"returnParameters":{"id":195,"nodeType":"ParameterList","parameters":[],"src":"5809:0:0"},"scope":336,"src":"5705:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[408],"body":{"id":224,"nodeType":"Block","src":"6466:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":212,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6484:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":213,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"6495:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6495:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6484:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6509:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":211,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6476:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6476:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":218,"nodeType":"ExpressionStatement","src":"6476:83:0"},{"expression":{"arguments":[{"id":220,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"6582:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":221,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6588:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":219,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"6570:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6570:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":223,"nodeType":"ExpressionStatement","src":"6570:26:0"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"5858:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":225,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6398:12:0","nodeType":"FunctionDefinition","overrides":{"id":209,"nodeType":"OverrideSpecifier","overrides":[],"src":"6457:8:0"},"parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"role","nameLocation":"6419:4:0","nodeType":"VariableDeclaration","scope":225,"src":"6411:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":204,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6411:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"account","nameLocation":"6433:7:0","nodeType":"VariableDeclaration","scope":225,"src":"6425:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"6425:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6410:31:0"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"6466:0:0"},"scope":336,"src":"6389:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":238,"nodeType":"Block","src":"7356:42:0","statements":[{"expression":{"arguments":[{"id":234,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7377:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":235,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"7383:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":233,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"7366:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7366:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":237,"nodeType":"ExpressionStatement","src":"7366:25:0"}]},"documentation":{"id":226,"nodeType":"StructuredDocumentation","src":"6609:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":239,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7297:10:0","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"role","nameLocation":"7316:4:0","nodeType":"VariableDeclaration","scope":239,"src":"7308:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7308:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"account","nameLocation":"7330:7:0","nodeType":"VariableDeclaration","scope":239,"src":"7322:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"7322:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7307:31:0"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[],"src":"7356:0:0"},"scope":336,"src":"7288:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":266,"nodeType":"Block","src":"7596:174:0","statements":[{"assignments":[248],"declarations":[{"constant":false,"id":248,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7614:17:0","nodeType":"VariableDeclaration","scope":266,"src":"7606:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7606:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":252,"initialValue":{"arguments":[{"id":250,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7647:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":249,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"7634:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7634:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7606:46:0"},{"expression":{"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":253,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"7662:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":255,"indexExpression":{"id":254,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7669:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7662:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$23_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":22,"src":"7662:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":257,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"7687:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7662:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":259,"nodeType":"ExpressionStatement","src":"7662:34:0"},{"eventCall":{"arguments":[{"id":261,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"7728:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"7734:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":263,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"7753:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":260,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"7711:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7711:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":265,"nodeType":"EmitStatement","src":"7706:57:0"}]},"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"7404:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":267,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7532:13:0","nodeType":"FunctionDefinition","parameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"role","nameLocation":"7554:4:0","nodeType":"VariableDeclaration","scope":267,"src":"7546:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7546:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"adminRole","nameLocation":"7568:9:0","nodeType":"VariableDeclaration","scope":267,"src":"7560:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7560:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7545:33:0"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[],"src":"7596:0:0"},"scope":336,"src":"7523:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"8006:165:0","statements":[{"condition":{"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8020:23:0","subExpression":{"arguments":[{"id":276,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"8029:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":277,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"8035:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":275,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"8021:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8021:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":297,"nodeType":"IfStatement","src":"8016:149:0","trueBody":{"id":296,"nodeType":"Block","src":"8045:120:0","statements":[{"expression":{"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":280,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8059:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":282,"indexExpression":{"id":281,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"8066:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8059:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$23_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":20,"src":"8059:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":285,"indexExpression":{"id":284,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"8080:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8059:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8091:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8059:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":288,"nodeType":"ExpressionStatement","src":"8059:36:0"},{"eventCall":{"arguments":[{"id":290,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"8126:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":291,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"8132:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":292,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"8141:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8141:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":289,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"8114:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8114:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":295,"nodeType":"EmitStatement","src":"8109:45:0"}]}}]},"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"7776:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7947:10:0","nodeType":"FunctionDefinition","parameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"role","nameLocation":"7966:4:0","nodeType":"VariableDeclaration","scope":299,"src":"7958:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":269,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7958:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"account","nameLocation":"7980:7:0","nodeType":"VariableDeclaration","scope":299,"src":"7972:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"7972:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7957:31:0"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[],"src":"8006:0:0"},"scope":336,"src":"7938:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":329,"nodeType":"Block","src":"8411:165:0","statements":[{"condition":{"arguments":[{"id":308,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"8433:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":309,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"8439:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":307,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"8425:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8425:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":328,"nodeType":"IfStatement","src":"8421:149:0","trueBody":{"id":327,"nodeType":"Block","src":"8449:121:0","statements":[{"expression":{"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":311,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8463:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$23_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":313,"indexExpression":{"id":312,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"8470:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8463:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$23_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":20,"src":"8463:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":316,"indexExpression":{"id":315,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"8484:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8463:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8495:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8463:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":319,"nodeType":"ExpressionStatement","src":"8463:37:0"},{"eventCall":{"arguments":[{"id":321,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"8531:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":322,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"8537:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":323,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"8546:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8546:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":320,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"8519:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8519:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":326,"nodeType":"EmitStatement","src":"8514:45:0"}]}}]},"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"8177:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":330,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8351:11:0","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"role","nameLocation":"8371:4:0","nodeType":"VariableDeclaration","scope":330,"src":"8363:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8363:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":304,"mutability":"mutable","name":"account","nameLocation":"8385:7:0","nodeType":"VariableDeclaration","scope":330,"src":"8377:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":303,"name":"address","nodeType":"ElementaryTypeName","src":"8377:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8362:31:0"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[],"src":"8411:0:0"},"scope":336,"src":"8342:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":331,"nodeType":"StructuredDocumentation","src":"8582:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":335,"mutability":"mutable","name":"__gap","nameLocation":"8861:5:0","nodeType":"VariableDeclaration","scope":336,"src":"8841:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":332,"name":"uint256","nodeType":"ElementaryTypeName","src":"8841:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":334,"length":{"hexValue":"3439","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8841:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":337,"src":"2040:6829:0","usedErrors":[]}],"src":"108:8762:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[409]},"id":410,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":338,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":409,"linearizedBaseContracts":[409],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":340,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":348,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":348,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":344,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":348,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":346,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":348,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":357,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":357,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":353,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":357,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":355,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":357,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":358,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":366,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":360,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":366,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":362,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":366,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":361,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":364,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":366,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":363,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":376,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":376,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":368,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":376,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":376,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":373,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":409,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":377,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":384,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":384,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":384,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":409,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":385,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":392,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":392,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":392,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":388,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":409,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":393,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":400,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":395,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":400,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":397,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":400,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":396,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":409,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":401,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":408,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":408,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":405,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":408,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":404,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":407,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":409,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":410,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[430]},"id":431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":411,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"132:133:2","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":430,"linearizedBaseContracts":[430],"name":"IERC1967Upgradeable","nameLocation":"276:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"302:68:2","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":417,"name":"Upgraded","nameLocation":"381:8:2","nodeType":"EventDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:2","nodeType":"VariableDeclaration","scope":417,"src":"390:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:2"},"src":"375:47:2"},{"anonymous":false,"documentation":{"id":418,"nodeType":"StructuredDocumentation","src":"428:67:2","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":424,"name":"AdminChanged","nameLocation":"506:12:2","nodeType":"EventDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:2","nodeType":"VariableDeclaration","scope":424,"src":"519:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":422,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:2","nodeType":"VariableDeclaration","scope":424,"src":"542:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:2"},"src":"500:60:2"},{"anonymous":false,"documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"566:59:2","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":429,"name":"BeaconUpgraded","nameLocation":"636:14:2","nodeType":"EventDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:2","nodeType":"VariableDeclaration","scope":429,"src":"651:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:2"},"src":"630:45:2"}],"scope":431,"src":"266:411:2","usedErrors":[]}],"src":"107:571:2"},"id":2},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[440]},"id":441,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":432,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"138:203:3","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":440,"linearizedBaseContracts":[440],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"387:438:3","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":439,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:3","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[],"src":"852:2:3"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":439,"src":"878:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:3"},"scope":440,"src":"830:57:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":441,"src":"342:547:3","usedErrors":[]}],"src":"113:777:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1539],"ERC1967UpgradeUpgradeable":[765],"IBeaconUpgradeable":[775],"IERC1822ProxiableUpgradeable":[440],"IERC1967Upgradeable":[430],"Initializable":[944],"StorageSlotUpgradeable":[1700]},"id":766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":442,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":766,"sourceUnit":776,"src":"141:42:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":766,"sourceUnit":431,"src":"184:50:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":766,"sourceUnit":441,"src":"235:56:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":766,"sourceUnit":1540,"src":"292:44:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":766,"sourceUnit":1701,"src":"337:48:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":766,"sourceUnit":945,"src":"386:57:4","symbolAliases":[{"foreign":{"id":448,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"394:13:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":451,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"677:13:4"},"id":452,"nodeType":"InheritanceSpecifier","src":"677:13:4"},{"baseName":{"id":453,"name":"IERC1967Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":430,"src":"692:19:4"},"id":454,"nodeType":"InheritanceSpecifier","src":"692:19:4"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"445:184:4","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":765,"linearizedBaseContracts":[765,430,944],"name":"ERC1967UpgradeUpgradeable","nameLocation":"648:25:4","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":457,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"822:14:4","nodeType":"VariableDeclaration","scope":765,"src":"797:108:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"797:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"839:66:4","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"912:214:4","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":461,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1157:20:4","nodeType":"VariableDeclaration","scope":765,"src":"1131:115:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1131:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1180:66:4","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":466,"nodeType":"Block","src":"1312:7:4","statements":[]},"id":467,"implemented":true,"kind":"function","modifiers":[{"id":464,"kind":"modifierInvocation","modifierName":{"id":463,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"1295:16:4"},"nodeType":"ModifierInvocation","src":"1295:16:4"}],"name":"__ERC1967Upgrade_init","nameLocation":"1262:21:4","nodeType":"FunctionDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"1283:2:4"},"returnParameters":{"id":465,"nodeType":"ParameterList","parameters":[],"src":"1312:0:4"},"scope":765,"src":"1253:66:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":472,"nodeType":"Block","src":"1394:7:4","statements":[]},"id":473,"implemented":true,"kind":"function","modifiers":[{"id":470,"kind":"modifierInvocation","modifierName":{"id":469,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"1377:16:4"},"nodeType":"ModifierInvocation","src":"1377:16:4"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"1334:31:4","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"1365:2:4"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[],"src":"1394:0:4"},"scope":765,"src":"1325:76:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":485,"nodeType":"Block","src":"1540:89:4","statements":[{"expression":{"expression":{"arguments":[{"id":481,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"1595:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":479,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1557:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1622,"src":"1557:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1596_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1557:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"1557:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":478,"id":484,"nodeType":"Return","src":"1550:72:4"}]},"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"1406:67:4","text":" @dev Returns the current implementation address."},"id":486,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1487:18:4","nodeType":"FunctionDefinition","parameters":{"id":475,"nodeType":"ParameterList","parameters":[],"src":"1505:2:4"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":486,"src":"1531:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":476,"name":"address","nodeType":"ElementaryTypeName","src":"1531:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1530:9:4"},"scope":765,"src":"1478:151:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":509,"nodeType":"Block","src":"1783:218:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":495,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1831:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":493,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"1801:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1539_$","typeString":"type(library AddressUpgradeable)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1227,"src":"1801:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1801:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1851:47:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":492,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1793:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1793:106:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":499,"nodeType":"ExpressionStatement","src":"1793:106:4"},{"expression":{"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":503,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"1947:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":500,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1909:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1622,"src":"1909:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1596_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1909:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":505,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"1909:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":506,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1977:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1909:85:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":508,"nodeType":"ExpressionStatement","src":"1909:85:4"}]},"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"1635:80:4","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":510,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1729:18:4","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"newImplementation","nameLocation":"1756:17:4","nodeType":"VariableDeclaration","scope":510,"src":"1748:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":488,"name":"address","nodeType":"ElementaryTypeName","src":"1748:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1747:27:4"},"returnParameters":{"id":491,"nodeType":"ParameterList","parameters":[],"src":"1783:0:4"},"scope":765,"src":"1720:281:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":524,"nodeType":"Block","src":"2163:96:4","statements":[{"expression":{"arguments":[{"id":517,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"2192:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":516,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"2173:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2173:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":519,"nodeType":"ExpressionStatement","src":"2173:37:4"},{"eventCall":{"arguments":[{"id":521,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"2234:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":520,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"2225:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2225:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":523,"nodeType":"EmitStatement","src":"2220:32:4"}]},"documentation":{"id":511,"nodeType":"StructuredDocumentation","src":"2007:95:4","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":525,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2116:10:4","nodeType":"FunctionDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"newImplementation","nameLocation":"2135:17:4","nodeType":"VariableDeclaration","scope":525,"src":"2127:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2126:27:4"},"returnParameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"2163:0:4"},"scope":765,"src":"2107:152:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":554,"nodeType":"Block","src":"2491:178:4","statements":[{"expression":{"arguments":[{"id":536,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"2512:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":535,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2501:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":538,"nodeType":"ExpressionStatement","src":"2501:29:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":539,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2544:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2544:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2558:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2544:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":543,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"2563:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2544:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":553,"nodeType":"IfStatement","src":"2540:123:4","trueBody":{"id":552,"nodeType":"Block","src":"2574:89:4","statements":[{"expression":{"arguments":[{"id":548,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"2628:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":549,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2647:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":545,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"2588:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1539_$","typeString":"type(library AddressUpgradeable)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1426,"src":"2588:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2588:64:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":551,"nodeType":"ExpressionStatement","src":"2588:64:4"}]}}]},"documentation":{"id":526,"nodeType":"StructuredDocumentation","src":"2265:123:4","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":555,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2402:17:4","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"newImplementation","nameLocation":"2428:17:4","nodeType":"VariableDeclaration","scope":555,"src":"2420:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"2420:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"data","nameLocation":"2460:4:4","nodeType":"VariableDeclaration","scope":555,"src":"2447:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":529,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"forceCall","nameLocation":"2471:9:4","nodeType":"VariableDeclaration","scope":555,"src":"2466:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":531,"name":"bool","nodeType":"ElementaryTypeName","src":"2466:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2419:62:4"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"2491:0:4"},"scope":765,"src":"2393:276:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":607,"nodeType":"Block","src":"2943:842:4","statements":[{"condition":{"expression":{"arguments":[{"id":567,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"3295:14:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":565,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"3257:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1633,"src":"3257:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1599_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3257:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1599_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1598,"src":"3257:59:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":605,"nodeType":"Block","src":"3386:393:4","statements":[{"clauses":[{"block":{"id":590,"nodeType":"Block","src":"3491:115:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":584,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"3517:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":585,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"3525:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3517:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3547:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3509:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3509:82:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":589,"nodeType":"ExpressionStatement","src":"3509:82:4"}]},"errorName":"","id":591,"nodeType":"TryCatchClause","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"slot","nameLocation":"3485:4:4","nodeType":"VariableDeclaration","scope":591,"src":"3477:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3477:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3476:14:4"},"src":"3468:138:4"},{"block":{"id":596,"nodeType":"Block","src":"3613:89:4","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3638:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":592,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3631:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3631:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":595,"nodeType":"ExpressionStatement","src":"3631:56:4"}]},"errorName":"","id":597,"nodeType":"TryCatchClause","src":"3607:95:4"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":576,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3433:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":575,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"3404:28:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$440_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3404:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$440","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":439,"src":"3404:61:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3404:63:4","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":598,"nodeType":"TryStatement","src":"3400:302:4"},{"expression":{"arguments":[{"id":600,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3733:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":601,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"3752:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":602,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"3758:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":599,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"3715:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3715:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":604,"nodeType":"ExpressionStatement","src":"3715:53:4"}]},"id":606,"nodeType":"IfStatement","src":"3253:526:4","trueBody":{"id":574,"nodeType":"Block","src":"3318:62:4","statements":[{"expression":{"arguments":[{"id":571,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3351:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":570,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"3332:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3332:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":573,"nodeType":"ExpressionStatement","src":"3332:37:4"}]}}]},"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"2675:161:4","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":608,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2850:21:4","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"newImplementation","nameLocation":"2880:17:4","nodeType":"VariableDeclaration","scope":608,"src":"2872:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"2872:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"data","nameLocation":"2912:4:4","nodeType":"VariableDeclaration","scope":608,"src":"2899:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":559,"name":"bytes","nodeType":"ElementaryTypeName","src":"2899:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"forceCall","nameLocation":"2923:9:4","nodeType":"VariableDeclaration","scope":608,"src":"2918:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":561,"name":"bool","nodeType":"ElementaryTypeName","src":"2918:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2871:62:4"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"2943:0:4"},"scope":765,"src":"2841:944:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"3791:189:4","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":612,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4011:11:4","nodeType":"VariableDeclaration","scope":765,"src":"3985:106:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3985:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4025:66:4","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":624,"nodeType":"Block","src":"4206:80:4","statements":[{"expression":{"expression":{"arguments":[{"id":620,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4261:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":618,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"4223:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1622,"src":"4223:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1596_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4223:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":622,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"4223:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":617,"id":623,"nodeType":"Return","src":"4216:63:4"}]},"documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"4098:50:4","text":" @dev Returns the current admin."},"id":625,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4162:9:4","nodeType":"FunctionDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[],"src":"4171:2:4"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"4197:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"4197:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4196:9:4"},"scope":765,"src":"4153:133:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":650,"nodeType":"Block","src":"4413:167:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":632,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"4431:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4451:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4443:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"4443:7:4","typeDescriptions":{}}},"id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4443:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4431:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4455:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":631,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4423:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4423:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":640,"nodeType":"ExpressionStatement","src":"4423:73:4"},{"expression":{"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":644,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4544:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":641,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"4506:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1622,"src":"4506:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1596_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4506:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"4506:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":647,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"4565:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4506:67:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":649,"nodeType":"ExpressionStatement","src":"4506:67:4"}]},"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"4292:71:4","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":651,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4377:9:4","nodeType":"FunctionDefinition","parameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"newAdmin","nameLocation":"4395:8:4","nodeType":"VariableDeclaration","scope":651,"src":"4387:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":627,"name":"address","nodeType":"ElementaryTypeName","src":"4387:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4386:18:4"},"returnParameters":{"id":630,"nodeType":"ParameterList","parameters":[],"src":"4413:0:4"},"scope":765,"src":"4368:212:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":667,"nodeType":"Block","src":"4740:86:4","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":658,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"4768:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4768:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":660,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"4781:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":657,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"4755:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4755:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"EmitStatement","src":"4750:40:4"},{"expression":{"arguments":[{"id":664,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"4810:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":663,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4800:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4800:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":666,"nodeType":"ExpressionStatement","src":"4800:19:4"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"4586:100:4","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":668,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4700:12:4","nodeType":"FunctionDefinition","parameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":654,"mutability":"mutable","name":"newAdmin","nameLocation":"4721:8:4","nodeType":"VariableDeclaration","scope":668,"src":"4713:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"4713:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4712:18:4"},"returnParameters":{"id":656,"nodeType":"ParameterList","parameters":[],"src":"4740:0:4"},"scope":765,"src":"4691:135:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"4832:232:4","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":672,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5095:12:4","nodeType":"VariableDeclaration","scope":765,"src":"5069:107:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5069:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5110:66:4","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":684,"nodeType":"Block","src":"5293:81:4","statements":[{"expression":{"expression":{"arguments":[{"id":680,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"5348:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":678,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5310:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1622,"src":"5310:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1596_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5310:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"5310:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":677,"id":683,"nodeType":"Return","src":"5303:64:4"}]},"documentation":{"id":673,"nodeType":"StructuredDocumentation","src":"5183:51:4","text":" @dev Returns the current beacon."},"id":685,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5248:10:4","nodeType":"FunctionDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"5258:2:4"},"returnParameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":685,"src":"5284:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":675,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5283:9:4"},"scope":765,"src":"5239:135:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":720,"nodeType":"Block","src":"5503:368:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":694,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5551:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":692,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"5521:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1539_$","typeString":"type(library AddressUpgradeable)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1227,"src":"5521:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5521:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5563:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":691,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5513:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5513:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":698,"nodeType":"ExpressionStatement","src":"5513:90:4"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":703,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5683:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":702,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"5664:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$775_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5664:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$775","typeString":"contract IBeaconUpgradeable"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":774,"src":"5664:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5664:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":700,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"5634:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1539_$","typeString":"type(library AddressUpgradeable)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1227,"src":"5634:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5634:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5725:50:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":699,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5613:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5613:172:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":710,"nodeType":"ExpressionStatement","src":"5613:172:4"},{"expression":{"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":714,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"5833:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":711,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5795:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1700_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1622,"src":"5795:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1596_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5795:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":716,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"5795:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":717,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5855:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5795:69:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":719,"nodeType":"ExpressionStatement","src":"5795:69:4"}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"5380:71:4","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":721,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5465:10:4","nodeType":"FunctionDefinition","parameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"newBeacon","nameLocation":"5484:9:4","nodeType":"VariableDeclaration","scope":721,"src":"5476:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"5476:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5475:19:4"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"5503:0:4"},"scope":765,"src":"5456:415:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":758,"nodeType":"Block","src":"6270:239:4","statements":[{"expression":{"arguments":[{"id":732,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"6291:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":731,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"6280:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6280:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":734,"nodeType":"ExpressionStatement","src":"6280:21:4"},{"eventCall":{"arguments":[{"id":736,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"6331:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":735,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"6316:14:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6316:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":738,"nodeType":"EmitStatement","src":"6311:30:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":739,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"6355:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6355:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6355:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":743,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"6374:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6355:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":757,"nodeType":"IfStatement","src":"6351:152:4","trueBody":{"id":756,"nodeType":"Block","src":"6385:118:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":749,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"6458:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":748,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"6439:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$775_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6439:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$775","typeString":"contract IBeaconUpgradeable"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":774,"src":"6439:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6439:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":753,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"6487:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":745,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"6399:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1539_$","typeString":"type(library AddressUpgradeable)"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1426,"src":"6399:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6399:93:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":755,"nodeType":"ExpressionStatement","src":"6399:93:4"}]}}]},"documentation":{"id":722,"nodeType":"StructuredDocumentation","src":"5877:292:4","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":759,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6183:23:4","nodeType":"FunctionDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"newBeacon","nameLocation":"6215:9:4","nodeType":"VariableDeclaration","scope":759,"src":"6207:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"6207:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"data","nameLocation":"6239:4:4","nodeType":"VariableDeclaration","scope":759,"src":"6226:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":725,"name":"bytes","nodeType":"ElementaryTypeName","src":"6226:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":728,"mutability":"mutable","name":"forceCall","nameLocation":"6250:9:4","nodeType":"VariableDeclaration","scope":759,"src":"6245:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":727,"name":"bool","nodeType":"ElementaryTypeName","src":"6245:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6206:54:4"},"returnParameters":{"id":730,"nodeType":"ParameterList","parameters":[],"src":"6270:0:4"},"scope":765,"src":"6174:335:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"6515:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":764,"mutability":"mutable","name":"__gap","nameLocation":"6794:5:4","nodeType":"VariableDeclaration","scope":765,"src":"6774:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":761,"name":"uint256","nodeType":"ElementaryTypeName","src":"6774:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":763,"length":{"hexValue":"3530","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6782:2:4","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6774:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":766,"src":"630:6172:4","usedErrors":[]}],"src":"116:6687:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[775]},"id":776,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":767,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"118:79:5","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":775,"linearizedBaseContracts":[775],"name":"IBeaconUpgradeable","nameLocation":"208:18:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"233:162:5","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":774,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:5","nodeType":"FunctionDefinition","parameters":{"id":770,"nodeType":"ParameterList","parameters":[],"src":"423:2:5"},"returnParameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":774,"src":"449:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:5"},"scope":775,"src":"400:58:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":776,"src":"198:262:5","usedErrors":[]}],"src":"93:368:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1539],"Initializable":[944]},"id":945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":777,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":778,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":1540,"src":"138:44:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":779,"nodeType":"StructuredDocumentation","src":"184:2209:6","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":944,"linearizedBaseContracts":[944],"name":"Initializable","nameLocation":"2412:13:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"2432:109:6","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":782,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:6","nodeType":"VariableDeclaration","scope":944,"src":"2546:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":781,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"2579:91:6","text":" @dev Indicates that the contract is in the process of being initialized."},"id":785,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:6","nodeType":"VariableDeclaration","scope":944,"src":"2675:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":784,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"2708:90:6","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":790,"name":"Initialized","nameLocation":"2809:11:6","nodeType":"EventDefinition","parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:6","nodeType":"VariableDeclaration","scope":790,"src":"2821:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":787,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:6"},"src":"2803:33:6"},{"body":{"id":845,"nodeType":"Block","src":"3269:483:6","statements":[{"assignments":[794],"declarations":[{"constant":false,"id":794,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:6","nodeType":"VariableDeclaration","scope":845,"src":"3279:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":793,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":797,"initialValue":{"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:6","subExpression":{"id":795,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"3302:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":799,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"3347:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":800,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"3365:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":804,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:6","subExpression":{"arguments":[{"arguments":[{"id":809,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$944","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$944","typeString":"contract Initializable"}],"id":808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:6","typeDescriptions":{}}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3418:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":805,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"3388:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1539_$","typeString":"type(library AddressUpgradeable)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1227,"src":"3388:29:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3388:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":813,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"3436:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":798,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3325:201:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":821,"nodeType":"ExpressionStatement","src":"3325:201:6"},{"expression":{"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":822,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"3536:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":825,"nodeType":"ExpressionStatement","src":"3536:16:6"},{"condition":{"id":826,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"3566:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":832,"nodeType":"IfStatement","src":"3562:65:6","trueBody":{"id":831,"nodeType":"Block","src":"3582:45:6","statements":[{"expression":{"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":827,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"3596:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":830,"nodeType":"ExpressionStatement","src":"3596:20:6"}]}},{"id":833,"nodeType":"PlaceholderStatement","src":"3636:1:6"},{"condition":{"id":834,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"3651:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":844,"nodeType":"IfStatement","src":"3647:99:6","trueBody":{"id":843,"nodeType":"Block","src":"3667:79:6","statements":[{"expression":{"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":835,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"3681:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":838,"nodeType":"ExpressionStatement","src":"3681:21:6"},{"eventCall":{"arguments":[{"hexValue":"31","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":839,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"3721:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3721:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":842,"nodeType":"EmitStatement","src":"3716:19:6"}]}}]},"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"2842:399:6","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":846,"name":"initializer","nameLocation":"3255:11:6","nodeType":"ModifierDefinition","parameters":{"id":792,"nodeType":"ParameterList","parameters":[],"src":"3266:2:6"},"src":"3246:506:6","virtual":false,"visibility":"internal"},{"body":{"id":878,"nodeType":"Block","src":"4863:255:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:6","subExpression":{"id":852,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4882:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":854,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4899:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":855,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"4914:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4873:99:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":860,"nodeType":"ExpressionStatement","src":"4873:99:6"},{"expression":{"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":861,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4982:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":862,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"4997:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":864,"nodeType":"ExpressionStatement","src":"4982:22:6"},{"expression":{"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":865,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"5014:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":868,"nodeType":"ExpressionStatement","src":"5014:20:6"},{"id":869,"nodeType":"PlaceholderStatement","src":"5044:1:6"},{"expression":{"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":870,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"5055:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":873,"nodeType":"ExpressionStatement","src":"5055:21:6"},{"eventCall":{"arguments":[{"id":875,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"5103:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":874,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"5091:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5091:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":877,"nodeType":"EmitStatement","src":"5086:25:6"}]},"documentation":{"id":847,"nodeType":"StructuredDocumentation","src":"3758:1062:6","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":879,"name":"reinitializer","nameLocation":"4834:13:6","nodeType":"ModifierDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"version","nameLocation":"4854:7:6","nodeType":"VariableDeclaration","scope":879,"src":"4848:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":848,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:6"},"src":"4825:293:6","virtual":false,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"5356:97:6","statements":[{"expression":{"arguments":[{"id":883,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"5374:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":882,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5366:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":886,"nodeType":"ExpressionStatement","src":"5366:69:6"},{"id":887,"nodeType":"PlaceholderStatement","src":"5445:1:6"}]},"documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"5124:199:6","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":889,"name":"onlyInitializing","nameLocation":"5337:16:6","nodeType":"ModifierDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"5353:2:6"},"src":"5328:125:6","virtual":false,"visibility":"internal"},{"body":{"id":924,"nodeType":"Block","src":"5988:231:6","statements":[{"expression":{"arguments":[{"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:6","subExpression":{"id":894,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"6007:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":893,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5998:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":898,"nodeType":"ExpressionStatement","src":"5998:66:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":899,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"6078:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":901,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":900,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6094:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6094:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":923,"nodeType":"IfStatement","src":"6074:139:6","trueBody":{"id":922,"nodeType":"Block","src":"6111:102:6","statements":[{"expression":{"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":906,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"6125:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":908,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":907,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6140:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6140:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":913,"nodeType":"ExpressionStatement","src":"6125:30:6"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":916,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":915,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6186:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6186:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":914,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"6174:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":921,"nodeType":"EmitStatement","src":"6169:33:6"}]}}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"5459:475:6","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":925,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:6","nodeType":"FunctionDefinition","parameters":{"id":891,"nodeType":"ParameterList","parameters":[],"src":"5968:2:6"},"returnParameters":{"id":892,"nodeType":"ParameterList","parameters":[],"src":"5988:0:6"},"scope":944,"src":"5939:280:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":933,"nodeType":"Block","src":"6393:36:6","statements":[{"expression":{"id":931,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"6410:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":930,"id":932,"nodeType":"Return","src":"6403:19:6"}]},"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"6225:99:6","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":934,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:6","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[],"src":"6360:2:6"},"returnParameters":{"id":930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":934,"src":"6386:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":928,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:6"},"scope":944,"src":"6329:100:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":942,"nodeType":"Block","src":"6601:37:6","statements":[{"expression":{"id":940,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"6618:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":939,"id":941,"nodeType":"Return","src":"6611:20:6"}]},"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"6435:105:6","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":943,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:6","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"6569:2:6"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":943,"src":"6595:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":937,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:6"},"scope":944,"src":"6545:93:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":945,"src":"2394:4246:6","usedErrors":[]}],"src":"113:6528:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1539],"ERC1967UpgradeUpgradeable":[765],"IBeaconUpgradeable":[775],"IERC1822ProxiableUpgradeable":[440],"IERC1967Upgradeable":[430],"Initializable":[944],"StorageSlotUpgradeable":[1700],"UUPSUpgradeable":[1081]},"id":1082,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":946,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":441,"src":"140:56:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":766,"src":"197:50:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":945,"src":"248:50:7","symbolAliases":[{"foreign":{"id":949,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"256:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":952,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"986:13:7"},"id":953,"nodeType":"InheritanceSpecifier","src":"986:13:7"},{"baseName":{"id":954,"name":"IERC1822ProxiableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":440,"src":"1001:28:7"},"id":955,"nodeType":"InheritanceSpecifier","src":"1001:28:7"},{"baseName":{"id":956,"name":"ERC1967UpgradeUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":765,"src":"1031:25:7"},"id":957,"nodeType":"InheritanceSpecifier","src":"1031:25:7"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"300:648:7","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1081,"linearizedBaseContracts":[1081,765,430,440,944],"name":"UUPSUpgradeable","nameLocation":"967:15:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":958,"nodeType":"StructuredDocumentation","src":"1063:87:7","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":964,"mutability":"immutable","name":"__self","nameLocation":"1181:6:7","nodeType":"VariableDeclaration","scope":1081,"src":"1155:48:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":959,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":962,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1198:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1081","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1081","typeString":"contract UUPSUpgradeable"}],"id":961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1190:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":960,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:7","typeDescriptions":{}}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1190:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":986,"nodeType":"Block","src":"1729:205:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":970,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1755:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1081","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1081","typeString":"contract UUPSUpgradeable"}],"id":969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1747:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:7","typeDescriptions":{}}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1747:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":972,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"1764:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1747:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1772:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":967,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1739:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1739:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":976,"nodeType":"ExpressionStatement","src":"1739:80:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":978,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"1837:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1837:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":980,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"1861:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1837:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1869:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":977,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1829:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1829:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":984,"nodeType":"ExpressionStatement","src":"1829:87:7"},{"id":985,"nodeType":"PlaceholderStatement","src":"1926:1:7"}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"1210:493:7","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":987,"name":"onlyProxy","nameLocation":"1717:9:7","nodeType":"ModifierDefinition","parameters":{"id":966,"nodeType":"ParameterList","parameters":[],"src":"1726:2:7"},"src":"1708:226:7","virtual":false,"visibility":"internal"},{"body":{"id":1001,"nodeType":"Block","src":"2164:120:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":993,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2190:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1081","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1081","typeString":"contract UUPSUpgradeable"}],"id":992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2182:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"2182:7:7","typeDescriptions":{}}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2182:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":995,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"2199:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2182:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2207:58:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2174:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2174:92:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":999,"nodeType":"ExpressionStatement","src":"2174:92:7"},{"id":1000,"nodeType":"PlaceholderStatement","src":"2276:1:7"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"1940:195:7","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1002,"name":"notDelegated","nameLocation":"2149:12:7","nodeType":"ModifierDefinition","parameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"2161:2:7"},"src":"2140:144:7","virtual":false,"visibility":"internal"},{"body":{"id":1007,"nodeType":"Block","src":"2350:7:7","statements":[]},"id":1008,"implemented":true,"kind":"function","modifiers":[{"id":1005,"kind":"modifierInvocation","modifierName":{"id":1004,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"2333:16:7"},"nodeType":"ModifierInvocation","src":"2333:16:7"}],"name":"__UUPSUpgradeable_init","nameLocation":"2299:22:7","nodeType":"FunctionDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[],"src":"2321:2:7"},"returnParameters":{"id":1006,"nodeType":"ParameterList","parameters":[],"src":"2350:0:7"},"scope":1081,"src":"2290:67:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1013,"nodeType":"Block","src":"2433:7:7","statements":[]},"id":1014,"implemented":true,"kind":"function","modifiers":[{"id":1011,"kind":"modifierInvocation","modifierName":{"id":1010,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"2416:16:7"},"nodeType":"ModifierInvocation","src":"2416:16:7"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"2372:32:7","nodeType":"FunctionDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"2404:2:7"},"returnParameters":{"id":1012,"nodeType":"ParameterList","parameters":[],"src":"2433:0:7"},"scope":1081,"src":"2363:77:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[439],"body":{"id":1025,"nodeType":"Block","src":"3114:44:7","statements":[{"expression":{"id":1023,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"3131:20:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1022,"id":1024,"nodeType":"Return","src":"3124:27:7"}]},"documentation":{"id":1015,"nodeType":"StructuredDocumentation","src":"2445:577:7","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1026,"implemented":true,"kind":"function","modifiers":[{"id":1019,"kind":"modifierInvocation","modifierName":{"id":1018,"name":"notDelegated","nodeType":"IdentifierPath","referencedDeclaration":1002,"src":"3083:12:7"},"nodeType":"ModifierInvocation","src":"3083:12:7"}],"name":"proxiableUUID","nameLocation":"3036:13:7","nodeType":"FunctionDefinition","overrides":{"id":1017,"nodeType":"OverrideSpecifier","overrides":[],"src":"3074:8:7"},"parameters":{"id":1016,"nodeType":"ParameterList","parameters":[],"src":"3049:2:7"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1026,"src":"3105:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3105:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3104:9:7"},"scope":1081,"src":"3027:131:7","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1047,"nodeType":"Block","src":"3479:124:7","statements":[{"expression":{"arguments":[{"id":1035,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3507:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1034,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"3489:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3489:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1037,"nodeType":"ExpressionStatement","src":"3489:36:7"},{"expression":{"arguments":[{"id":1039,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3557:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3586:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3576:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1040,"name":"bytes","nodeType":"ElementaryTypeName","src":"3580:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3576:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3590:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1038,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"3535:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3535:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1046,"nodeType":"ExpressionStatement","src":"3535:61:7"}]},"documentation":{"id":1027,"nodeType":"StructuredDocumentation","src":"3164:239:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":1048,"implemented":true,"kind":"function","modifiers":[{"id":1032,"kind":"modifierInvocation","modifierName":{"id":1031,"name":"onlyProxy","nodeType":"IdentifierPath","referencedDeclaration":987,"src":"3469:9:7"},"nodeType":"ModifierInvocation","src":"3469:9:7"}],"name":"upgradeTo","nameLocation":"3417:9:7","nodeType":"FunctionDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"newImplementation","nameLocation":"3435:17:7","nodeType":"VariableDeclaration","scope":1048,"src":"3427:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"3427:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3426:27:7"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[],"src":"3479:0:7"},"scope":1081,"src":"3408:195:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1068,"nodeType":"Block","src":"4027:115:7","statements":[{"expression":{"arguments":[{"id":1059,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"4055:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1058,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"4037:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1061,"nodeType":"ExpressionStatement","src":"4037:36:7"},{"expression":{"arguments":[{"id":1063,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"4105:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1064,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4124:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4130:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1062,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4083:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4083:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1067,"nodeType":"ExpressionStatement","src":"4083:52:7"}]},"documentation":{"id":1049,"nodeType":"StructuredDocumentation","src":"3609:308:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1069,"implemented":true,"kind":"function","modifiers":[{"id":1056,"kind":"modifierInvocation","modifierName":{"id":1055,"name":"onlyProxy","nodeType":"IdentifierPath","referencedDeclaration":987,"src":"4017:9:7"},"nodeType":"ModifierInvocation","src":"4017:9:7"}],"name":"upgradeToAndCall","nameLocation":"3931:16:7","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"newImplementation","nameLocation":"3956:17:7","nodeType":"VariableDeclaration","scope":1069,"src":"3948:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1050,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"data","nameLocation":"3988:4:7","nodeType":"VariableDeclaration","scope":1069,"src":"3975:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1052,"name":"bytes","nodeType":"ElementaryTypeName","src":"3975:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3947:46:7"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[],"src":"4027:0:7"},"scope":1081,"src":"3922:220:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"4148:397:7","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1075,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4559:17:7","nodeType":"FunctionDefinition","parameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"mutability":"mutable","name":"newImplementation","nameLocation":"4585:17:7","nodeType":"VariableDeclaration","scope":1075,"src":"4577:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1071,"name":"address","nodeType":"ElementaryTypeName","src":"4577:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4576:27:7"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[],"src":"4620:0:7"},"scope":1081,"src":"4550:71:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"4627:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1080,"mutability":"mutable","name":"__gap","nameLocation":"4906:5:7","nodeType":"VariableDeclaration","scope":1081,"src":"4886:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"4886:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1079,"length":{"hexValue":"3530","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4894:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4886:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1082,"src":"949:3965:7","usedErrors":[]}],"src":"115:4800:7"},"id":7},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1590],"Initializable":[944],"PausableUpgradeable":[1209]},"id":1210,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1083,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":1084,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1210,"sourceUnit":1591,"src":"130:41:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1086,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1210,"sourceUnit":945,"src":"172:63:8","symbolAliases":[{"foreign":{"id":1085,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"180:13:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1088,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"718:13:8"},"id":1089,"nodeType":"InheritanceSpecifier","src":"718:13:8"},{"baseName":{"id":1090,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1590,"src":"733:18:8"},"id":1091,"nodeType":"InheritanceSpecifier","src":"733:18:8"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"237:439:8","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":1209,"linearizedBaseContracts":[1209,1590,944],"name":"PausableUpgradeable","nameLocation":"695:19:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"758:73:8","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":1096,"name":"Paused","nameLocation":"842:6:8","nodeType":"EventDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"857:7:8","nodeType":"VariableDeclaration","scope":1096,"src":"849:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"849:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"848:17:8"},"src":"836:30:8"},{"anonymous":false,"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"872:70:8","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":1101,"name":"Unpaused","nameLocation":"953:8:8","nodeType":"EventDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"970:7:8","nodeType":"VariableDeclaration","scope":1101,"src":"962:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"962:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"961:17:8"},"src":"947:32:8"},{"constant":false,"id":1103,"mutability":"mutable","name":"_paused","nameLocation":"998:7:8","nodeType":"VariableDeclaration","scope":1209,"src":"985:20:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1102,"name":"bool","nodeType":"ElementaryTypeName","src":"985:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":1112,"nodeType":"Block","src":"1137:44:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1109,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"1147:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1147:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1111,"nodeType":"ExpressionStatement","src":"1147:27:8"}]},"documentation":{"id":1104,"nodeType":"StructuredDocumentation","src":"1012:67:8","text":" @dev Initializes the contract in unpaused state."},"id":1113,"implemented":true,"kind":"function","modifiers":[{"id":1107,"kind":"modifierInvocation","modifierName":{"id":1106,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"1120:16:8"},"nodeType":"ModifierInvocation","src":"1120:16:8"}],"name":"__Pausable_init","nameLocation":"1093:15:8","nodeType":"FunctionDefinition","parameters":{"id":1105,"nodeType":"ParameterList","parameters":[],"src":"1108:2:8"},"returnParameters":{"id":1108,"nodeType":"ParameterList","parameters":[],"src":"1137:0:8"},"scope":1209,"src":"1084:97:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1122,"nodeType":"Block","src":"1250:32:8","statements":[{"expression":{"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1118,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"1260:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1270:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1260:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1121,"nodeType":"ExpressionStatement","src":"1260:15:8"}]},"id":1123,"implemented":true,"kind":"function","modifiers":[{"id":1116,"kind":"modifierInvocation","modifierName":{"id":1115,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"1233:16:8"},"nodeType":"ModifierInvocation","src":"1233:16:8"}],"name":"__Pausable_init_unchained","nameLocation":"1196:25:8","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[],"src":"1221:2:8"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"1250:0:8"},"scope":1209,"src":"1187:95:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1130,"nodeType":"Block","src":"1493:47:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1126,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"1503:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1503:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"1503:19:8"},{"id":1129,"nodeType":"PlaceholderStatement","src":"1532:1:8"}]},"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"1288:175:8","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":1131,"name":"whenNotPaused","nameLocation":"1477:13:8","nodeType":"ModifierDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[],"src":"1490:2:8"},"src":"1468:72:8","virtual":false,"visibility":"internal"},{"body":{"id":1138,"nodeType":"Block","src":"1740:44:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1134,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"1750:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1750:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1136,"nodeType":"ExpressionStatement","src":"1750:16:8"},{"id":1137,"nodeType":"PlaceholderStatement","src":"1776:1:8"}]},"documentation":{"id":1132,"nodeType":"StructuredDocumentation","src":"1546:167:8","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":1139,"name":"whenPaused","nameLocation":"1727:10:8","nodeType":"ModifierDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"1737:2:8"},"src":"1718:66:8","virtual":false,"visibility":"internal"},{"body":{"id":1147,"nodeType":"Block","src":"1932:31:8","statements":[{"expression":{"id":1145,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"1949:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1144,"id":1146,"nodeType":"Return","src":"1942:14:8"}]},"documentation":{"id":1140,"nodeType":"StructuredDocumentation","src":"1790:84:8","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":1148,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1888:6:8","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[],"src":"1894:2:8"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1148,"src":"1926:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1142,"name":"bool","nodeType":"ElementaryTypeName","src":"1926:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1925:6:8"},"scope":1209,"src":"1879:84:8","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1159,"nodeType":"Block","src":"2082:55:8","statements":[{"expression":{"arguments":[{"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2100:9:8","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1153,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2101:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2101:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2111:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":1152,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2092:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2092:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1158,"nodeType":"ExpressionStatement","src":"2092:38:8"}]},"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"1969:57:8","text":" @dev Throws if the contract is paused."},"id":1160,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2040:17:8","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[],"src":"2057:2:8"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[],"src":"2082:0:8"},"scope":1209,"src":"2031:106:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1170,"nodeType":"Block","src":"2257:58:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1165,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2275:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2275:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2285:22:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":1164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2267:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2267:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1169,"nodeType":"ExpressionStatement","src":"2267:41:8"}]},"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"2143:61:8","text":" @dev Throws if the contract is not paused."},"id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2218:14:8","nodeType":"FunctionDefinition","parameters":{"id":1162,"nodeType":"ParameterList","parameters":[],"src":"2232:2:8"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[],"src":"2257:0:8"},"scope":1209,"src":"2209:106:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1186,"nodeType":"Block","src":"2499:66:8","statements":[{"expression":{"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1177,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"2509:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2519:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2509:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1180,"nodeType":"ExpressionStatement","src":"2509:14:8"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1182,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2545:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2545:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1181,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"2538:6:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2538:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1185,"nodeType":"EmitStatement","src":"2533:25:8"}]},"documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"2321:124:8","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":1187,"implemented":true,"kind":"function","modifiers":[{"id":1175,"kind":"modifierInvocation","modifierName":{"id":1174,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"2485:13:8"},"nodeType":"ModifierInvocation","src":"2485:13:8"}],"name":"_pause","nameLocation":"2459:6:8","nodeType":"FunctionDefinition","parameters":{"id":1173,"nodeType":"ParameterList","parameters":[],"src":"2465:2:8"},"returnParameters":{"id":1176,"nodeType":"ParameterList","parameters":[],"src":"2499:0:8"},"scope":1209,"src":"2450:115:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1202,"nodeType":"Block","src":"2745:69:8","statements":[{"expression":{"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1193,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"2755:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2765:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2755:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1196,"nodeType":"ExpressionStatement","src":"2755:15:8"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1198,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2794:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2794:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1197,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2785:8:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2785:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1201,"nodeType":"EmitStatement","src":"2780:27:8"}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"2571:121:8","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":1203,"implemented":true,"kind":"function","modifiers":[{"id":1191,"kind":"modifierInvocation","modifierName":{"id":1190,"name":"whenPaused","nodeType":"IdentifierPath","referencedDeclaration":1139,"src":"2734:10:8"},"nodeType":"ModifierInvocation","src":"2734:10:8"}],"name":"_unpause","nameLocation":"2706:8:8","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[],"src":"2714:2:8"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[],"src":"2745:0:8"},"scope":1209,"src":"2697:117:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"2820:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1208,"mutability":"mutable","name":"__gap","nameLocation":"3099:5:8","nodeType":"VariableDeclaration","scope":1209,"src":"3079:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"3079:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1207,"length":{"hexValue":"3439","id":1206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3087:2:8","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3079:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1210,"src":"677:2430:8","usedErrors":[]}],"src":"105:3003:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1539]},"id":1540,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1211,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1212,"nodeType":"StructuredDocumentation","src":"126:67:9","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1539,"linearizedBaseContracts":[1539],"name":"AddressUpgradeable","nameLocation":"202:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1226,"nodeType":"Block","src":"1489:254:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"1713:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1713:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1713:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1219,"id":1225,"nodeType":"Return","src":"1706:30:9"}]},"documentation":{"id":1213,"nodeType":"StructuredDocumentation","src":"227:1191:9","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1227,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:9","nodeType":"FunctionDefinition","parameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"account","nameLocation":"1451:7:9","nodeType":"VariableDeclaration","scope":1227,"src":"1443:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:9"},"returnParameters":{"id":1219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1227,"src":"1483:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1217,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:9"},"scope":1539,"src":"1423:320:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1260,"nodeType":"Block","src":"2729:241:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1238,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1539","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1539","typeString":"library AddressUpgradeable"}],"id":1237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1236,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:9","typeDescriptions":{}}},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2747:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2747:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1241,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"2772:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1235,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2739:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1245,"nodeType":"ExpressionStatement","src":"2739:73:9"},{"assignments":[1247,null],"declarations":[{"constant":false,"id":1247,"mutability":"mutable","name":"success","nameLocation":"2829:7:9","nodeType":"VariableDeclaration","scope":1260,"src":"2824:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1246,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1254,"initialValue":{"arguments":[{"hexValue":"","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1248,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"2842:9:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2842:14:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1250,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"2864:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2842:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:9"},{"expression":{"arguments":[{"id":1256,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"2893:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1255,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2885:78:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1259,"nodeType":"ExpressionStatement","src":"2885:78:9"}]},"documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"1749:904:9","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:9","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:9","nodeType":"VariableDeclaration","scope":1261,"src":"2677:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"amount","nameLocation":"2712:6:9","nodeType":"VariableDeclaration","scope":1261,"src":"2704:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:9"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[],"src":"2729:0:9"},"scope":1539,"src":"2658:312:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1278,"nodeType":"Block","src":"3801:96:9","statements":[{"expression":{"arguments":[{"id":1272,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"3840:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1273,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"3848:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1271,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1319,1363],"referencedDeclaration":1363,"src":"3818:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3818:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1270,"id":1277,"nodeType":"Return","src":"3811:79:9"}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"2976:731:9","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:9","nodeType":"FunctionDefinition","parameters":{"id":1267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"target","nameLocation":"3742:6:9","nodeType":"VariableDeclaration","scope":1279,"src":"3734:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1266,"mutability":"mutable","name":"data","nameLocation":"3763:4:9","nodeType":"VariableDeclaration","scope":1279,"src":"3750:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1265,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:9"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1279,"src":"3787:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1268,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:9"},"scope":1539,"src":"3712:185:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1298,"nodeType":"Block","src":"4266:76:9","statements":[{"expression":{"arguments":[{"id":1292,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"4305:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1293,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"4313:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1295,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"4322:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1291,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1319,1363],"referencedDeclaration":1363,"src":"4283:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4283:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1290,"id":1297,"nodeType":"Return","src":"4276:59:9"}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"3903:211:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1299,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:9","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"target","nameLocation":"4158:6:9","nodeType":"VariableDeclaration","scope":1299,"src":"4150:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"data","nameLocation":"4187:4:9","nodeType":"VariableDeclaration","scope":1299,"src":"4174:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1283,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:9","nodeType":"VariableDeclaration","scope":1299,"src":"4201:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1285,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:9"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1299,"src":"4252:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1288,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:9"},"scope":1539,"src":"4119:223:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1318,"nodeType":"Block","src":"4817:111:9","statements":[{"expression":{"arguments":[{"id":1312,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"4856:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1313,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"4864:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"4870:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1311,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1319,1363],"referencedDeclaration":1363,"src":"4834:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4834:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1310,"id":1317,"nodeType":"Return","src":"4827:94:9"}]},"documentation":{"id":1300,"nodeType":"StructuredDocumentation","src":"4348:351:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1319,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:9","nodeType":"FunctionDefinition","parameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1302,"mutability":"mutable","name":"target","nameLocation":"4743:6:9","nodeType":"VariableDeclaration","scope":1319,"src":"4735:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1301,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1304,"mutability":"mutable","name":"data","nameLocation":"4764:4:9","nodeType":"VariableDeclaration","scope":1319,"src":"4751:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1303,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1306,"mutability":"mutable","name":"value","nameLocation":"4778:5:9","nodeType":"VariableDeclaration","scope":1319,"src":"4770:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1305,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:9"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1319,"src":"4803:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1308,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:9"},"scope":1539,"src":"4704:224:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1362,"nodeType":"Block","src":"5355:267:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1336,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1539","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1539","typeString":"library AddressUpgradeable"}],"id":1335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:9","typeDescriptions":{}}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5373:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5373:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"5398:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1333,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5365:81:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1343,"nodeType":"ExpressionStatement","src":"5365:81:9"},{"assignments":[1345,1347],"declarations":[{"constant":false,"id":1345,"mutability":"mutable","name":"success","nameLocation":"5462:7:9","nodeType":"VariableDeclaration","scope":1362,"src":"5457:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1344,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1347,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:9","nodeType":"VariableDeclaration","scope":1362,"src":"5471:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1346,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1354,"initialValue":{"arguments":[{"id":1352,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"5524:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1348,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"5498:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5498:11:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"5517:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5498:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:9"},{"expression":{"arguments":[{"id":1356,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"5573:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1357,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"5581:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1358,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"5590:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1359,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"5602:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1355,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"5546:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5546:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1332,"id":1361,"nodeType":"Return","src":"5539:76:9"}]},"documentation":{"id":1320,"nodeType":"StructuredDocumentation","src":"4934:237:9","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1363,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:9","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"target","nameLocation":"5224:6:9","nodeType":"VariableDeclaration","scope":1363,"src":"5216:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"data","nameLocation":"5253:4:9","nodeType":"VariableDeclaration","scope":1363,"src":"5240:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1323,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"value","nameLocation":"5275:5:9","nodeType":"VariableDeclaration","scope":1363,"src":"5267:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1325,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:9","nodeType":"VariableDeclaration","scope":1363,"src":"5290:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1327,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:9"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"5341:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1330,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:9"},"scope":1539,"src":"5176:446:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1379,"nodeType":"Block","src":"5899:97:9","statements":[{"expression":{"arguments":[{"id":1374,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"5935:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1375,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"5943:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1373,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1380,1409],"referencedDeclaration":1409,"src":"5916:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5916:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1372,"id":1378,"nodeType":"Return","src":"5909:80:9"}]},"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"5628:166:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1380,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:9","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"target","nameLocation":"5835:6:9","nodeType":"VariableDeclaration","scope":1380,"src":"5827:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"data","nameLocation":"5856:4:9","nodeType":"VariableDeclaration","scope":1380,"src":"5843:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1367,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:9"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1380,"src":"5885:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1370,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:9"},"scope":1539,"src":"5799:197:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1408,"nodeType":"Block","src":"6338:168:9","statements":[{"assignments":[1393,1395],"declarations":[{"constant":false,"id":1393,"mutability":"mutable","name":"success","nameLocation":"6354:7:9","nodeType":"VariableDeclaration","scope":1408,"src":"6349:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1392,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1395,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:9","nodeType":"VariableDeclaration","scope":1408,"src":"6363:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1394,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1400,"initialValue":{"arguments":[{"id":1398,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"6408:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1396,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"6390:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:9","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6390:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:9"},{"expression":{"arguments":[{"id":1402,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"6457:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1403,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"6465:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1404,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"6474:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1405,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"6486:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1401,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"6430:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6430:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1391,"id":1407,"nodeType":"Return","src":"6423:76:9"}]},"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"6002:173:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1409,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:9","nodeType":"FunctionDefinition","parameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"target","nameLocation":"6225:6:9","nodeType":"VariableDeclaration","scope":1409,"src":"6217:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"data","nameLocation":"6254:4:9","nodeType":"VariableDeclaration","scope":1409,"src":"6241:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1384,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:9","nodeType":"VariableDeclaration","scope":1409,"src":"6268:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1386,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:9"},"returnParameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1409,"src":"6324:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1389,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:9"},"scope":1539,"src":"6180:326:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1425,"nodeType":"Block","src":"6782:101:9","statements":[{"expression":{"arguments":[{"id":1420,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"6820:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1421,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"6828:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1419,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1426,1455],"referencedDeclaration":1455,"src":"6799:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6799:77:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1418,"id":1424,"nodeType":"Return","src":"6792:84:9"}]},"documentation":{"id":1410,"nodeType":"StructuredDocumentation","src":"6512:168:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1426,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:9","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"target","nameLocation":"6723:6:9","nodeType":"VariableDeclaration","scope":1426,"src":"6715:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1411,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"data","nameLocation":"6744:4:9","nodeType":"VariableDeclaration","scope":1426,"src":"6731:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1413,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:9"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1426,"src":"6768:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1416,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:9"},"scope":1539,"src":"6685:198:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1454,"nodeType":"Block","src":"7224:170:9","statements":[{"assignments":[1439,1441],"declarations":[{"constant":false,"id":1439,"mutability":"mutable","name":"success","nameLocation":"7240:7:9","nodeType":"VariableDeclaration","scope":1454,"src":"7235:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1438,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1441,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:9","nodeType":"VariableDeclaration","scope":1454,"src":"7249:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1440,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1446,"initialValue":{"arguments":[{"id":1444,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"7296:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1442,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"7276:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:9","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7276:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:9"},{"expression":{"arguments":[{"id":1448,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"7345:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1449,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"7353:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1450,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"7362:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1451,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"7374:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1447,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"7318:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7318:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1437,"id":1453,"nodeType":"Return","src":"7311:76:9"}]},"documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"6889:175:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1455,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:9","nodeType":"FunctionDefinition","parameters":{"id":1434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1429,"mutability":"mutable","name":"target","nameLocation":"7116:6:9","nodeType":"VariableDeclaration","scope":1455,"src":"7108:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1428,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1431,"mutability":"mutable","name":"data","nameLocation":"7145:4:9","nodeType":"VariableDeclaration","scope":1455,"src":"7132:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1430,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:9","nodeType":"VariableDeclaration","scope":1455,"src":"7159:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1432,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:9"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1455,"src":"7210:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1435,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:9"},"scope":1539,"src":"7069:325:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1493,"nodeType":"Block","src":"7876:434:9","statements":[{"condition":{"id":1469,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"7890:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1491,"nodeType":"Block","src":"8246:58:9","statements":[{"expression":{"arguments":[{"id":1487,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"8268:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1488,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"8280:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1486,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"8260:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8260:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1490,"nodeType":"ExpressionStatement","src":"8260:33:9"}]},"id":1492,"nodeType":"IfStatement","src":"7886:418:9","trueBody":{"id":1485,"nodeType":"Block","src":"7899:341:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1470,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"7917:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7917:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1482,"nodeType":"IfStatement","src":"7913:286:9","trueBody":{"id":1481,"nodeType":"Block","src":"7941:258:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1476,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"8143:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1475,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"8132:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8132:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1474,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8124:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1480,"nodeType":"ExpressionStatement","src":"8124:60:9"}]}},{"expression":{"id":1483,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"8219:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1468,"id":1484,"nodeType":"Return","src":"8212:17:9"}]}}]},"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"7400:277:9","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1494,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:9","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"target","nameLocation":"7735:6:9","nodeType":"VariableDeclaration","scope":1494,"src":"7727:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"success","nameLocation":"7756:7:9","nodeType":"VariableDeclaration","scope":1494,"src":"7751:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1459,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:9","nodeType":"VariableDeclaration","scope":1494,"src":"7773:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1461,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:9","nodeType":"VariableDeclaration","scope":1494,"src":"7806:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1463,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:9"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1494,"src":"7862:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1466,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:9"},"scope":1539,"src":"7682:628:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1517,"nodeType":"Block","src":"8691:135:9","statements":[{"condition":{"id":1506,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"8705:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1515,"nodeType":"Block","src":"8762:58:9","statements":[{"expression":{"arguments":[{"id":1511,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"8784:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1512,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"8796:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1510,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"8776:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8776:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1514,"nodeType":"ExpressionStatement","src":"8776:33:9"}]},"id":1516,"nodeType":"IfStatement","src":"8701:119:9","trueBody":{"id":1509,"nodeType":"Block","src":"8714:42:9","statements":[{"expression":{"id":1507,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"8735:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1505,"id":1508,"nodeType":"Return","src":"8728:17:9"}]}}]},"documentation":{"id":1495,"nodeType":"StructuredDocumentation","src":"8316:210:9","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1518,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:9","nodeType":"FunctionDefinition","parameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1497,"mutability":"mutable","name":"success","nameLocation":"8571:7:9","nodeType":"VariableDeclaration","scope":1518,"src":"8566:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1496,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1499,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:9","nodeType":"VariableDeclaration","scope":1518,"src":"8588:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1498,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1501,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:9","nodeType":"VariableDeclaration","scope":1518,"src":"8621:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1500,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:9"},"returnParameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"8677:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1503,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:9"},"scope":1539,"src":"8531:295:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1537,"nodeType":"Block","src":"8915:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1525,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"8991:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8991:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1535,"nodeType":"Block","src":"9321:45:9","statements":[{"expression":{"arguments":[{"id":1532,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"9342:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1531,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9335:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1534,"nodeType":"ExpressionStatement","src":"9335:20:9"}]},"id":1536,"nodeType":"IfStatement","src":"8987:379:9","trueBody":{"id":1530,"nodeType":"Block","src":"9014:301:9","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:9","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:9","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:9"},"nodeType":"YulFunctionCall","src":"9213:17:9"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:9","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:9"},"nodeType":"YulFunctionCall","src":"9254:19:9"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:9"},"nodeType":"YulFunctionCall","src":"9247:44:9"},"nodeType":"YulExpressionStatement","src":"9247:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1520,"isOffset":false,"isSlot":false,"src":"9219:10:9","valueSize":1},{"declaration":1520,"isOffset":false,"isSlot":false,"src":"9262:10:9","valueSize":1}],"id":1529,"nodeType":"InlineAssembly","src":"9163:142:9"}]}}]},"id":1538,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:9","nodeType":"FunctionDefinition","parameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:9","nodeType":"VariableDeclaration","scope":1538,"src":"8849:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1519,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1522,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:9","nodeType":"VariableDeclaration","scope":1538,"src":"8874:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1521,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:9"},"returnParameters":{"id":1524,"nodeType":"ParameterList","parameters":[],"src":"8915:0:9"},"scope":1539,"src":"8832:540:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1540,"src":"194:9180:9","usedErrors":[]}],"src":"101:9274:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1590],"Initializable":[944]},"id":1591,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1541,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1543,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1591,"sourceUnit":945,"src":"125:63:10","symbolAliases":[{"foreign":{"id":1542,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"133:13:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1545,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"727:13:10"},"id":1546,"nodeType":"InheritanceSpecifier","src":"727:13:10"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"190:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1590,"linearizedBaseContracts":[1590,944],"name":"ContextUpgradeable","nameLocation":"705:18:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1551,"nodeType":"Block","src":"799:7:10","statements":[]},"id":1552,"implemented":true,"kind":"function","modifiers":[{"id":1549,"kind":"modifierInvocation","modifierName":{"id":1548,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"782:16:10"},"nodeType":"ModifierInvocation","src":"782:16:10"}],"name":"__Context_init","nameLocation":"756:14:10","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[],"src":"770:2:10"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[],"src":"799:0:10"},"scope":1590,"src":"747:59:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1557,"nodeType":"Block","src":"874:7:10","statements":[]},"id":1558,"implemented":true,"kind":"function","modifiers":[{"id":1555,"kind":"modifierInvocation","modifierName":{"id":1554,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"857:16:10"},"nodeType":"ModifierInvocation","src":"857:16:10"}],"name":"__Context_init_unchained","nameLocation":"821:24:10","nodeType":"FunctionDefinition","parameters":{"id":1553,"nodeType":"ParameterList","parameters":[],"src":"845:2:10"},"returnParameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"874:0:10"},"scope":1590,"src":"812:69:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1566,"nodeType":"Block","src":"948:34:10","statements":[{"expression":{"expression":{"id":1563,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"965:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"965:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1562,"id":1565,"nodeType":"Return","src":"958:17:10"}]},"id":1567,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"895:10:10","nodeType":"FunctionDefinition","parameters":{"id":1559,"nodeType":"ParameterList","parameters":[],"src":"905:2:10"},"returnParameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1567,"src":"939:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1560,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"938:9:10"},"scope":1590,"src":"886:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1575,"nodeType":"Block","src":"1055:32:10","statements":[{"expression":{"expression":{"id":1572,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"1072:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1571,"id":1574,"nodeType":"Return","src":"1065:15:10"}]},"id":1576,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"997:8:10","nodeType":"FunctionDefinition","parameters":{"id":1568,"nodeType":"ParameterList","parameters":[],"src":"1005:2:10"},"returnParameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1576,"src":"1039:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1569,"name":"bytes","nodeType":"ElementaryTypeName","src":"1039:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:16:10"},"scope":1590,"src":"988:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1583,"nodeType":"Block","src":"1165:25:10","statements":[{"expression":{"hexValue":"30","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1580,"id":1582,"nodeType":"Return","src":"1175:8:10"}]},"id":1584,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1102:20:10","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"1122:2:10"},"returnParameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1584,"src":"1156:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1155:9:10"},"scope":1590,"src":"1093:97:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1585,"nodeType":"StructuredDocumentation","src":"1196:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1589,"mutability":"mutable","name":"__gap","nameLocation":"1475:5:10","nodeType":"VariableDeclaration","scope":1590,"src":"1455:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1588,"length":{"hexValue":"3530","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:2:10","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1455:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1591,"src":"687:796:10","usedErrors":[]}],"src":"101:1383:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[1700]},"id":1701,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1592,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"218:1201:11","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1700,"linearizedBaseContracts":[1700],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":1596,"members":[{"constant":false,"id":1595,"mutability":"mutable","name":"value","nameLocation":"1494:5:11","nodeType":"VariableDeclaration","scope":1596,"src":"1486:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1594,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:11","nodeType":"StructDefinition","scope":1700,"src":"1457:49:11","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":1599,"members":[{"constant":false,"id":1598,"mutability":"mutable","name":"value","nameLocation":"1546:5:11","nodeType":"VariableDeclaration","scope":1599,"src":"1541:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1597,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:11","nodeType":"StructDefinition","scope":1700,"src":"1512:46:11","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":1602,"members":[{"constant":false,"id":1601,"mutability":"mutable","name":"value","nameLocation":"1601:5:11","nodeType":"VariableDeclaration","scope":1602,"src":"1593:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:11","nodeType":"StructDefinition","scope":1700,"src":"1564:49:11","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":1605,"members":[{"constant":false,"id":1604,"mutability":"mutable","name":"value","nameLocation":"1656:5:11","nodeType":"VariableDeclaration","scope":1605,"src":"1648:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:11","nodeType":"StructDefinition","scope":1700,"src":"1619:49:11","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":1608,"members":[{"constant":false,"id":1607,"mutability":"mutable","name":"value","nameLocation":"1709:5:11","nodeType":"VariableDeclaration","scope":1608,"src":"1702:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1606,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:11","nodeType":"StructDefinition","scope":1700,"src":"1674:47:11","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":1611,"members":[{"constant":false,"id":1610,"mutability":"mutable","name":"value","nameLocation":"1760:5:11","nodeType":"VariableDeclaration","scope":1611,"src":"1754:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1609,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:11","nodeType":"StructDefinition","scope":1700,"src":"1727:45:11","visibility":"public"},{"body":{"id":1621,"nodeType":"Block","src":"1954:106:11","statements":[{"AST":{"nodeType":"YulBlock","src":"2016:38:11","statements":[{"nodeType":"YulAssignment","src":"2030:14:11","value":{"name":"slot","nodeType":"YulIdentifier","src":"2040:4:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2030:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1618,"isOffset":false,"isSlot":true,"src":"2030:6:11","suffix":"slot","valueSize":1},{"declaration":1614,"isOffset":false,"isSlot":false,"src":"2040:4:11","valueSize":1}],"id":1620,"nodeType":"InlineAssembly","src":"2007:47:11"}]},"documentation":{"id":1612,"nodeType":"StructuredDocumentation","src":"1778:87:11","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1622,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:11","nodeType":"FunctionDefinition","parameters":{"id":1615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"slot","nameLocation":"1902:4:11","nodeType":"VariableDeclaration","scope":1622,"src":"1894:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:11"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"r","nameLocation":"1951:1:11","nodeType":"VariableDeclaration","scope":1622,"src":"1931:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":1617,"nodeType":"UserDefinedTypeName","pathNode":{"id":1616,"name":"AddressSlot","nodeType":"IdentifierPath","referencedDeclaration":1596,"src":"1931:11:11"},"referencedDeclaration":1596,"src":"1931:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1596_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:11"},"scope":1700,"src":"1870:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1632,"nodeType":"Block","src":"2242:106:11","statements":[{"AST":{"nodeType":"YulBlock","src":"2304:38:11","statements":[{"nodeType":"YulAssignment","src":"2318:14:11","value":{"name":"slot","nodeType":"YulIdentifier","src":"2328:4:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2318:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1629,"isOffset":false,"isSlot":true,"src":"2318:6:11","suffix":"slot","valueSize":1},{"declaration":1625,"isOffset":false,"isSlot":false,"src":"2328:4:11","valueSize":1}],"id":1631,"nodeType":"InlineAssembly","src":"2295:47:11"}]},"documentation":{"id":1623,"nodeType":"StructuredDocumentation","src":"2066:87:11","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1633,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:11","nodeType":"FunctionDefinition","parameters":{"id":1626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1625,"mutability":"mutable","name":"slot","nameLocation":"2190:4:11","nodeType":"VariableDeclaration","scope":1633,"src":"2182:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:11"},"returnParameters":{"id":1630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1629,"mutability":"mutable","name":"r","nameLocation":"2239:1:11","nodeType":"VariableDeclaration","scope":1633,"src":"2219:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1599_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":1628,"nodeType":"UserDefinedTypeName","pathNode":{"id":1627,"name":"BooleanSlot","nodeType":"IdentifierPath","referencedDeclaration":1599,"src":"2219:11:11"},"referencedDeclaration":1599,"src":"2219:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1599_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:11"},"scope":1700,"src":"2158:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1643,"nodeType":"Block","src":"2530:106:11","statements":[{"AST":{"nodeType":"YulBlock","src":"2592:38:11","statements":[{"nodeType":"YulAssignment","src":"2606:14:11","value":{"name":"slot","nodeType":"YulIdentifier","src":"2616:4:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2606:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1640,"isOffset":false,"isSlot":true,"src":"2606:6:11","suffix":"slot","valueSize":1},{"declaration":1636,"isOffset":false,"isSlot":false,"src":"2616:4:11","valueSize":1}],"id":1642,"nodeType":"InlineAssembly","src":"2583:47:11"}]},"documentation":{"id":1634,"nodeType":"StructuredDocumentation","src":"2354:87:11","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1644,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:11","nodeType":"FunctionDefinition","parameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"slot","nameLocation":"2478:4:11","nodeType":"VariableDeclaration","scope":1644,"src":"2470:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1635,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:11"},"returnParameters":{"id":1641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"r","nameLocation":"2527:1:11","nodeType":"VariableDeclaration","scope":1644,"src":"2507:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1602_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":1639,"nodeType":"UserDefinedTypeName","pathNode":{"id":1638,"name":"Bytes32Slot","nodeType":"IdentifierPath","referencedDeclaration":1602,"src":"2507:11:11"},"referencedDeclaration":1602,"src":"2507:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1602_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:11"},"scope":1700,"src":"2446:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1654,"nodeType":"Block","src":"2818:106:11","statements":[{"AST":{"nodeType":"YulBlock","src":"2880:38:11","statements":[{"nodeType":"YulAssignment","src":"2894:14:11","value":{"name":"slot","nodeType":"YulIdentifier","src":"2904:4:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2894:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1651,"isOffset":false,"isSlot":true,"src":"2894:6:11","suffix":"slot","valueSize":1},{"declaration":1647,"isOffset":false,"isSlot":false,"src":"2904:4:11","valueSize":1}],"id":1653,"nodeType":"InlineAssembly","src":"2871:47:11"}]},"documentation":{"id":1645,"nodeType":"StructuredDocumentation","src":"2642:87:11","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1655,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:11","nodeType":"FunctionDefinition","parameters":{"id":1648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1647,"mutability":"mutable","name":"slot","nameLocation":"2766:4:11","nodeType":"VariableDeclaration","scope":1655,"src":"2758:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:11"},"returnParameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"r","nameLocation":"2815:1:11","nodeType":"VariableDeclaration","scope":1655,"src":"2795:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1605_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":1650,"nodeType":"UserDefinedTypeName","pathNode":{"id":1649,"name":"Uint256Slot","nodeType":"IdentifierPath","referencedDeclaration":1605,"src":"2795:11:11"},"referencedDeclaration":1605,"src":"2795:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1605_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:11"},"scope":1700,"src":"2734:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1665,"nodeType":"Block","src":"3103:106:11","statements":[{"AST":{"nodeType":"YulBlock","src":"3165:38:11","statements":[{"nodeType":"YulAssignment","src":"3179:14:11","value":{"name":"slot","nodeType":"YulIdentifier","src":"3189:4:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3179:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1662,"isOffset":false,"isSlot":true,"src":"3179:6:11","suffix":"slot","valueSize":1},{"declaration":1658,"isOffset":false,"isSlot":false,"src":"3189:4:11","valueSize":1}],"id":1664,"nodeType":"InlineAssembly","src":"3156:47:11"}]},"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"2930:86:11","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1666,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:11","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"slot","nameLocation":"3052:4:11","nodeType":"VariableDeclaration","scope":1666,"src":"3044:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:11"},"returnParameters":{"id":1663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1662,"mutability":"mutable","name":"r","nameLocation":"3100:1:11","nodeType":"VariableDeclaration","scope":1666,"src":"3081:20:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1608_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1661,"nodeType":"UserDefinedTypeName","pathNode":{"id":1660,"name":"StringSlot","nodeType":"IdentifierPath","referencedDeclaration":1608,"src":"3081:10:11"},"referencedDeclaration":1608,"src":"3081:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1608_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:11"},"scope":1700,"src":"3021:188:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1676,"nodeType":"Block","src":"3411:112:11","statements":[{"AST":{"nodeType":"YulBlock","src":"3473:44:11","statements":[{"nodeType":"YulAssignment","src":"3487:20:11","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3497:10:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3487:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1673,"isOffset":false,"isSlot":true,"src":"3487:6:11","suffix":"slot","valueSize":1},{"declaration":1669,"isOffset":false,"isSlot":true,"src":"3497:10:11","suffix":"slot","valueSize":1}],"id":1675,"nodeType":"InlineAssembly","src":"3464:53:11"}]},"documentation":{"id":1667,"nodeType":"StructuredDocumentation","src":"3215:101:11","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1677,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:11","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"store","nameLocation":"3359:5:11","nodeType":"VariableDeclaration","scope":1677,"src":"3344:20:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1668,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:11"},"returnParameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1673,"mutability":"mutable","name":"r","nameLocation":"3408:1:11","nodeType":"VariableDeclaration","scope":1677,"src":"3389:20:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1608_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1672,"nodeType":"UserDefinedTypeName","pathNode":{"id":1671,"name":"StringSlot","nodeType":"IdentifierPath","referencedDeclaration":1608,"src":"3389:10:11"},"referencedDeclaration":1608,"src":"3389:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1608_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:11"},"scope":1700,"src":"3321:202:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1687,"nodeType":"Block","src":"3699:106:11","statements":[{"AST":{"nodeType":"YulBlock","src":"3761:38:11","statements":[{"nodeType":"YulAssignment","src":"3775:14:11","value":{"name":"slot","nodeType":"YulIdentifier","src":"3785:4:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3775:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1684,"isOffset":false,"isSlot":true,"src":"3775:6:11","suffix":"slot","valueSize":1},{"declaration":1680,"isOffset":false,"isSlot":false,"src":"3785:4:11","valueSize":1}],"id":1686,"nodeType":"InlineAssembly","src":"3752:47:11"}]},"documentation":{"id":1678,"nodeType":"StructuredDocumentation","src":"3529:85:11","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1688,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:11","nodeType":"FunctionDefinition","parameters":{"id":1681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1680,"mutability":"mutable","name":"slot","nameLocation":"3649:4:11","nodeType":"VariableDeclaration","scope":1688,"src":"3641:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1679,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:11"},"returnParameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"r","nameLocation":"3696:1:11","nodeType":"VariableDeclaration","scope":1688,"src":"3678:19:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1611_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1683,"nodeType":"UserDefinedTypeName","pathNode":{"id":1682,"name":"BytesSlot","nodeType":"IdentifierPath","referencedDeclaration":1611,"src":"3678:9:11"},"referencedDeclaration":1611,"src":"3678:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1611_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:11"},"scope":1700,"src":"3619:186:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1698,"nodeType":"Block","src":"4002:112:11","statements":[{"AST":{"nodeType":"YulBlock","src":"4064:44:11","statements":[{"nodeType":"YulAssignment","src":"4078:20:11","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4088:10:11"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4078:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1695,"isOffset":false,"isSlot":true,"src":"4078:6:11","suffix":"slot","valueSize":1},{"declaration":1691,"isOffset":false,"isSlot":true,"src":"4088:10:11","suffix":"slot","valueSize":1}],"id":1697,"nodeType":"InlineAssembly","src":"4055:53:11"}]},"documentation":{"id":1689,"nodeType":"StructuredDocumentation","src":"3811:99:11","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1699,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:11","nodeType":"FunctionDefinition","parameters":{"id":1692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"store","nameLocation":"3951:5:11","nodeType":"VariableDeclaration","scope":1699,"src":"3937:19:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1690,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:11"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"r","nameLocation":"3999:1:11","nodeType":"VariableDeclaration","scope":1699,"src":"3981:19:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1611_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1694,"nodeType":"UserDefinedTypeName","pathNode":{"id":1693,"name":"BytesSlot","nodeType":"IdentifierPath","referencedDeclaration":1611,"src":"3981:9:11"},"referencedDeclaration":1611,"src":"3981:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1611_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:11"},"scope":1700,"src":"3915:199:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1701,"src":"1420:2696:11","usedErrors":[]}],"src":"193:3924:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2852],"SignedMathUpgradeable":[2957],"StringsUpgradeable":[1929]},"id":1930,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1702,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1703,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1930,"sourceUnit":2853,"src":"126:36:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1704,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1930,"sourceUnit":2958,"src":"163:42:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1705,"nodeType":"StructuredDocumentation","src":"207:34:12","text":" @dev String operations."},"fullyImplemented":true,"id":1929,"linearizedBaseContracts":[1929],"name":"StringsUpgradeable","nameLocation":"250:18:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1708,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:12","nodeType":"VariableDeclaration","scope":1929,"src":"275:54:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1706,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:12","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1711,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:12","nodeType":"VariableDeclaration","scope":1929,"src":"335:43:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1709,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:12","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1758,"nodeType":"Block","src":"551:636:12","statements":[{"id":1757,"nodeType":"UncheckedBlock","src":"561:620:12","statements":[{"assignments":[1720],"declarations":[{"constant":false,"id":1720,"mutability":"mutable","name":"length","nameLocation":"593:6:12","nodeType":"VariableDeclaration","scope":1757,"src":"585:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1719,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1727,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"624:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1721,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"602:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2852_$","typeString":"type(library MathUpgradeable)"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2689,"src":"602:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"602:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:12"},{"assignments":[1729],"declarations":[{"constant":false,"id":1729,"mutability":"mutable","name":"buffer","nameLocation":"662:6:12","nodeType":"VariableDeclaration","scope":1757,"src":"648:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1728,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1734,"initialValue":{"arguments":[{"id":1732,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"682:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1730,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"671:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:12"},{"assignments":[1736],"declarations":[{"constant":false,"id":1736,"mutability":"mutable","name":"ptr","nameLocation":"711:3:12","nodeType":"VariableDeclaration","scope":1757,"src":"703:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1735,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1737,"nodeType":"VariableDeclarationStatement","src":"703:11:12"},{"AST":{"nodeType":"YulBlock","src":"784:67:12","statements":[{"nodeType":"YulAssignment","src":"802:35:12","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:12","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:12"},"nodeType":"YulFunctionCall","src":"821:15:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:12"},"nodeType":"YulFunctionCall","src":"809:28:12"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1729,"isOffset":false,"isSlot":false,"src":"813:6:12","valueSize":1},{"declaration":1720,"isOffset":false,"isSlot":false,"src":"829:6:12","valueSize":1},{"declaration":1736,"isOffset":false,"isSlot":false,"src":"802:3:12","valueSize":1}],"id":1738,"nodeType":"InlineAssembly","src":"775:76:12"},{"body":{"id":1753,"nodeType":"Block","src":"877:267:12","statements":[{"expression":{"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:12","subExpression":{"id":1740,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"895:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1742,"nodeType":"ExpressionStatement","src":"895:5:12"},{"AST":{"nodeType":"YulBlock","src":"978:84:12","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:12"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:12","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:12"},"nodeType":"YulFunctionCall","src":"1018:14:12"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:12"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:12"},"nodeType":"YulFunctionCall","src":"1013:30:12"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:12"},"nodeType":"YulFunctionCall","src":"1000:44:12"},"nodeType":"YulExpressionStatement","src":"1000:44:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1708,"isOffset":false,"isSlot":false,"src":"1034:8:12","valueSize":1},{"declaration":1736,"isOffset":false,"isSlot":false,"src":"1008:3:12","valueSize":1},{"declaration":1714,"isOffset":false,"isSlot":false,"src":"1022:5:12","valueSize":1}],"id":1743,"nodeType":"InlineAssembly","src":"969:93:12"},{"expression":{"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"1079:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1747,"nodeType":"ExpressionStatement","src":"1079:11:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"1112:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1752,"nodeType":"IfStatement","src":"1108:21:12","trueBody":{"id":1751,"nodeType":"Break","src":"1124:5:12"}}]},"condition":{"hexValue":"74727565","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1754,"nodeType":"WhileStatement","src":"864:280:12"},{"expression":{"id":1755,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"1164:6:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1718,"id":1756,"nodeType":"Return","src":"1157:13:12"}]}]},"documentation":{"id":1712,"nodeType":"StructuredDocumentation","src":"385:90:12","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1759,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:12","nodeType":"FunctionDefinition","parameters":{"id":1715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1714,"mutability":"mutable","name":"value","nameLocation":"506:5:12","nodeType":"VariableDeclaration","scope":1759,"src":"498:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1713,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:12"},"returnParameters":{"id":1718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1759,"src":"536:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1716,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:12"},"scope":1929,"src":"480:707:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1786,"nodeType":"Block","src":"1357:114:12","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"1398:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:12","trueExpression":{"hexValue":"2d","id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1780,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"1455:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1778,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"1429:21:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2957_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2956,"src":"1429:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1429:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1777,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1759,1787],"referencedDeclaration":1759,"src":"1420:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1420:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1769,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1381:82:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1767,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:12","typeDescriptions":{}}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1374:90:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1766,"id":1785,"nodeType":"Return","src":"1367:97:12"}]},"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"1193:89:12","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1787,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:12","nodeType":"FunctionDefinition","parameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"value","nameLocation":"1312:5:12","nodeType":"VariableDeclaration","scope":1787,"src":"1305:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1761,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:12"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1787,"src":"1342:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1764,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:12"},"scope":1929,"src":"1287:184:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1806,"nodeType":"Block","src":"1650:111:12","statements":[{"id":1805,"nodeType":"UncheckedBlock","src":"1660:95:12","statements":[{"expression":{"arguments":[{"id":1796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"1703:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"1733:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1797,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"1710:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2852_$","typeString":"type(library MathUpgradeable)"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"1710:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1710:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1795,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1807,1883,1903],"referencedDeclaration":1883,"src":"1691:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1691:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1794,"id":1804,"nodeType":"Return","src":"1684:60:12"}]}]},"documentation":{"id":1788,"nodeType":"StructuredDocumentation","src":"1477:94:12","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1807,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:12","nodeType":"FunctionDefinition","parameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"value","nameLocation":"1605:5:12","nodeType":"VariableDeclaration","scope":1807,"src":"1597:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:12"},"returnParameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1807,"src":"1635:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1792,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:12"},"scope":1929,"src":"1576:185:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1882,"nodeType":"Block","src":"1974:347:12","statements":[{"assignments":[1818],"declarations":[{"constant":false,"id":1818,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:12","nodeType":"VariableDeclaration","scope":1882,"src":"1984:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1817,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1827,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1822,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"2020:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1819,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2006:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:12"},{"expression":{"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1828,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"2041:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1830,"indexExpression":{"hexValue":"30","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1833,"nodeType":"ExpressionStatement","src":"2041:15:12"},{"expression":{"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1834,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"2066:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1836,"indexExpression":{"hexValue":"31","id":1835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1839,"nodeType":"ExpressionStatement","src":"2066:15:12"},{"body":{"id":1868,"nodeType":"Block","src":"2136:83:12","statements":[{"expression":{"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1854,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"2150:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1856,"indexExpression":{"id":1855,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"2157:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1857,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"2162:8:12","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1861,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"2171:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:12","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1863,"nodeType":"ExpressionStatement","src":"2150:33:12"},{"expression":{"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"2197:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1867,"nodeType":"ExpressionStatement","src":"2197:11:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1848,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"2124:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1869,"initializationExpression":{"assignments":[1841],"declarations":[{"constant":false,"id":1841,"mutability":"mutable","name":"i","nameLocation":"2104:1:12","nodeType":"VariableDeclaration","scope":1869,"src":"2096:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1840,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1847,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1843,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"2112:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:12"},"loopExpression":{"expression":{"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:12","subExpression":{"id":1851,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"2133:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1853,"nodeType":"ExpressionStatement","src":"2131:3:12"},"nodeType":"ForStatement","src":"2091:128:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"2236:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1870,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2228:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1876,"nodeType":"ExpressionStatement","src":"2228:55:12"},{"expression":{"arguments":[{"id":1879,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"2307:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1877,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:12","typeDescriptions":{}}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2300:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1816,"id":1881,"nodeType":"Return","src":"2293:21:12"}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"1767:112:12","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:12","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"value","nameLocation":"1913:5:12","nodeType":"VariableDeclaration","scope":1883,"src":"1905:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1809,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"length","nameLocation":"1928:6:12","nodeType":"VariableDeclaration","scope":1883,"src":"1920:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:12"},"returnParameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"1959:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1814,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:12"},"scope":1929,"src":"1884:437:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1902,"nodeType":"Block","src":"2546:76:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1896,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"2591:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1894,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:12","typeDescriptions":{}}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2583:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:12","typeDescriptions":{}}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2575:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1899,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"2599:15:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1891,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1807,1883,1903],"referencedDeclaration":1883,"src":"2563:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2563:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1890,"id":1901,"nodeType":"Return","src":"2556:59:12"}]},"documentation":{"id":1884,"nodeType":"StructuredDocumentation","src":"2327:141:12","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1903,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:12","nodeType":"FunctionDefinition","parameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"addr","nameLocation":"2502:4:12","nodeType":"VariableDeclaration","scope":1903,"src":"2494:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:12"},"returnParameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1903,"src":"2531:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1888,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:12"},"scope":1929,"src":"2473:149:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1927,"nodeType":"Block","src":"2777:66:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1916,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"2810:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1914,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:12","typeDescriptions":{}}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2804:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1913,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2794:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"2833:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1920,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:12","typeDescriptions":{}}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2827:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1919,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2817:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1912,"id":1926,"nodeType":"Return","src":"2787:49:12"}]},"documentation":{"id":1904,"nodeType":"StructuredDocumentation","src":"2628:66:12","text":" @dev Returns true if the two strings are equal."},"id":1928,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:12","nodeType":"FunctionDefinition","parameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"a","nameLocation":"2728:1:12","nodeType":"VariableDeclaration","scope":1928,"src":"2714:15:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1905,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"b","nameLocation":"2745:1:12","nodeType":"VariableDeclaration","scope":1928,"src":"2731:15:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1907,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:12"},"returnParameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1928,"src":"2771:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1910,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:12"},"scope":1929,"src":"2699:144:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1930,"src":"242:2603:12","usedErrors":[]}],"src":"101:2745:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"ERC165Upgradeable":[1974],"IERC165Upgradeable":[1986],"Initializable":[944]},"id":1975,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1931,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":1932,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1975,"sourceUnit":1987,"src":"124:34:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1934,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1975,"sourceUnit":945,"src":"159:66:13","symbolAliases":[{"foreign":{"id":1933,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"167:13:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1936,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"843:13:13"},"id":1937,"nodeType":"InheritanceSpecifier","src":"843:13:13"},{"baseName":{"id":1938,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1986,"src":"858:18:13"},"id":1939,"nodeType":"InheritanceSpecifier","src":"858:18:13"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"227:576:13","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1974,"linearizedBaseContracts":[1974,1986,944],"name":"ERC165Upgradeable","nameLocation":"822:17:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":1944,"nodeType":"Block","src":"934:7:13","statements":[]},"id":1945,"implemented":true,"kind":"function","modifiers":[{"id":1942,"kind":"modifierInvocation","modifierName":{"id":1941,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"917:16:13"},"nodeType":"ModifierInvocation","src":"917:16:13"}],"name":"__ERC165_init","nameLocation":"892:13:13","nodeType":"FunctionDefinition","parameters":{"id":1940,"nodeType":"ParameterList","parameters":[],"src":"905:2:13"},"returnParameters":{"id":1943,"nodeType":"ParameterList","parameters":[],"src":"934:0:13"},"scope":1974,"src":"883:58:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1950,"nodeType":"Block","src":"1008:7:13","statements":[]},"id":1951,"implemented":true,"kind":"function","modifiers":[{"id":1948,"kind":"modifierInvocation","modifierName":{"id":1947,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":889,"src":"991:16:13"},"nodeType":"ModifierInvocation","src":"991:16:13"}],"name":"__ERC165_init_unchained","nameLocation":"956:23:13","nodeType":"FunctionDefinition","parameters":{"id":1946,"nodeType":"ParameterList","parameters":[],"src":"979:2:13"},"returnParameters":{"id":1949,"nodeType":"ParameterList","parameters":[],"src":"1008:0:13"},"scope":1974,"src":"947:68:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1985],"body":{"id":1967,"nodeType":"Block","src":"1172:75:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1960,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"1189:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1962,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"1209:18:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1986_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1986_$","typeString":"type(contract IERC165Upgradeable)"}],"id":1961,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1204:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1204:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$1986","typeString":"type(contract IERC165Upgradeable)"}},"id":1964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1204:36:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1189:51:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1959,"id":1966,"nodeType":"Return","src":"1182:58:13"}]},"documentation":{"id":1952,"nodeType":"StructuredDocumentation","src":"1020:56:13","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1968,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1090:17:13","nodeType":"FunctionDefinition","overrides":{"id":1956,"nodeType":"OverrideSpecifier","overrides":[],"src":"1148:8:13"},"parameters":{"id":1955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1954,"mutability":"mutable","name":"interfaceId","nameLocation":"1115:11:13","nodeType":"VariableDeclaration","scope":1968,"src":"1108:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1953,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1108:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1107:20:13"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"1166:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1957,"name":"bool","nodeType":"ElementaryTypeName","src":"1166:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1165:6:13"},"scope":1974,"src":"1081:166:13","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"1253:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1973,"mutability":"mutable","name":"__gap","nameLocation":"1532:5:13","nodeType":"VariableDeclaration","scope":1974,"src":"1512:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1970,"name":"uint256","nodeType":"ElementaryTypeName","src":"1512:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1972,"length":{"hexValue":"3530","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1520:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1512:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1975,"src":"804:736:13","usedErrors":[]}],"src":"99:1442:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[1986]},"id":1987,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1976,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1977,"nodeType":"StructuredDocumentation","src":"125:279:14","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1986,"linearizedBaseContracts":[1986],"name":"IERC165Upgradeable","nameLocation":"415:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"440:340:14","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1985,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:14","nodeType":"FunctionDefinition","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:14","nodeType":"VariableDeclaration","scope":1985,"src":"812:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1979,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:14"},"returnParameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1985,"src":"855:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1982,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:14"},"scope":1986,"src":"785:76:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1987,"src":"405:458:14","usedErrors":[]}],"src":"100:764:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2852]},"id":2853,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1988,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1989,"nodeType":"StructuredDocumentation","src":"128:73:15","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2852,"linearizedBaseContracts":[2852],"name":"MathUpgradeable","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1993,"members":[{"id":1990,"name":"Down","nameLocation":"256:4:15","nodeType":"EnumValue","src":"256:4:15"},{"id":1991,"name":"Up","nameLocation":"298:2:15","nodeType":"EnumValue","src":"298:2:15"},{"id":1992,"name":"Zero","nameLocation":"329:4:15","nodeType":"EnumValue","src":"329:4:15"}],"name":"Rounding","nameLocation":"237:8:15","nodeType":"EnumDefinition","src":"232:122:15"},{"body":{"id":2010,"nodeType":"Block","src":"491:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2003,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"508:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2004,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"512:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2007,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"520:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:15","trueExpression":{"id":2006,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"516:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2002,"id":2009,"nodeType":"Return","src":"501:20:15"}]},"documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"360:59:15","text":" @dev Returns the largest of two numbers."},"id":2011,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:15","nodeType":"FunctionDefinition","parameters":{"id":1999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1996,"mutability":"mutable","name":"a","nameLocation":"445:1:15","nodeType":"VariableDeclaration","scope":2011,"src":"437:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1998,"mutability":"mutable","name":"b","nameLocation":"456:1:15","nodeType":"VariableDeclaration","scope":2011,"src":"448:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1997,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:15"},"returnParameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2011,"src":"482:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:15"},"scope":2852,"src":"424:104:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2028,"nodeType":"Block","src":"666:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2021,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"683:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2022,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"687:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2025,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"695:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:15","trueExpression":{"id":2024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"691:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2020,"id":2027,"nodeType":"Return","src":"676:20:15"}]},"documentation":{"id":2012,"nodeType":"StructuredDocumentation","src":"534:60:15","text":" @dev Returns the smallest of two numbers."},"id":2029,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:15","nodeType":"FunctionDefinition","parameters":{"id":2017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"a","nameLocation":"620:1:15","nodeType":"VariableDeclaration","scope":2029,"src":"612:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2013,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2016,"mutability":"mutable","name":"b","nameLocation":"631:1:15","nodeType":"VariableDeclaration","scope":2029,"src":"623:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2015,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:15"},"returnParameters":{"id":2020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2029,"src":"657:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2018,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:15"},"scope":2852,"src":"599:104:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2051,"nodeType":"Block","src":"887:82:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"942:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2040,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"946:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2043,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"952:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2044,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"956:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2038,"id":2050,"nodeType":"Return","src":"934:28:15"}]},"documentation":{"id":2030,"nodeType":"StructuredDocumentation","src":"709:102:15","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2052,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:15","nodeType":"FunctionDefinition","parameters":{"id":2035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2032,"mutability":"mutable","name":"a","nameLocation":"841:1:15","nodeType":"VariableDeclaration","scope":2052,"src":"833:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2034,"mutability":"mutable","name":"b","nameLocation":"852:1:15","nodeType":"VariableDeclaration","scope":2052,"src":"844:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:15"},"returnParameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2052,"src":"878:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2036,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:15"},"scope":2852,"src":"816:153:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2076,"nodeType":"Block","src":"1239:123:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2062,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1327:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2066,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1341:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2070,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"1350:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:15","trueExpression":{"hexValue":"30","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2061,"id":2075,"nodeType":"Return","src":"1320:35:15"}]},"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"975:188:15","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2077,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:15","nodeType":"FunctionDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"a","nameLocation":"1193:1:15","nodeType":"VariableDeclaration","scope":2077,"src":"1185:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"b","nameLocation":"1204:1:15","nodeType":"VariableDeclaration","scope":2077,"src":"1196:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2056,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:15"},"returnParameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2077,"src":"1230:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:15"},"scope":2852,"src":"1168:194:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2199,"nodeType":"Block","src":"1776:4115:15","statements":[{"id":2198,"nodeType":"UncheckedBlock","src":"1786:4099:15","statements":[{"assignments":[2090],"declarations":[{"constant":false,"id":2090,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:15","nodeType":"VariableDeclaration","scope":2198,"src":"2107:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2091,"nodeType":"VariableDeclarationStatement","src":"2107:13:15"},{"assignments":[2093],"declarations":[{"constant":false,"id":2093,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:15","nodeType":"VariableDeclaration","scope":2198,"src":"2179:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2092,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2094,"nodeType":"VariableDeclarationStatement","src":"2179:13:15"},{"AST":{"nodeType":"YulBlock","src":"2259:157:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:15"},"nodeType":"YulFunctionCall","src":"2300:6:15"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:15"},"nodeType":"YulFunctionCall","src":"2287:20:15"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:15","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:15"},"nodeType":"YulFunctionCall","src":"2333:9:15"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:15"}]},{"nodeType":"YulAssignment","src":"2359:43:15","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:15"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:15"},"nodeType":"YulFunctionCall","src":"2372:14:15"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:15"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:15"},"nodeType":"YulFunctionCall","src":"2388:13:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:15"},"nodeType":"YulFunctionCall","src":"2368:34:15"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:15"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2090,"isOffset":false,"isSlot":false,"src":"2324:5:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"2380:5:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"2395:5:15","valueSize":1},{"declaration":2093,"isOffset":false,"isSlot":false,"src":"2359:5:15","valueSize":1},{"declaration":2080,"isOffset":false,"isSlot":false,"src":"2294:1:15","valueSize":1},{"declaration":2080,"isOffset":false,"isSlot":false,"src":"2337:1:15","valueSize":1},{"declaration":2082,"isOffset":false,"isSlot":false,"src":"2297:1:15","valueSize":1},{"declaration":2082,"isOffset":false,"isSlot":false,"src":"2340:1:15","valueSize":1}],"id":2095,"nodeType":"InlineAssembly","src":"2250:166:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2096,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"2497:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2104,"nodeType":"IfStatement","src":"2493:368:15","trueBody":{"id":2103,"nodeType":"Block","src":"2509:352:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2099,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"2827:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2100,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2835:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2088,"id":2102,"nodeType":"Return","src":"2820:26:15"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2971:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2107,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"2985:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2963:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2111,"nodeType":"ExpressionStatement","src":"2963:53:15"},{"assignments":[2113],"declarations":[{"constant":false,"id":2113,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:15","nodeType":"VariableDeclaration","scope":2198,"src":"3272:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2114,"nodeType":"VariableDeclarationStatement","src":"3272:17:15"},{"AST":{"nodeType":"YulBlock","src":"3312:291:15","statements":[{"nodeType":"YulAssignment","src":"3381:38:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:15"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:15"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:15"},"nodeType":"YulFunctionCall","src":"3394:25:15"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:15"}]},{"nodeType":"YulAssignment","src":"3501:41:15","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:15"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:15"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:15"},"nodeType":"YulFunctionCall","src":"3521:20:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:15"},"nodeType":"YulFunctionCall","src":"3510:32:15"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:15"}]},{"nodeType":"YulAssignment","src":"3559:30:15","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:15"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:15"},"nodeType":"YulFunctionCall","src":"3568:21:15"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:15"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2084,"isOffset":false,"isSlot":false,"src":"3407:11:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"3535:5:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"3559:5:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"3572:5:15","valueSize":1},{"declaration":2093,"isOffset":false,"isSlot":false,"src":"3501:5:15","valueSize":1},{"declaration":2093,"isOffset":false,"isSlot":false,"src":"3514:5:15","valueSize":1},{"declaration":2113,"isOffset":false,"isSlot":false,"src":"3381:9:15","valueSize":1},{"declaration":2113,"isOffset":false,"isSlot":false,"src":"3524:9:15","valueSize":1},{"declaration":2113,"isOffset":false,"isSlot":false,"src":"3579:9:15","valueSize":1},{"declaration":2080,"isOffset":false,"isSlot":false,"src":"3401:1:15","valueSize":1},{"declaration":2082,"isOffset":false,"isSlot":false,"src":"3404:1:15","valueSize":1}],"id":2115,"nodeType":"InlineAssembly","src":"3303:300:15"},{"assignments":[2117],"declarations":[{"constant":false,"id":2117,"mutability":"mutable","name":"twos","nameLocation":"3918:4:15","nodeType":"VariableDeclaration","scope":2198,"src":"3910:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2125,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2118,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"3925:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:15","subExpression":{"id":2119,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"3941:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:15"},{"AST":{"nodeType":"YulBlock","src":"3980:362:15","statements":[{"nodeType":"YulAssignment","src":"4045:37:15","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:15"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:15"},"nodeType":"YulFunctionCall","src":"4060:22:15"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:15"}]},{"nodeType":"YulAssignment","src":"4149:25:15","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:15"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:15"},"nodeType":"YulFunctionCall","src":"4158:16:15"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:15"}]},{"nodeType":"YulAssignment","src":"4289:39:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:15","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:15"},"nodeType":"YulFunctionCall","src":"4305:12:15"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:15"},"nodeType":"YulFunctionCall","src":"4301:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:15"},"nodeType":"YulFunctionCall","src":"4297:31:15"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:15"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2084,"isOffset":false,"isSlot":false,"src":"4045:11:15","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"4064:11:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"4149:5:15","valueSize":1},{"declaration":2090,"isOffset":false,"isSlot":false,"src":"4162:5:15","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"4077:4:15","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"4169:4:15","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"4289:4:15","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"4312:4:15","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"4319:4:15","valueSize":1}],"id":2126,"nodeType":"InlineAssembly","src":"3971:371:15"},{"expression":{"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2127,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"4408:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2128,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"4417:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2129,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"4425:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2132,"nodeType":"ExpressionStatement","src":"4408:21:15"},{"assignments":[2134],"declarations":[{"constant":false,"id":2134,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:15","nodeType":"VariableDeclaration","scope":2198,"src":"4747:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2141,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2136,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"4770:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2138,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:15"},{"expression":{"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2142,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5003:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5018:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2145,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5032:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2149,"nodeType":"ExpressionStatement","src":"5003:36:15"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2150,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5072:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5087:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2153,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5101:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"5072:36:15"},{"expression":{"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5142:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5157:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2161,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5171:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2165,"nodeType":"ExpressionStatement","src":"5142:36:15"},{"expression":{"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2166,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5212:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2168,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5227:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2169,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5241:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2173,"nodeType":"ExpressionStatement","src":"5212:36:15"},{"expression":{"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2174,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5282:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2176,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5297:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2177,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5311:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2181,"nodeType":"ExpressionStatement","src":"5282:36:15"},{"expression":{"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2182,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5353:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5368:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2185,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5382:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2189,"nodeType":"ExpressionStatement","src":"5353:36:15"},{"expression":{"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2190,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"5823:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"5832:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2192,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5840:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2195,"nodeType":"ExpressionStatement","src":"5823:24:15"},{"expression":{"id":2196,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"5868:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2088,"id":2197,"nodeType":"Return","src":"5861:13:15"}]}]},"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"1368:305:15","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2200,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:15","nodeType":"FunctionDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"x","nameLocation":"1702:1:15","nodeType":"VariableDeclaration","scope":2200,"src":"1694:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2079,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"y","nameLocation":"1713:1:15","nodeType":"VariableDeclaration","scope":2200,"src":"1705:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2084,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:15","nodeType":"VariableDeclaration","scope":2200,"src":"1716:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:15"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2087,"mutability":"mutable","name":"result","nameLocation":"1768:6:15","nodeType":"VariableDeclaration","scope":2200,"src":"1760:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:15"},"scope":2852,"src":"1678:4213:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2243,"nodeType":"Block","src":"6133:189:15","statements":[{"assignments":[2216],"declarations":[{"constant":false,"id":2216,"mutability":"mutable","name":"result","nameLocation":"6151:6:15","nodeType":"VariableDeclaration","scope":2243,"src":"6143:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2222,"initialValue":{"arguments":[{"id":2218,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6167:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2219,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6170:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2220,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"6173:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2217,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2200,2244],"referencedDeclaration":2200,"src":"6160:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6160:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2223,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"6199:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2224,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"6211:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1993_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1991,"src":"6211:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2228,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6233:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2229,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"6236:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2230,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"6239:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2227,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:15","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6226:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2240,"nodeType":"IfStatement","src":"6195:98:15","trueBody":{"id":2239,"nodeType":"Block","src":"6257:36:15","statements":[{"expression":{"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"6271:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2238,"nodeType":"ExpressionStatement","src":"6271:11:15"}]}},{"expression":{"id":2241,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"6309:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2214,"id":2242,"nodeType":"Return","src":"6302:13:15"}]},"documentation":{"id":2201,"nodeType":"StructuredDocumentation","src":"5897:121:15","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2244,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:15","nodeType":"FunctionDefinition","parameters":{"id":2211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2203,"mutability":"mutable","name":"x","nameLocation":"6047:1:15","nodeType":"VariableDeclaration","scope":2244,"src":"6039:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2202,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2205,"mutability":"mutable","name":"y","nameLocation":"6058:1:15","nodeType":"VariableDeclaration","scope":2244,"src":"6050:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2204,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2207,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:15","nodeType":"VariableDeclaration","scope":2244,"src":"6061:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2210,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:15","nodeType":"VariableDeclaration","scope":2244,"src":"6082:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2209,"nodeType":"UserDefinedTypeName","pathNode":{"id":2208,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"6082:8:15"},"referencedDeclaration":1993,"src":"6082:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:15"},"returnParameters":{"id":2214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2244,"src":"6124:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2212,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:15"},"scope":2852,"src":"6023:299:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2355,"nodeType":"Block","src":"6598:1585:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2252,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"6612:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2258,"nodeType":"IfStatement","src":"6608:45:15","trueBody":{"id":2257,"nodeType":"Block","src":"6620:33:15","statements":[{"expression":{"hexValue":"30","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2251,"id":2256,"nodeType":"Return","src":"6634:8:15"}]}},{"assignments":[2260],"declarations":[{"constant":false,"id":2260,"mutability":"mutable","name":"result","nameLocation":"7340:6:15","nodeType":"VariableDeclaration","scope":2355,"src":"7332:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2269,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2263,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7360:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2262,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2524,2560],"referencedDeclaration":2524,"src":"7355:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7355:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2267,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:15"},{"id":2354,"nodeType":"UncheckedBlock","src":"7769:408:15","statements":[{"expression":{"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7793:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7803:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7812:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2273,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7816:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2280,"nodeType":"ExpressionStatement","src":"7793:35:15"},{"expression":{"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7842:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7852:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7861:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2284,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7865:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2291,"nodeType":"ExpressionStatement","src":"7842:35:15"},{"expression":{"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7891:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2293,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7901:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2294,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7910:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2295,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7914:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2302,"nodeType":"ExpressionStatement","src":"7891:35:15"},{"expression":{"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2303,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7940:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2304,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7950:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2305,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7959:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7963:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2313,"nodeType":"ExpressionStatement","src":"7940:35:15"},{"expression":{"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7989:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2315,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"7999:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2316,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"8008:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8012:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2320,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2324,"nodeType":"ExpressionStatement","src":"7989:35:15"},{"expression":{"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8038:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8048:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2327,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"8057:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8061:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2335,"nodeType":"ExpressionStatement","src":"8038:35:15"},{"expression":{"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2336,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8087:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8097:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2338,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"8106:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2339,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8110:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2342,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2346,"nodeType":"ExpressionStatement","src":"8087:35:15"},{"expression":{"arguments":[{"id":2348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8147:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"8155:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8159:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2347,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"8143:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8143:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2251,"id":2353,"nodeType":"Return","src":"8136:30:15"}]}]},"documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"6328:208:15","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2356,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:15","nodeType":"FunctionDefinition","parameters":{"id":2248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2247,"mutability":"mutable","name":"a","nameLocation":"6563:1:15","nodeType":"VariableDeclaration","scope":2356,"src":"6555:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2246,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:15"},"returnParameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2356,"src":"6589:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:15"},"scope":2852,"src":"6541:1642:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2391,"nodeType":"Block","src":"8359:161:15","statements":[{"id":2390,"nodeType":"UncheckedBlock","src":"8369:145:15","statements":[{"assignments":[2368],"declarations":[{"constant":false,"id":2368,"mutability":"mutable","name":"result","nameLocation":"8401:6:15","nodeType":"VariableDeclaration","scope":2390,"src":"8393:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2367,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2372,"initialValue":{"arguments":[{"id":2370,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8415:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2369,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2356,2392],"referencedDeclaration":2356,"src":"8410:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8410:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"8438:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"8448:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2375,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"8460:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1993_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1991,"src":"8460:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"8475:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"8484:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2381,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"8493:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:15","trueExpression":{"hexValue":"31","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2387,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2366,"id":2389,"nodeType":"Return","src":"8431:72:15"}]}]},"documentation":{"id":2357,"nodeType":"StructuredDocumentation","src":"8189:89:15","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2392,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:15","nodeType":"FunctionDefinition","parameters":{"id":2363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2359,"mutability":"mutable","name":"a","nameLocation":"8305:1:15","nodeType":"VariableDeclaration","scope":2392,"src":"8297:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2358,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2362,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:15","nodeType":"VariableDeclaration","scope":2392,"src":"8308:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2361,"nodeType":"UserDefinedTypeName","pathNode":{"id":2360,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"8308:8:15"},"referencedDeclaration":1993,"src":"8308:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:15"},"returnParameters":{"id":2366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2392,"src":"8350:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2364,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:15"},"scope":2852,"src":"8283:237:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2523,"nodeType":"Block","src":"8705:922:15","statements":[{"assignments":[2401],"declarations":[{"constant":false,"id":2401,"mutability":"mutable","name":"result","nameLocation":"8723:6:15","nodeType":"VariableDeclaration","scope":2523,"src":"8715:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2403,"initialValue":{"hexValue":"30","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:15"},{"id":2520,"nodeType":"UncheckedBlock","src":"8743:855:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"8771:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2418,"nodeType":"IfStatement","src":"8767:99:15","trueBody":{"id":2417,"nodeType":"Block","src":"8789:77:15","statements":[{"expression":{"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"8807:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2412,"nodeType":"ExpressionStatement","src":"8807:13:15"},{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"8838:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2416,"nodeType":"ExpressionStatement","src":"8838:13:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"8883:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2433,"nodeType":"IfStatement","src":"8879:96:15","trueBody":{"id":2432,"nodeType":"Block","src":"8900:75:15","statements":[{"expression":{"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"8918:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2427,"nodeType":"ExpressionStatement","src":"8918:12:15"},{"expression":{"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"8948:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2431,"nodeType":"ExpressionStatement","src":"8948:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"8992:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2448,"nodeType":"IfStatement","src":"8988:96:15","trueBody":{"id":2447,"nodeType":"Block","src":"9009:75:15","statements":[{"expression":{"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9027:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2442,"nodeType":"ExpressionStatement","src":"9027:12:15"},{"expression":{"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2443,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9057:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2446,"nodeType":"ExpressionStatement","src":"9057:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9101:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2463,"nodeType":"IfStatement","src":"9097:96:15","trueBody":{"id":2462,"nodeType":"Block","src":"9118:75:15","statements":[{"expression":{"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9136:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2457,"nodeType":"ExpressionStatement","src":"9136:12:15"},{"expression":{"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2458,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9166:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2461,"nodeType":"ExpressionStatement","src":"9166:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9210:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2478,"nodeType":"IfStatement","src":"9206:93:15","trueBody":{"id":2477,"nodeType":"Block","src":"9226:73:15","statements":[{"expression":{"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9244:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2472,"nodeType":"ExpressionStatement","src":"9244:11:15"},{"expression":{"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9273:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2476,"nodeType":"ExpressionStatement","src":"9273:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9316:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2493,"nodeType":"IfStatement","src":"9312:93:15","trueBody":{"id":2492,"nodeType":"Block","src":"9332:73:15","statements":[{"expression":{"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9350:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2487,"nodeType":"ExpressionStatement","src":"9350:11:15"},{"expression":{"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2488,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9379:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2491,"nodeType":"ExpressionStatement","src":"9379:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9422:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2508,"nodeType":"IfStatement","src":"9418:93:15","trueBody":{"id":2507,"nodeType":"Block","src":"9438:73:15","statements":[{"expression":{"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9456:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2502,"nodeType":"ExpressionStatement","src":"9456:11:15"},{"expression":{"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9485:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2506,"nodeType":"ExpressionStatement","src":"9485:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9528:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2519,"nodeType":"IfStatement","src":"9524:64:15","trueBody":{"id":2518,"nodeType":"Block","src":"9544:44:15","statements":[{"expression":{"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9562:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2517,"nodeType":"ExpressionStatement","src":"9562:11:15"}]}}]},{"expression":{"id":2521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"9614:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2399,"id":2522,"nodeType":"Return","src":"9607:13:15"}]},"documentation":{"id":2393,"nodeType":"StructuredDocumentation","src":"8526:113:15","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2524,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:15","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2395,"mutability":"mutable","name":"value","nameLocation":"8666:5:15","nodeType":"VariableDeclaration","scope":2524,"src":"8658:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:15"},"returnParameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2524,"src":"8696:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2397,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:15"},"scope":2852,"src":"8644:983:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2559,"nodeType":"Block","src":"9860:165:15","statements":[{"id":2558,"nodeType":"UncheckedBlock","src":"9870:149:15","statements":[{"assignments":[2536],"declarations":[{"constant":false,"id":2536,"mutability":"mutable","name":"result","nameLocation":"9902:6:15","nodeType":"VariableDeclaration","scope":2558,"src":"9894:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2540,"initialValue":{"arguments":[{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"9916:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2537,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2524,2560],"referencedDeclaration":2524,"src":"9911:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9911:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"9943:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"9953:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2543,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"9965:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1993_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1991,"src":"9965:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"9985:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"9994:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:15","trueExpression":{"hexValue":"31","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2534,"id":2557,"nodeType":"Return","src":"9936:72:15"}]}]},"documentation":{"id":2525,"nodeType":"StructuredDocumentation","src":"9633:142:15","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2560,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:15","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"value","nameLocation":"9802:5:15","nodeType":"VariableDeclaration","scope":2560,"src":"9794:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2530,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:15","nodeType":"VariableDeclaration","scope":2560,"src":"9809:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2529,"nodeType":"UserDefinedTypeName","pathNode":{"id":2528,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"9809:8:15"},"referencedDeclaration":1993,"src":"9809:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:15"},"returnParameters":{"id":2534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2560,"src":"9851:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:15"},"scope":2852,"src":"9780:245:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2688,"nodeType":"Block","src":"10212:854:15","statements":[{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"result","nameLocation":"10230:6:15","nodeType":"VariableDeclaration","scope":2688,"src":"10222:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2571,"initialValue":{"hexValue":"30","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:15"},{"id":2685,"nodeType":"UncheckedBlock","src":"10250:787:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10278:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2588,"nodeType":"IfStatement","src":"10274:103:15","trueBody":{"id":2587,"nodeType":"Block","src":"10297:80:15","statements":[{"expression":{"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10315:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2582,"nodeType":"ExpressionStatement","src":"10315:17:15"},{"expression":{"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10350:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2586,"nodeType":"ExpressionStatement","src":"10350:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10394:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2605,"nodeType":"IfStatement","src":"10390:103:15","trueBody":{"id":2604,"nodeType":"Block","src":"10413:80:15","statements":[{"expression":{"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10431:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2599,"nodeType":"ExpressionStatement","src":"10431:17:15"},{"expression":{"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2600,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10466:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2603,"nodeType":"ExpressionStatement","src":"10466:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10510:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2622,"nodeType":"IfStatement","src":"10506:103:15","trueBody":{"id":2621,"nodeType":"Block","src":"10529:80:15","statements":[{"expression":{"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10547:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2616,"nodeType":"ExpressionStatement","src":"10547:17:15"},{"expression":{"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2617,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10582:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2620,"nodeType":"ExpressionStatement","src":"10582:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10626:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2639,"nodeType":"IfStatement","src":"10622:100:15","trueBody":{"id":2638,"nodeType":"Block","src":"10644:78:15","statements":[{"expression":{"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2628,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10662:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2633,"nodeType":"ExpressionStatement","src":"10662:16:15"},{"expression":{"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10696:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2637,"nodeType":"ExpressionStatement","src":"10696:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10739:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2656,"nodeType":"IfStatement","src":"10735:100:15","trueBody":{"id":2655,"nodeType":"Block","src":"10757:78:15","statements":[{"expression":{"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10775:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2650,"nodeType":"ExpressionStatement","src":"10775:16:15"},{"expression":{"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2651,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10809:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2654,"nodeType":"ExpressionStatement","src":"10809:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2657,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10852:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2673,"nodeType":"IfStatement","src":"10848:100:15","trueBody":{"id":2672,"nodeType":"Block","src":"10870:78:15","statements":[{"expression":{"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10888:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2667,"nodeType":"ExpressionStatement","src":"10888:16:15"},{"expression":{"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"10922:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2671,"nodeType":"ExpressionStatement","src":"10922:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10965:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2684,"nodeType":"IfStatement","src":"10961:66:15","trueBody":{"id":2683,"nodeType":"Block","src":"10983:44:15","statements":[{"expression":{"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2679,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11001:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2682,"nodeType":"ExpressionStatement","src":"11001:11:15"}]}}]},{"expression":{"id":2686,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11053:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2567,"id":2687,"nodeType":"Return","src":"11046:13:15"}]},"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"10031:114:15","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2689,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:15","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"value","nameLocation":"10173:5:15","nodeType":"VariableDeclaration","scope":2689,"src":"10165:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2562,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:15"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2689,"src":"10203:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:15"},"scope":2852,"src":"10150:916:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2724,"nodeType":"Block","src":"11301:167:15","statements":[{"id":2723,"nodeType":"UncheckedBlock","src":"11311:151:15","statements":[{"assignments":[2701],"declarations":[{"constant":false,"id":2701,"mutability":"mutable","name":"result","nameLocation":"11343:6:15","nodeType":"VariableDeclaration","scope":2723,"src":"11335:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2700,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2705,"initialValue":{"arguments":[{"id":2703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"11358:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2702,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2689,2725],"referencedDeclaration":2689,"src":"11352:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11352:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2706,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"11385:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2707,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"11395:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2708,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"11407:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1993_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1991,"src":"11407:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2712,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"11428:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"11437:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:15","trueExpression":{"hexValue":"31","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2720,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2699,"id":2722,"nodeType":"Return","src":"11378:73:15"}]}]},"documentation":{"id":2690,"nodeType":"StructuredDocumentation","src":"11072:143:15","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2725,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:15","nodeType":"FunctionDefinition","parameters":{"id":2696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"value","nameLocation":"11243:5:15","nodeType":"VariableDeclaration","scope":2725,"src":"11235:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2691,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2695,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:15","nodeType":"VariableDeclaration","scope":2725,"src":"11250:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2694,"nodeType":"UserDefinedTypeName","pathNode":{"id":2693,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"11250:8:15"},"referencedDeclaration":1993,"src":"11250:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:15"},"returnParameters":{"id":2699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2725,"src":"11292:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2697,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:15"},"scope":2852,"src":"11220:248:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2811,"nodeType":"Block","src":"11782:600:15","statements":[{"assignments":[2734],"declarations":[{"constant":false,"id":2734,"mutability":"mutable","name":"result","nameLocation":"11800:6:15","nodeType":"VariableDeclaration","scope":2811,"src":"11792:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2733,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2736,"initialValue":{"hexValue":"30","id":2735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:15"},{"id":2808,"nodeType":"UncheckedBlock","src":"11820:533:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"11848:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2751,"nodeType":"IfStatement","src":"11844:98:15","trueBody":{"id":2750,"nodeType":"Block","src":"11866:76:15","statements":[{"expression":{"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"11884:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2745,"nodeType":"ExpressionStatement","src":"11884:13:15"},{"expression":{"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"11915:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2749,"nodeType":"ExpressionStatement","src":"11915:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"11959:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2766,"nodeType":"IfStatement","src":"11955:95:15","trueBody":{"id":2765,"nodeType":"Block","src":"11976:74:15","statements":[{"expression":{"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"11994:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2760,"nodeType":"ExpressionStatement","src":"11994:12:15"},{"expression":{"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2761,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"12024:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2764,"nodeType":"ExpressionStatement","src":"12024:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"12067:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2781,"nodeType":"IfStatement","src":"12063:95:15","trueBody":{"id":2780,"nodeType":"Block","src":"12084:74:15","statements":[{"expression":{"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"12102:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2775,"nodeType":"ExpressionStatement","src":"12102:12:15"},{"expression":{"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"12132:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ExpressionStatement","src":"12132:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"12175:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2796,"nodeType":"IfStatement","src":"12171:95:15","trueBody":{"id":2795,"nodeType":"Block","src":"12192:74:15","statements":[{"expression":{"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"12210:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2790,"nodeType":"ExpressionStatement","src":"12210:12:15"},{"expression":{"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2791,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"12240:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2794,"nodeType":"ExpressionStatement","src":"12240:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"12283:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2807,"nodeType":"IfStatement","src":"12279:64:15","trueBody":{"id":2806,"nodeType":"Block","src":"12299:44:15","statements":[{"expression":{"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2802,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"12317:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2805,"nodeType":"ExpressionStatement","src":"12317:11:15"}]}}]},{"expression":{"id":2809,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"12369:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2732,"id":2810,"nodeType":"Return","src":"12362:13:15"}]},"documentation":{"id":2726,"nodeType":"StructuredDocumentation","src":"11474:240:15","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2812,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:15","nodeType":"FunctionDefinition","parameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"value","nameLocation":"11743:5:15","nodeType":"VariableDeclaration","scope":2812,"src":"11735:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2727,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:15"},"returnParameters":{"id":2732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2812,"src":"11773:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2730,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:15"},"scope":2852,"src":"11719:663:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2850,"nodeType":"Block","src":"12619:174:15","statements":[{"id":2849,"nodeType":"UncheckedBlock","src":"12629:158:15","statements":[{"assignments":[2824],"declarations":[{"constant":false,"id":2824,"mutability":"mutable","name":"result","nameLocation":"12661:6:15","nodeType":"VariableDeclaration","scope":2849,"src":"12653:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2823,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2828,"initialValue":{"arguments":[{"id":2826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"12677:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2825,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2812,2851],"referencedDeclaration":2812,"src":"12670:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12670:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"12704:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2830,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"12714:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2831,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"12726:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1993_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1991,"src":"12726:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2835,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"12747:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"12762:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:15","trueExpression":{"hexValue":"31","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2822,"id":2848,"nodeType":"Return","src":"12697:79:15"}]}]},"documentation":{"id":2813,"nodeType":"StructuredDocumentation","src":"12388:144:15","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2851,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:15","nodeType":"FunctionDefinition","parameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"value","nameLocation":"12561:5:15","nodeType":"VariableDeclaration","scope":2851,"src":"12553:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2814,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:15","nodeType":"VariableDeclaration","scope":2851,"src":"12568:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2817,"nodeType":"UserDefinedTypeName","pathNode":{"id":2816,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"12568:8:15"},"referencedDeclaration":1993,"src":"12568:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1993","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:15"},"returnParameters":{"id":2822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2851,"src":"12610:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2820,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:15"},"scope":2852,"src":"12537:256:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2853,"src":"202:12593:15","usedErrors":[]}],"src":"103:12693:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2957]},"id":2958,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2854,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2855,"nodeType":"StructuredDocumentation","src":"134:80:16","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2957,"linearizedBaseContracts":[2957],"name":"SignedMathUpgradeable","nameLocation":"223:21:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":2872,"nodeType":"Block","src":"386:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"403:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2866,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"407:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2869,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"415:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:16","trueExpression":{"id":2868,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"411:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2864,"id":2871,"nodeType":"Return","src":"396:20:16"}]},"documentation":{"id":2856,"nodeType":"StructuredDocumentation","src":"251:66:16","text":" @dev Returns the largest of two signed numbers."},"id":2873,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:16","nodeType":"FunctionDefinition","parameters":{"id":2861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"a","nameLocation":"342:1:16","nodeType":"VariableDeclaration","scope":2873,"src":"335:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2857,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2860,"mutability":"mutable","name":"b","nameLocation":"352:1:16","nodeType":"VariableDeclaration","scope":2873,"src":"345:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2859,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:16"},"returnParameters":{"id":2864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2873,"src":"378:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2862,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:16"},"scope":2957,"src":"322:101:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2890,"nodeType":"Block","src":"565:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2883,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"582:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2884,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"586:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2887,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"594:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:16","trueExpression":{"id":2886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"590:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2882,"id":2889,"nodeType":"Return","src":"575:20:16"}]},"documentation":{"id":2874,"nodeType":"StructuredDocumentation","src":"429:67:16","text":" @dev Returns the smallest of two signed numbers."},"id":2891,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:16","nodeType":"FunctionDefinition","parameters":{"id":2879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"a","nameLocation":"521:1:16","nodeType":"VariableDeclaration","scope":2891,"src":"514:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2875,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2878,"mutability":"mutable","name":"b","nameLocation":"531:1:16","nodeType":"VariableDeclaration","scope":2891,"src":"524:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2877,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:16"},"returnParameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2891,"src":"557:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2880,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:16"},"scope":2957,"src":"501:101:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2934,"nodeType":"Block","src":"807:162:16","statements":[{"assignments":[2902],"declarations":[{"constant":false,"id":2902,"mutability":"mutable","name":"x","nameLocation":"876:1:16","nodeType":"VariableDeclaration","scope":2934,"src":"869:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2901,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2915,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"881:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2904,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"885:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2906,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2907,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"892:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2908,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"896:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2910,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2913,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:16"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2916,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"921:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2921,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"941:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2919,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:16","typeDescriptions":{}}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"933:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2917,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:16","typeDescriptions":{}}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"926:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2926,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"955:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2927,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"959:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2929,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2931,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2900,"id":2933,"nodeType":"Return","src":"914:48:16"}]},"documentation":{"id":2892,"nodeType":"StructuredDocumentation","src":"608:126:16","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2935,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:16","nodeType":"FunctionDefinition","parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"a","nameLocation":"763:1:16","nodeType":"VariableDeclaration","scope":2935,"src":"756:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2893,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2896,"mutability":"mutable","name":"b","nameLocation":"773:1:16","nodeType":"VariableDeclaration","scope":2935,"src":"766:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2895,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:16"},"returnParameters":{"id":2900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2935,"src":"799:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2898,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:16"},"scope":2957,"src":"739:230:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2955,"nodeType":"Block","src":"1113:158:16","statements":[{"id":2954,"nodeType":"UncheckedBlock","src":"1123:142:16","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2945,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1238:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:16","subExpression":{"id":2949,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1252:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:16","trueExpression":{"id":2948,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1247:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2943,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:16","typeDescriptions":{}}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1230:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2942,"id":2953,"nodeType":"Return","src":"1223:31:16"}]}]},"documentation":{"id":2936,"nodeType":"StructuredDocumentation","src":"975:78:16","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2956,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:16","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"n","nameLocation":"1078:1:16","nodeType":"VariableDeclaration","scope":2956,"src":"1071:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2937,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:16"},"returnParameters":{"id":2942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2956,"src":"1104:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2940,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:16"},"scope":2957,"src":"1058:213:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2958,"src":"215:1058:16","usedErrors":[]}],"src":"109:1165:16"},"id":16},"contracts/BatchCreditActions.sol":{"ast":{"absolutePath":"contracts/BatchCreditActions.sol","exportedSymbols":{"AccessControlUpgradeable":[336],"AddressUpgradeable":[1539],"AdminActionReason":[3360],"BatchCreditActions":[3170],"ContextUpgradeable":[1590],"CustomSignaturesTypes":[3381],"ERC165Upgradeable":[1974],"ERC1967UpgradeUpgradeable":[765],"IAccessControlUpgradeable":[409],"IBeaconUpgradeable":[775],"IERC165Upgradeable":[1986],"IERC1822ProxiableUpgradeable":[440],"IERC1967Upgradeable":[430],"IProject":[3328],"Initializable":[944],"MathUpgradeable":[2852],"PausableUpgradeable":[1209],"ProjectTypes":[3361],"RetirementData":[3354],"SignatureBatchTransferPayload":[2973],"SignedMathUpgradeable":[2957],"StorageSlotUpgradeable":[1700],"StringsUpgradeable":[1929],"UUPSUpgradeable":[1081],"VintageData":[3341],"signatureBatchTransferPayload":[3380]},"id":3171,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2959,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"contracts/interfaces/IProject.sol","file":"./interfaces/IProject.sol","id":2960,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3171,"sourceUnit":3329,"src":"123:35:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/CustomSignaturesTypes.sol","file":"./utils/CustomSignaturesTypes.sol","id":2961,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3171,"sourceUnit":3382,"src":"159:43:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":2962,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3171,"sourceUnit":337,"src":"203:81:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":2963,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3171,"sourceUnit":945,"src":"285:75:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":2964,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3171,"sourceUnit":1082,"src":"361:77:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":2965,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3171,"sourceUnit":1210,"src":"439:78:17","symbolAliases":[],"unitAlias":""},{"canonicalName":"SignatureBatchTransferPayload","id":2973,"members":[{"constant":false,"id":2967,"mutability":"mutable","name":"contractAddress","nameLocation":"570:15:17","nodeType":"VariableDeclaration","scope":2973,"src":"562:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2966,"name":"address","nodeType":"ElementaryTypeName","src":"562:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2970,"mutability":"mutable","name":"payload","nameLocation":"621:7:17","nodeType":"VariableDeclaration","scope":2973,"src":"591:37:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_storage_ptr","typeString":"struct signatureBatchTransferPayload"},"typeName":{"id":2969,"nodeType":"UserDefinedTypeName","pathNode":{"id":2968,"name":"signatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":3380,"src":"591:29:17"},"referencedDeclaration":3380,"src":"591:29:17","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_storage_ptr","typeString":"struct signatureBatchTransferPayload"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"signature","nameLocation":"640:9:17","nodeType":"VariableDeclaration","scope":2973,"src":"634:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2971,"name":"bytes","nodeType":"ElementaryTypeName","src":"634:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SignatureBatchTransferPayload","nameLocation":"526:29:17","nodeType":"StructDefinition","scope":3171,"src":"519:133:17","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":2974,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":944,"src":"686:13:17"},"id":2975,"nodeType":"InheritanceSpecifier","src":"686:13:17"},{"baseName":{"id":2976,"name":"PausableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1209,"src":"702:19:17"},"id":2977,"nodeType":"InheritanceSpecifier","src":"702:19:17"},{"baseName":{"id":2978,"name":"AccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":336,"src":"724:24:17"},"id":2979,"nodeType":"InheritanceSpecifier","src":"724:24:17"},{"baseName":{"id":2980,"name":"UUPSUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"751:15:17"},"id":2981,"nodeType":"InheritanceSpecifier","src":"751:15:17"}],"canonicalName":"BatchCreditActions","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3170,"linearizedBaseContracts":[3170,1081,765,430,440,336,1974,1986,409,1209,1590,944],"name":"BatchCreditActions","nameLocation":"663:18:17","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"f72c0d8b","id":2986,"mutability":"constant","name":"UPGRADER_ROLE","nameLocation":"802:13:17","nodeType":"VariableDeclaration","scope":3170,"src":"778:66:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"778:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"55504752414445525f524f4c45","id":2984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"828:15:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""},"value":"UPGRADER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""}],"id":2983,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"818:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"818:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":2993,"nodeType":"Block","src":"915:30:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2990,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"919:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"919:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2992,"nodeType":"ExpressionStatement","src":"919:22:17"}]},"documentation":{"id":2987,"nodeType":"StructuredDocumentation","src":"851:48:17","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":2994,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[],"src":"912:2:17"},"returnParameters":{"id":2989,"nodeType":"ParameterList","parameters":[],"src":"915:0:17"},"scope":3170,"src":"901:44:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3020,"nodeType":"Block","src":"992:167:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2999,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"996:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"996:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3001,"nodeType":"ExpressionStatement","src":"996:17:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3002,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1017:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1017:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3004,"nodeType":"ExpressionStatement","src":"1017:22:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3005,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"1043:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1043:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3007,"nodeType":"ExpressionStatement","src":"1043:24:17"},{"expression":{"arguments":[{"id":3009,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1083:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3010,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1103:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1103:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3008,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"1072:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1072:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3013,"nodeType":"ExpressionStatement","src":"1072:42:17"},{"expression":{"arguments":[{"id":3015,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"1129:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3016,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1144:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1144:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3014,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"1118:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1118:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3019,"nodeType":"ExpressionStatement","src":"1118:37:17"}]},"functionSelector":"8129fc1c","id":3021,"implemented":true,"kind":"function","modifiers":[{"id":2997,"kind":"modifierInvocation","modifierName":{"id":2996,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":846,"src":"980:11:17"},"nodeType":"ModifierInvocation","src":"980:11:17"}],"name":"initialize","nameLocation":"960:10:17","nodeType":"FunctionDefinition","parameters":{"id":2995,"nodeType":"ParameterList","parameters":[],"src":"970:2:17"},"returnParameters":{"id":2998,"nodeType":"ParameterList","parameters":[],"src":"992:0:17"},"scope":3170,"src":"951:208:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3067,"nodeType":"Block","src":"1288:295:17","statements":[{"body":{"id":3065,"nodeType":"Block","src":"1345:236:17","statements":[{"assignments":[3043],"declarations":[{"constant":false,"id":3043,"mutability":"mutable","name":"erc1155","nameLocation":"1364:7:17","nodeType":"VariableDeclaration","scope":3065,"src":"1355:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"},"typeName":{"id":3042,"nodeType":"UserDefinedTypeName","pathNode":{"id":3041,"name":"IProject","nodeType":"IdentifierPath","referencedDeclaration":3328,"src":"1355:8:17"},"referencedDeclaration":3328,"src":"1355:8:17","typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"}},"visibility":"internal"}],"id":3050,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":3045,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1383:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3047,"indexExpression":{"id":3046,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"1397:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1383:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":2967,"src":"1383:32:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3044,"name":"IProject","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"1374:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProject_$3328_$","typeString":"type(contract IProject)"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1374:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"}},"nodeType":"VariableDeclarationStatement","src":"1355:61:17"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3054,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1474:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3056,"indexExpression":{"id":3055,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"1488:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1474:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"signature","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"1474:26:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"baseExpression":{"id":3058,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1514:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3060,"indexExpression":{"id":3059,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"1528:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1514:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":2970,"src":"1514:24:17","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","typeString":"struct signatureBatchTransferPayload calldata"}},{"id":3062,"name":"transferData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"1552:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","typeString":"struct signatureBatchTransferPayload calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3051,"name":"erc1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"1426:7:17","typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"batchTransferFromSignature","nodeType":"MemberAccess","referencedDeclaration":3308,"src":"1426:34:17","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes_memory_ptr_$_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory,struct signatureBatchTransferPayload memory,bytes memory) payable external"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1426:148:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3064,"nodeType":"ExpressionStatement","src":"1426:148:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3034,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"1314:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3035,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1318:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1318:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1314:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3066,"initializationExpression":{"assignments":[3031],"declarations":[{"constant":false,"id":3031,"mutability":"mutable","name":"i","nameLocation":"1307:1:17","nodeType":"VariableDeclaration","scope":3066,"src":"1299:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3030,"name":"uint256","nodeType":"ElementaryTypeName","src":"1299:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3033,"initialValue":{"hexValue":"30","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1311:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1299:13:17"},"loopExpression":{"expression":{"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1340:3:17","subExpression":{"id":3038,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"1340:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3040,"nodeType":"ExpressionStatement","src":"1340:3:17"},"nodeType":"ForStatement","src":"1294:287:17"}]},"functionSelector":"0dee1707","id":3068,"implemented":true,"kind":"function","modifiers":[],"name":"handleTransfers","nameLocation":"1170:15:17","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3025,"mutability":"mutable","name":"transferItems","nameLocation":"1232:13:17","nodeType":"VariableDeclaration","scope":3068,"src":"1191:54:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload[]"},"typeName":{"baseType":{"id":3023,"nodeType":"UserDefinedTypeName","pathNode":{"id":3022,"name":"SignatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":2973,"src":"1191:29:17"},"referencedDeclaration":2973,"src":"1191:29:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_storage_ptr","typeString":"struct SignatureBatchTransferPayload"}},"id":3024,"nodeType":"ArrayTypeName","src":"1191:31:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_storage_$dyn_storage_ptr","typeString":"struct SignatureBatchTransferPayload[]"}},"visibility":"internal"},{"constant":false,"id":3027,"mutability":"mutable","name":"transferData","nameLocation":"1266:12:17","nodeType":"VariableDeclaration","scope":3068,"src":"1251:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3026,"name":"bytes","nodeType":"ElementaryTypeName","src":"1251:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1185:95:17"},"returnParameters":{"id":3029,"nodeType":"ParameterList","parameters":[],"src":"1288:0:17"},"scope":3170,"src":"1161:422:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3123,"nodeType":"Block","src":"1805:367:17","statements":[{"body":{"id":3121,"nodeType":"Block","src":"1864:306:17","statements":[{"assignments":[3096],"declarations":[{"constant":false,"id":3096,"mutability":"mutable","name":"project","nameLocation":"1883:7:17","nodeType":"VariableDeclaration","scope":3121,"src":"1874:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"},"typeName":{"id":3095,"nodeType":"UserDefinedTypeName","pathNode":{"id":3094,"name":"IProject","nodeType":"IdentifierPath","referencedDeclaration":3328,"src":"1874:8:17"},"referencedDeclaration":3328,"src":"1874:8:17","typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"}},"visibility":"internal"}],"id":3103,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":3098,"name":"retirementItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1902:15:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3100,"indexExpression":{"id":3099,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"1918:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1902:18:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":2967,"src":"1902:34:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3097,"name":"IProject","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"1893:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProject_$3328_$","typeString":"type(contract IProject)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1893:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"}},"nodeType":"VariableDeclarationStatement","src":"1874:63:17"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3107,"name":"retirementItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1988:15:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3109,"indexExpression":{"id":3108,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2004:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1988:18:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"signature","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"1988:28:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"baseExpression":{"id":3111,"name":"retirementItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"2030:15:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3113,"indexExpression":{"id":3112,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2046:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2030:18:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":2970,"src":"2030:26:17","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","typeString":"struct signatureBatchTransferPayload calldata"}},{"id":3115,"name":"retireeName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"2070:11:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3116,"name":"customUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"2095:9:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3117,"name":"comment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"2118:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3118,"name":"retirementData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"2139:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","typeString":"struct signatureBatchTransferPayload calldata"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3104,"name":"project","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"1947:7:17","typeDescriptions":{"typeIdentifier":"t_contract$_IProject_$3328","typeString":"contract IProject"}},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"retireFromSignature","nodeType":"MemberAccess","referencedDeclaration":3327,"src":"1947:27:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (bytes memory,struct signatureBatchTransferPayload memory,string memory,string memory,string memory,bytes memory) external returns (uint256[] memory)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1947:216:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3120,"nodeType":"ExpressionStatement","src":"1947:216:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3087,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"1831:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3088,"name":"retirementItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1835:15:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1835:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1831:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3122,"initializationExpression":{"assignments":[3084],"declarations":[{"constant":false,"id":3084,"mutability":"mutable","name":"i","nameLocation":"1824:1:17","nodeType":"VariableDeclaration","scope":3122,"src":"1816:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3086,"initialValue":{"hexValue":"30","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1828:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1816:13:17"},"loopExpression":{"expression":{"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1859:3:17","subExpression":{"id":3091,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"1859:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3093,"nodeType":"ExpressionStatement","src":"1859:3:17"},"nodeType":"ForStatement","src":"1811:359:17"}]},"functionSelector":"69ffd930","id":3124,"implemented":true,"kind":"function","modifiers":[],"name":"handleRetirements","nameLocation":"1594:17:17","nodeType":"FunctionDefinition","parameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"retirementItems","nameLocation":"1658:15:17","nodeType":"VariableDeclaration","scope":3124,"src":"1617:56:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload[]"},"typeName":{"baseType":{"id":3070,"nodeType":"UserDefinedTypeName","pathNode":{"id":3069,"name":"SignatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":2973,"src":"1617:29:17"},"referencedDeclaration":2973,"src":"1617:29:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_storage_ptr","typeString":"struct SignatureBatchTransferPayload"}},"id":3071,"nodeType":"ArrayTypeName","src":"1617:31:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_storage_$dyn_storage_ptr","typeString":"struct SignatureBatchTransferPayload[]"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"retireeName","nameLocation":"1693:11:17","nodeType":"VariableDeclaration","scope":3124,"src":"1679:25:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3073,"name":"string","nodeType":"ElementaryTypeName","src":"1679:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"customUri","nameLocation":"1724:9:17","nodeType":"VariableDeclaration","scope":3124,"src":"1710:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3075,"name":"string","nodeType":"ElementaryTypeName","src":"1710:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3078,"mutability":"mutable","name":"comment","nameLocation":"1753:7:17","nodeType":"VariableDeclaration","scope":3124,"src":"1739:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3077,"name":"string","nodeType":"ElementaryTypeName","src":"1739:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3080,"mutability":"mutable","name":"retirementData","nameLocation":"1781:14:17","nodeType":"VariableDeclaration","scope":3124,"src":"1766:29:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3079,"name":"bytes","nodeType":"ElementaryTypeName","src":"1766:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1611:186:17"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[],"src":"1805:0:17"},"scope":3170,"src":"1585:587:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3158,"nodeType":"Block","src":"2491:142:17","statements":[{"expression":{"arguments":[{"id":3146,"name":"transferItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"2513:13:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},{"id":3147,"name":"transferData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"2528:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3145,"name":"handleTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2497:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (struct SignatureBatchTransferPayload calldata[] calldata,bytes calldata)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2497:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3149,"nodeType":"ExpressionStatement","src":"2497:44:17"},{"expression":{"arguments":[{"id":3151,"name":"retirementItems","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"2565:15:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"}},{"id":3152,"name":"retireeName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3134,"src":"2582:11:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3153,"name":"customUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"2595:9:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3154,"name":"comment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"2606:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3155,"name":"retirementData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"2615:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload calldata[] calldata"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3150,"name":"handleRetirements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"2547:17:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (struct SignatureBatchTransferPayload calldata[] calldata,string memory,string memory,string memory,bytes calldata)"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2547:83:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3157,"nodeType":"ExpressionStatement","src":"2547:83:17"}]},"functionSelector":"cc944ef3","id":3159,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferOrRetire","nameLocation":"2183:21:17","nodeType":"FunctionDefinition","parameters":{"id":3143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"transferItems","nameLocation":"2251:13:17","nodeType":"VariableDeclaration","scope":3159,"src":"2210:54:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload[]"},"typeName":{"baseType":{"id":3126,"nodeType":"UserDefinedTypeName","pathNode":{"id":3125,"name":"SignatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":2973,"src":"2210:29:17"},"referencedDeclaration":2973,"src":"2210:29:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_storage_ptr","typeString":"struct SignatureBatchTransferPayload"}},"id":3127,"nodeType":"ArrayTypeName","src":"2210:31:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_storage_$dyn_storage_ptr","typeString":"struct SignatureBatchTransferPayload[]"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"retirementItems","nameLocation":"2311:15:17","nodeType":"VariableDeclaration","scope":3159,"src":"2270:56:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SignatureBatchTransferPayload[]"},"typeName":{"baseType":{"id":3130,"nodeType":"UserDefinedTypeName","pathNode":{"id":3129,"name":"SignatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":2973,"src":"2270:29:17"},"referencedDeclaration":2973,"src":"2270:29:17","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureBatchTransferPayload_$2973_storage_ptr","typeString":"struct SignatureBatchTransferPayload"}},"id":3131,"nodeType":"ArrayTypeName","src":"2270:31:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SignatureBatchTransferPayload_$2973_storage_$dyn_storage_ptr","typeString":"struct SignatureBatchTransferPayload[]"}},"visibility":"internal"},{"constant":false,"id":3134,"mutability":"mutable","name":"retireeName","nameLocation":"2346:11:17","nodeType":"VariableDeclaration","scope":3159,"src":"2332:25:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3133,"name":"string","nodeType":"ElementaryTypeName","src":"2332:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3136,"mutability":"mutable","name":"customUri","nameLocation":"2377:9:17","nodeType":"VariableDeclaration","scope":3159,"src":"2363:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3135,"name":"string","nodeType":"ElementaryTypeName","src":"2363:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"comment","nameLocation":"2406:7:17","nodeType":"VariableDeclaration","scope":3159,"src":"2392:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3137,"name":"string","nodeType":"ElementaryTypeName","src":"2392:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3140,"mutability":"mutable","name":"transferData","nameLocation":"2434:12:17","nodeType":"VariableDeclaration","scope":3159,"src":"2419:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3139,"name":"bytes","nodeType":"ElementaryTypeName","src":"2419:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"retirementData","nameLocation":"2467:14:17","nodeType":"VariableDeclaration","scope":3159,"src":"2452:29:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3141,"name":"bytes","nodeType":"ElementaryTypeName","src":"2452:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2204:279:17"},"returnParameters":{"id":3144,"nodeType":"ParameterList","parameters":[],"src":"2491:0:17"},"scope":3170,"src":"2174:459:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1075],"body":{"id":3168,"nodeType":"Block","src":"2740:2:17","statements":[]},"id":3169,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3165,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"2725:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3166,"kind":"modifierInvocation","modifierName":{"id":3164,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":42,"src":"2716:8:17"},"nodeType":"ModifierInvocation","src":"2716:23:17"}],"name":"_authorizeUpgrade","nameLocation":"2649:17:17","nodeType":"FunctionDefinition","overrides":{"id":3163,"nodeType":"OverrideSpecifier","overrides":[],"src":"2707:8:17"},"parameters":{"id":3162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3161,"mutability":"mutable","name":"newImplementation","nameLocation":"2677:17:17","nodeType":"VariableDeclaration","scope":3169,"src":"2669:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3160,"name":"address","nodeType":"ElementaryTypeName","src":"2669:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2666:31:17"},"returnParameters":{"id":3167,"nodeType":"ParameterList","parameters":[],"src":"2740:0:17"},"scope":3170,"src":"2640:102:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3171,"src":"654:2090:17","usedErrors":[]}],"src":"32:2713:17"},"id":17},"contracts/interfaces/IProject.sol":{"ast":{"absolutePath":"contracts/interfaces/IProject.sol","exportedSymbols":{"AdminActionReason":[3360],"CustomSignaturesTypes":[3381],"IProject":[3328],"ProjectTypes":[3361],"RetirementData":[3354],"VintageData":[3341],"signatureBatchTransferPayload":[3380]},"id":3329,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3172,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"39:24:18"},{"absolutePath":"contracts/types/ProjectTypes.sol","file":"../types/ProjectTypes.sol","id":3173,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3329,"sourceUnit":3362,"src":"65:35:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/CustomSignaturesTypes.sol","file":"../utils/CustomSignaturesTypes.sol","id":3174,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3329,"sourceUnit":3382,"src":"101:44:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProject","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3328,"linearizedBaseContracts":[3328],"name":"IProject","nameLocation":"157:8:18","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"c5fb6d85b5baef0a615415607787aea341771027b7e4da34da58eaeb661154ea","id":3186,"name":"ExPostCreated","nameLocation":"175:13:18","nodeType":"EventDefinition","parameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"208:7:18","nodeType":"VariableDeclaration","scope":3186,"src":"192:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3175,"name":"uint256","nodeType":"ElementaryTypeName","src":"192:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3178,"indexed":false,"mutability":"mutable","name":"estimatedAmount","nameLocation":"227:15:18","nodeType":"VariableDeclaration","scope":3186,"src":"219:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3180,"indexed":false,"mutability":"mutable","name":"verificationPeriodStart","nameLocation":"254:23:18","nodeType":"VariableDeclaration","scope":3186,"src":"246:31:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3179,"name":"uint256","nodeType":"ElementaryTypeName","src":"246:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3182,"indexed":false,"mutability":"mutable","name":"verificationPeriodEnd","nameLocation":"289:21:18","nodeType":"VariableDeclaration","scope":3186,"src":"281:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3181,"name":"uint256","nodeType":"ElementaryTypeName","src":"281:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3184,"indexed":false,"mutability":"mutable","name":"serialization","nameLocation":"321:13:18","nodeType":"VariableDeclaration","scope":3186,"src":"314:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3183,"name":"string","nodeType":"ElementaryTypeName","src":"314:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"188:149:18"},"src":"169:169:18"},{"anonymous":false,"eventSelector":"79ad675a154518428a5aa59f22c834871a66d54a46e3f4c8c5b4ee08fb576c2e","id":3197,"name":"VintageMitigationEstimateChanged","nameLocation":"347:32:18","nodeType":"EventDefinition","parameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"399:7:18","nodeType":"VariableDeclaration","scope":3197,"src":"383:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3187,"name":"uint256","nodeType":"ElementaryTypeName","src":"383:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3190,"indexed":false,"mutability":"mutable","name":"newEstimate","nameLocation":"418:11:18","nodeType":"VariableDeclaration","scope":3197,"src":"410:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3189,"name":"uint256","nodeType":"ElementaryTypeName","src":"410:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3192,"indexed":false,"mutability":"mutable","name":"oldEstimate","nameLocation":"441:11:18","nodeType":"VariableDeclaration","scope":3197,"src":"433:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3191,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3195,"indexed":true,"mutability":"mutable","name":"reason","nameLocation":"482:6:18","nodeType":"VariableDeclaration","scope":3197,"src":"456:32:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AdminActionReason_$3360","typeString":"enum AdminActionReason"},"typeName":{"id":3194,"nodeType":"UserDefinedTypeName","pathNode":{"id":3193,"name":"AdminActionReason","nodeType":"IdentifierPath","referencedDeclaration":3360,"src":"456:17:18"},"referencedDeclaration":3360,"src":"456:17:18","typeDescriptions":{"typeIdentifier":"t_enum$_AdminActionReason_$3360","typeString":"enum AdminActionReason"}},"visibility":"internal"}],"src":"379:112:18"},"src":"341:151:18"},{"anonymous":false,"eventSelector":"1fe9ade752d24e4f4dca10f5c807a7cc8630c7604280c8b124097d93b5bb02a1","id":3207,"name":"ExAnteMinted","nameLocation":"501:12:18","nodeType":"EventDefinition","parameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3199,"indexed":true,"mutability":"mutable","name":"exAnteTokenId","nameLocation":"533:13:18","nodeType":"VariableDeclaration","scope":3207,"src":"517:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3198,"name":"uint256","nodeType":"ElementaryTypeName","src":"517:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3201,"indexed":true,"mutability":"mutable","name":"exPostTokenId","nameLocation":"566:13:18","nodeType":"VariableDeclaration","scope":3207,"src":"550:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3200,"name":"uint256","nodeType":"ElementaryTypeName","src":"550:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3203,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"599:7:18","nodeType":"VariableDeclaration","scope":3207,"src":"583:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3202,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3205,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"618:6:18","nodeType":"VariableDeclaration","scope":3207,"src":"610:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"610:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"513:114:18"},"src":"495:133:18"},{"anonymous":false,"eventSelector":"e19de0f3da1193000100a217838f49f6bdda20dc974d33b61f92faaf446d181d","id":3221,"name":"ExPostVerifiedAndMinted","nameLocation":"637:23:18","nodeType":"EventDefinition","parameters":{"id":3220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3209,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"680:7:18","nodeType":"VariableDeclaration","scope":3221,"src":"664:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3208,"name":"uint256","nodeType":"ElementaryTypeName","src":"664:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3211,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"699:6:18","nodeType":"VariableDeclaration","scope":3221,"src":"691:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"691:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3213,"indexed":false,"mutability":"mutable","name":"amountToAnteHolders","nameLocation":"717:19:18","nodeType":"VariableDeclaration","scope":3221,"src":"709:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3212,"name":"uint256","nodeType":"ElementaryTypeName","src":"709:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3215,"indexed":false,"mutability":"mutable","name":"verificationPeriodStart","nameLocation":"748:23:18","nodeType":"VariableDeclaration","scope":3221,"src":"740:31:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3214,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3217,"indexed":false,"mutability":"mutable","name":"verificationPeriodEnd","nameLocation":"783:21:18","nodeType":"VariableDeclaration","scope":3221,"src":"775:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3216,"name":"uint256","nodeType":"ElementaryTypeName","src":"775:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3219,"indexed":false,"mutability":"mutable","name":"monitoringReport","nameLocation":"815:16:18","nodeType":"VariableDeclaration","scope":3221,"src":"808:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3218,"name":"string","nodeType":"ElementaryTypeName","src":"808:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"660:174:18"},"src":"631:204:18"},{"anonymous":false,"eventSelector":"28307ba5beac24bbe02c6541395dc897a2c9a884977343cfc55d6bef99a178cf","id":3232,"name":"AdminBurn","nameLocation":"844:9:18","nodeType":"EventDefinition","parameters":{"id":3231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3223,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"873:4:18","nodeType":"VariableDeclaration","scope":3232,"src":"857:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3222,"name":"address","nodeType":"ElementaryTypeName","src":"857:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3225,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"897:7:18","nodeType":"VariableDeclaration","scope":3232,"src":"881:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3224,"name":"uint256","nodeType":"ElementaryTypeName","src":"881:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3227,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"916:6:18","nodeType":"VariableDeclaration","scope":3232,"src":"908:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3226,"name":"uint256","nodeType":"ElementaryTypeName","src":"908:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3230,"indexed":true,"mutability":"mutable","name":"reason","nameLocation":"952:6:18","nodeType":"VariableDeclaration","scope":3232,"src":"926:32:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AdminActionReason_$3360","typeString":"enum AdminActionReason"},"typeName":{"id":3229,"nodeType":"UserDefinedTypeName","pathNode":{"id":3228,"name":"AdminActionReason","nodeType":"IdentifierPath","referencedDeclaration":3360,"src":"926:17:18"},"referencedDeclaration":3360,"src":"926:17:18","typeDescriptions":{"typeIdentifier":"t_enum$_AdminActionReason_$3360","typeString":"enum AdminActionReason"}},"visibility":"internal"}],"src":"853:108:18"},"src":"838:124:18"},{"anonymous":false,"eventSelector":"a8b90aeef4d9590cac2ff486fc2b5d9749ed41f9388a7eb159eef94cf5fb65ab","id":3245,"name":"AdminClawback","nameLocation":"971:13:18","nodeType":"EventDefinition","parameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3234,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1004:4:18","nodeType":"VariableDeclaration","scope":3245,"src":"988:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3233,"name":"address","nodeType":"ElementaryTypeName","src":"988:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3236,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1020:2:18","nodeType":"VariableDeclaration","scope":3245,"src":"1012:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3235,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3238,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1042:7:18","nodeType":"VariableDeclaration","scope":3245,"src":"1026:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3237,"name":"uint256","nodeType":"ElementaryTypeName","src":"1026:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3240,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1061:6:18","nodeType":"VariableDeclaration","scope":3245,"src":"1053:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3243,"indexed":true,"mutability":"mutable","name":"reason","nameLocation":"1097:6:18","nodeType":"VariableDeclaration","scope":3245,"src":"1071:32:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AdminActionReason_$3360","typeString":"enum AdminActionReason"},"typeName":{"id":3242,"nodeType":"UserDefinedTypeName","pathNode":{"id":3241,"name":"AdminActionReason","nodeType":"IdentifierPath","referencedDeclaration":3360,"src":"1071:17:18"},"referencedDeclaration":3360,"src":"1071:17:18","typeDescriptions":{"typeIdentifier":"t_enum$_AdminActionReason_$3360","typeString":"enum AdminActionReason"}},"visibility":"internal"}],"src":"984:122:18"},"src":"965:142:18"},{"anonymous":false,"eventSelector":"fa5cd0fcb25938b2f45b3ca175241bfb3739cf4db3cb7476846930ec714f13f2","id":3255,"name":"ExchangeAnteForPost","nameLocation":"1116:19:18","nodeType":"EventDefinition","parameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3247,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1155:7:18","nodeType":"VariableDeclaration","scope":3255,"src":"1139:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3246,"name":"address","nodeType":"ElementaryTypeName","src":"1139:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3249,"indexed":true,"mutability":"mutable","name":"exPostTokenId","nameLocation":"1182:13:18","nodeType":"VariableDeclaration","scope":3255,"src":"1166:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"1166:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3251,"indexed":false,"mutability":"mutable","name":"exPostAmountReceived","nameLocation":"1207:20:18","nodeType":"VariableDeclaration","scope":3255,"src":"1199:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3253,"indexed":false,"mutability":"mutable","name":"exAnteAmountBurned","nameLocation":"1239:18:18","nodeType":"VariableDeclaration","scope":3255,"src":"1231:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1135:125:18"},"src":"1110:151:18"},{"anonymous":false,"eventSelector":"1325d882b2ca749c878a4ab3a393f6e51b69026faa05426b6d1ec6776a3f2f3c","id":3267,"name":"RetiredVintage","nameLocation":"1270:14:18","nodeType":"EventDefinition","parameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3257,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1304:7:18","nodeType":"VariableDeclaration","scope":3267,"src":"1288:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3256,"name":"address","nodeType":"ElementaryTypeName","src":"1288:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3259,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1331:7:18","nodeType":"VariableDeclaration","scope":3267,"src":"1315:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3258,"name":"uint256","nodeType":"ElementaryTypeName","src":"1315:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3261,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1350:6:18","nodeType":"VariableDeclaration","scope":3267,"src":"1342:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3260,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3263,"indexed":false,"mutability":"mutable","name":"nftTokenId","nameLocation":"1368:10:18","nodeType":"VariableDeclaration","scope":3267,"src":"1360:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3262,"name":"uint256","nodeType":"ElementaryTypeName","src":"1360:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3265,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1388:4:18","nodeType":"VariableDeclaration","scope":3267,"src":"1382:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3264,"name":"bytes","nodeType":"ElementaryTypeName","src":"1382:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1284:111:18"},"src":"1264:132:18"},{"anonymous":false,"eventSelector":"782105afe5542acae5ab54dc3dab8b54887fd38a79f55330b3e1e70c3063d67b","id":3279,"name":"CancelledCredits","nameLocation":"1405:16:18","nodeType":"EventDefinition","parameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3269,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1441:7:18","nodeType":"VariableDeclaration","scope":3279,"src":"1425:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3268,"name":"address","nodeType":"ElementaryTypeName","src":"1425:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3271,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1469:7:18","nodeType":"VariableDeclaration","scope":3279,"src":"1453:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1453:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3273,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1489:6:18","nodeType":"VariableDeclaration","scope":3279,"src":"1481:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3272,"name":"uint256","nodeType":"ElementaryTypeName","src":"1481:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3275,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"1507:6:18","nodeType":"VariableDeclaration","scope":3279,"src":"1500:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3274,"name":"string","nodeType":"ElementaryTypeName","src":"1500:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3277,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1523:4:18","nodeType":"VariableDeclaration","scope":3279,"src":"1517:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3276,"name":"bytes","nodeType":"ElementaryTypeName","src":"1517:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1421:110:18"},"src":"1399:133:18"},{"functionSelector":"275d4dec","id":3298,"implemented":false,"kind":"function","modifiers":[],"name":"retire","nameLocation":"1544:6:18","nodeType":"FunctionDefinition","parameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3281,"mutability":"mutable","name":"tokenId","nameLocation":"1562:7:18","nodeType":"VariableDeclaration","scope":3298,"src":"1554:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"1554:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3283,"mutability":"mutable","name":"amount","nameLocation":"1581:6:18","nodeType":"VariableDeclaration","scope":3298,"src":"1573:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3282,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3285,"mutability":"mutable","name":"beneficiary","nameLocation":"1599:11:18","nodeType":"VariableDeclaration","scope":3298,"src":"1591:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3284,"name":"address","nodeType":"ElementaryTypeName","src":"1591:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"retireeName","nameLocation":"1628:11:18","nodeType":"VariableDeclaration","scope":3298,"src":"1614:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3286,"name":"string","nodeType":"ElementaryTypeName","src":"1614:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3289,"mutability":"mutable","name":"customUri","nameLocation":"1657:9:18","nodeType":"VariableDeclaration","scope":3298,"src":"1643:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3288,"name":"string","nodeType":"ElementaryTypeName","src":"1643:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3291,"mutability":"mutable","name":"comment","nameLocation":"1684:7:18","nodeType":"VariableDeclaration","scope":3298,"src":"1670:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3290,"name":"string","nodeType":"ElementaryTypeName","src":"1670:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"data","nameLocation":"1708:4:18","nodeType":"VariableDeclaration","scope":3298,"src":"1695:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3292,"name":"bytes","nodeType":"ElementaryTypeName","src":"1695:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1550:165:18"},"returnParameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"nftTokenId","nameLocation":"1742:10:18","nodeType":"VariableDeclaration","scope":3298,"src":"1734:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1734:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1733:20:18"},"scope":3328,"src":"1535:220:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8b42ecc1","id":3308,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransferFromSignature","nameLocation":"1767:26:18","nodeType":"FunctionDefinition","parameters":{"id":3306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"signature","nameLocation":"1812:9:18","nodeType":"VariableDeclaration","scope":3308,"src":"1797:24:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3299,"name":"bytes","nodeType":"ElementaryTypeName","src":"1797:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3303,"mutability":"mutable","name":"payload","nameLocation":"1864:7:18","nodeType":"VariableDeclaration","scope":3308,"src":"1825:46:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","typeString":"struct signatureBatchTransferPayload"},"typeName":{"id":3302,"nodeType":"UserDefinedTypeName","pathNode":{"id":3301,"name":"signatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":3380,"src":"1825:29:18"},"referencedDeclaration":3380,"src":"1825:29:18","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_storage_ptr","typeString":"struct signatureBatchTransferPayload"}},"visibility":"internal"},{"constant":false,"id":3305,"mutability":"mutable","name":"data","nameLocation":"1888:4:18","nodeType":"VariableDeclaration","scope":3308,"src":"1875:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3304,"name":"bytes","nodeType":"ElementaryTypeName","src":"1875:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1793:102:18"},"returnParameters":{"id":3307,"nodeType":"ParameterList","parameters":[],"src":"1912:0:18"},"scope":3328,"src":"1758:155:18","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"c5bfc65a","id":3327,"implemented":false,"kind":"function","modifiers":[],"name":"retireFromSignature","nameLocation":"1925:19:18","nodeType":"FunctionDefinition","parameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3310,"mutability":"mutable","name":"signature","nameLocation":"1963:9:18","nodeType":"VariableDeclaration","scope":3327,"src":"1948:24:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3309,"name":"bytes","nodeType":"ElementaryTypeName","src":"1948:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3313,"mutability":"mutable","name":"payload","nameLocation":"2015:7:18","nodeType":"VariableDeclaration","scope":3327,"src":"1976:46:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","typeString":"struct signatureBatchTransferPayload"},"typeName":{"id":3312,"nodeType":"UserDefinedTypeName","pathNode":{"id":3311,"name":"signatureBatchTransferPayload","nodeType":"IdentifierPath","referencedDeclaration":3380,"src":"1976:29:18"},"referencedDeclaration":3380,"src":"1976:29:18","typeDescriptions":{"typeIdentifier":"t_struct$_signatureBatchTransferPayload_$3380_storage_ptr","typeString":"struct signatureBatchTransferPayload"}},"visibility":"internal"},{"constant":false,"id":3315,"mutability":"mutable","name":"retireeName","nameLocation":"2040:11:18","nodeType":"VariableDeclaration","scope":3327,"src":"2026:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3314,"name":"string","nodeType":"ElementaryTypeName","src":"2026:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3317,"mutability":"mutable","name":"customUri","nameLocation":"2069:9:18","nodeType":"VariableDeclaration","scope":3327,"src":"2055:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3316,"name":"string","nodeType":"ElementaryTypeName","src":"2055:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3319,"mutability":"mutable","name":"comment","nameLocation":"2096:7:18","nodeType":"VariableDeclaration","scope":3327,"src":"2082:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3318,"name":"string","nodeType":"ElementaryTypeName","src":"2082:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3321,"mutability":"mutable","name":"data","nameLocation":"2120:4:18","nodeType":"VariableDeclaration","scope":3327,"src":"2107:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3320,"name":"bytes","nodeType":"ElementaryTypeName","src":"2107:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1944:183:18"},"returnParameters":{"id":3326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3327,"src":"2150:16:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3323,"name":"uint256","nodeType":"ElementaryTypeName","src":"2150:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3324,"nodeType":"ArrayTypeName","src":"2150:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2149:18:18"},"scope":3328,"src":"1916:252:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3329,"src":"147:2023:18","usedErrors":[]}],"src":"39:2131:18"},"id":18},"contracts/types/ProjectTypes.sol":{"ast":{"absolutePath":"contracts/types/ProjectTypes.sol","exportedSymbols":{"AdminActionReason":[3360],"ProjectTypes":[3361],"RetirementData":[3354],"VintageData":[3341]},"id":3362,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3330,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"32:24:19"},{"canonicalName":"VintageData","id":3341,"members":[{"constant":false,"id":3332,"mutability":"mutable","name":"serialization","nameLocation":"90:13:19","nodeType":"VariableDeclaration","scope":3341,"src":"83:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3331,"name":"string","nodeType":"ElementaryTypeName","src":"83:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3334,"mutability":"mutable","name":"estMitigations","nameLocation":"117:14:19","nodeType":"VariableDeclaration","scope":3341,"src":"109:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint256","nodeType":"ElementaryTypeName","src":"109:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3336,"mutability":"mutable","name":"verificationPeriodStart","nameLocation":"157:23:19","nodeType":"VariableDeclaration","scope":3341,"src":"149:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3335,"name":"uint256","nodeType":"ElementaryTypeName","src":"149:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3338,"mutability":"mutable","name":"verificationPeriodEnd","nameLocation":"226:21:19","nodeType":"VariableDeclaration","scope":3341,"src":"218:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3337,"name":"uint256","nodeType":"ElementaryTypeName","src":"218:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3340,"mutability":"mutable","name":"lastVerificationTimestamp","nameLocation":"261:25:19","nodeType":"VariableDeclaration","scope":3341,"src":"253:33:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"253:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"VintageData","nameLocation":"65:11:19","nodeType":"StructDefinition","scope":3362,"src":"58:231:19","visibility":"public"},{"canonicalName":"RetirementData","id":3354,"members":[{"constant":false,"id":3343,"mutability":"mutable","name":"retiree","nameLocation":"327:7:19","nodeType":"VariableDeclaration","scope":3354,"src":"319:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3342,"name":"address","nodeType":"ElementaryTypeName","src":"319:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3345,"mutability":"mutable","name":"amount","nameLocation":"348:6:19","nodeType":"VariableDeclaration","scope":3354,"src":"340:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3344,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"vintageTokenId","nameLocation":"368:14:19","nodeType":"VariableDeclaration","scope":3354,"src":"360:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3346,"name":"uint256","nodeType":"ElementaryTypeName","src":"360:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3349,"mutability":"mutable","name":"retireeName","nameLocation":"395:11:19","nodeType":"VariableDeclaration","scope":3354,"src":"388:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3348,"name":"string","nodeType":"ElementaryTypeName","src":"388:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3351,"mutability":"mutable","name":"customUri","nameLocation":"419:9:19","nodeType":"VariableDeclaration","scope":3354,"src":"412:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3350,"name":"string","nodeType":"ElementaryTypeName","src":"412:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3353,"mutability":"mutable","name":"comment","nameLocation":"441:7:19","nodeType":"VariableDeclaration","scope":3354,"src":"434:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3352,"name":"string","nodeType":"ElementaryTypeName","src":"434:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"RetirementData","nameLocation":"298:14:19","nodeType":"StructDefinition","scope":3362,"src":"291:160:19","visibility":"public"},{"canonicalName":"AdminActionReason","id":3360,"members":[{"id":3355,"name":"NoReason","nameLocation":"482:8:19","nodeType":"EnumValue","src":"482:8:19"},{"id":3356,"name":"OverEstimated","nameLocation":"496:13:19","nodeType":"EnumValue","src":"496:13:19"},{"id":3357,"name":"UnderEstimated","nameLocation":"515:14:19","nodeType":"EnumValue","src":"515:14:19"},{"id":3358,"name":"CreditsLost","nameLocation":"535:11:19","nodeType":"EnumValue","src":"535:11:19"},{"id":3359,"name":"CreditsGained","nameLocation":"552:13:19","nodeType":"EnumValue","src":"552:13:19"}],"name":"AdminActionReason","nameLocation":"458:17:19","nodeType":"EnumDefinition","src":"453:114:19"},{"abstract":true,"baseContracts":[],"canonicalName":"ProjectTypes","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3361,"linearizedBaseContracts":[3361],"name":"ProjectTypes","nameLocation":"587:12:19","nodeType":"ContractDefinition","nodes":[],"scope":3362,"src":"569:33:19","usedErrors":[]}],"src":"32:571:19"},"id":19},"contracts/utils/CustomSignaturesTypes.sol":{"ast":{"absolutePath":"contracts/utils/CustomSignaturesTypes.sol","exportedSymbols":{"CustomSignaturesTypes":[3381],"signatureBatchTransferPayload":[3380]},"id":3382,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3363,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"85:24:20"},{"canonicalName":"signatureBatchTransferPayload","id":3380,"members":[{"constant":false,"id":3365,"mutability":"mutable","name":"deadline","nameLocation":"162:8:20","nodeType":"VariableDeclaration","scope":3380,"src":"154:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"154:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"description","nameLocation":"183:11:20","nodeType":"VariableDeclaration","scope":3380,"src":"176:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3366,"name":"string","nodeType":"ElementaryTypeName","src":"176:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"signer","nameLocation":"208:6:20","nodeType":"VariableDeclaration","scope":3380,"src":"200:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3368,"name":"address","nodeType":"ElementaryTypeName","src":"200:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"to","nameLocation":"228:2:20","nodeType":"VariableDeclaration","scope":3380,"src":"220:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"220:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3374,"mutability":"mutable","name":"tokenIds","nameLocation":"246:8:20","nodeType":"VariableDeclaration","scope":3380,"src":"236:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"236:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3373,"nodeType":"ArrayTypeName","src":"236:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3377,"mutability":"mutable","name":"amounts","nameLocation":"270:7:20","nodeType":"VariableDeclaration","scope":3380,"src":"260:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3375,"name":"uint256","nodeType":"ElementaryTypeName","src":"260:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3376,"nodeType":"ArrayTypeName","src":"260:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3379,"mutability":"mutable","name":"nonce","nameLocation":"291:5:20","nodeType":"VariableDeclaration","scope":3380,"src":"283:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3378,"name":"uint256","nodeType":"ElementaryTypeName","src":"283:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"signatureBatchTransferPayload","nameLocation":"118:29:20","nodeType":"StructDefinition","scope":3382,"src":"111:188:20","visibility":"public"},{"abstract":true,"baseContracts":[],"canonicalName":"CustomSignaturesTypes","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3381,"linearizedBaseContracts":[3381],"name":"CustomSignaturesTypes","nameLocation":"319:21:20","nodeType":"ContractDefinition","nodes":[],"scope":3382,"src":"301:42:20","usedErrors":[]}],"src":"85:259:20"},"id":20}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1589,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1973,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":28,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)23_storage)"},{"astId":335,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)23_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)23_storage"},"t_struct(RoleData)23_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":20,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":22,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":764,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":764,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1080,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1589,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1103,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":1208,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220997a6ef36161376f2bf184bb4e5e95a2fdfd51caa20f2b3accfc87eadfb810bd64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 PUSH27 0x6EF36161376F2BF184BB4E5E95A2FDFD51CAA20F2B3ACCFC87EADF 0xB8 LT 0xBD PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"194:9180:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220997a6ef36161376f2bf184bb4e5e95a2fdfd51caa20f2b3accfc87eadfb810bd64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 PUSH27 0x6EF36161376F2BF184BB4E5E95A2FDFD51CAA20F2B3ACCFC87EADF 0xB8 LT 0xBD PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"194:9180:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1589,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220385a243ae7b5c889033367e11e162474470b594be1459680d895d638deb0eee764736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE GAS 0x24 GASPRICE 0xE7 0xB5 0xC8 DUP10 SUB CALLER PUSH8 0xE11E162474470B59 0x4B 0xE1 GASLIMIT SWAP7 DUP1 0xD8 SWAP6 0xD6 CODESIZE 0xDE 0xB0 0xEE 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"1420:2696:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2696:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220385a243ae7b5c889033367e11e162474470b594be1459680d895d638deb0eee764736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE GAS 0x24 GASPRICE 0xE7 0xB5 0xC8 DUP10 SUB CALLER PUSH8 0xE11E162474470B59 0x4B 0xE1 GASLIMIT SWAP7 DUP1 0xD8 SWAP6 0xD6 CODESIZE 0xDE 0xB0 0xEE 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"1420:2696:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071a1dc1a3eda7edfeb2acc1e88a432665446d1fcbef83a963f3e82a43e95620264736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0xA1DC1A3EDA7EDFEB2ACC1E88A432665446D1 0xFC 0xBE 0xF8 GASPRICE SWAP7 EXTCODEHASH RETURNDATACOPY DUP3 LOG4 RETURNDATACOPY SWAP6 PUSH3 0x26473 PUSH16 0x6C634300080D00330000000000000000 ","sourceMap":"242:2603:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;242:2603:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071a1dc1a3eda7edfeb2acc1e88a432665446d1fcbef83a963f3e82a43e95620264736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0xA1DC1A3EDA7EDFEB2ACC1E88A432665446D1 0xFC 0xBE 0xF8 GASPRICE SWAP7 EXTCODEHASH RETURNDATACOPY DUP3 LOG4 RETURNDATACOPY SWAP6 PUSH3 0x26473 PUSH16 0x6C634300080D00330000000000000000 ","sourceMap":"242:2603:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1973,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220122887faed136d0f300ab45a4b719aec28cb42fa50ae4035c74372dadeb4ef9f64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0x28 DUP8 STATICCALL 0xED SGT PUSH14 0xF300AB45A4B719AEC28CB42FA50 0xAE BLOCKHASH CALLDATALOAD 0xC7 NUMBER PUSH19 0xDADEB4EF9F64736F6C634300080D0033000000 ","sourceMap":"202:12593:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12593:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220122887faed136d0f300ab45a4b719aec28cb42fa50ae4035c74372dadeb4ef9f64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0x28 DUP8 STATICCALL 0xED SGT PUSH14 0xF300AB45A4B719AEC28CB42FA50 0xAE BLOCKHASH CALLDATALOAD 0xC7 NUMBER PUSH19 0xDADEB4EF9F64736F6C634300080D0033000000 ","sourceMap":"202:12593:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eac3e4867fda64bbab2d2dd98a330be88235d34c23d7240b9eec70e8b1403c3464736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xC3 0xE4 DUP7 PUSH32 0xDA64BBAB2D2DD98A330BE88235D34C23D7240B9EEC70E8B1403C3464736F6C63 NUMBER STOP ADDMOD 0xD STOP CALLER ","sourceMap":"215:1058:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1058:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eac3e4867fda64bbab2d2dd98a330be88235d34c23d7240b9eec70e8b1403c3464736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xC3 0xE4 DUP7 PUSH32 0xDA64BBAB2D2DD98A330BE88235D34C23D7240B9EEC70E8B1403C3464736F6C63 NUMBER STOP ADDMOD 0xD STOP CALLER ","sourceMap":"215:1058:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BatchCreditActions.sol":{"BatchCreditActions":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"description","type":"string"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct signatureBatchTransferPayload","name":"payload","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct SignatureBatchTransferPayload[]","name":"transferItems","type":"tuple[]"},{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"description","type":"string"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct signatureBatchTransferPayload","name":"payload","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct SignatureBatchTransferPayload[]","name":"retirementItems","type":"tuple[]"},{"internalType":"string","name":"retireeName","type":"string"},{"internalType":"string","name":"customUri","type":"string"},{"internalType":"string","name":"comment","type":"string"},{"internalType":"bytes","name":"transferData","type":"bytes"},{"internalType":"bytes","name":"retirementData","type":"bytes"}],"name":"batchTransferOrRetire","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"description","type":"string"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct signatureBatchTransferPayload","name":"payload","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct SignatureBatchTransferPayload[]","name":"retirementItems","type":"tuple[]"},{"internalType":"string","name":"retireeName","type":"string"},{"internalType":"string","name":"customUri","type":"string"},{"internalType":"string","name":"comment","type":"string"},{"internalType":"bytes","name":"retirementData","type":"bytes"}],"name":"handleRetirements","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"description","type":"string"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct signatureBatchTransferPayload","name":"payload","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct SignatureBatchTransferPayload[]","name":"transferItems","type":"tuple[]"},{"internalType":"bytes","name":"transferData","type":"bytes"}],"name":"handleTransfers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2994":{"entryPoint":null,"id":2994,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_925":{"entryPoint":34,"id":925,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:608:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"188:229:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"216:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"198:6:21"},"nodeType":"YulFunctionCall","src":"198:21:21"},"nodeType":"YulExpressionStatement","src":"198:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"239:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"250:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"235:3:21"},"nodeType":"YulFunctionCall","src":"235:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"255:2:21","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"228:6:21"},"nodeType":"YulFunctionCall","src":"228:30:21"},"nodeType":"YulExpressionStatement","src":"228:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"278:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"289:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"274:3:21"},"nodeType":"YulFunctionCall","src":"274:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"294:34:21","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"267:6:21"},"nodeType":"YulFunctionCall","src":"267:62:21"},"nodeType":"YulExpressionStatement","src":"267:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"360:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"345:3:21"},"nodeType":"YulFunctionCall","src":"345:18:21"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"365:9:21","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"338:6:21"},"nodeType":"YulFunctionCall","src":"338:37:21"},"nodeType":"YulExpressionStatement","src":"338:37:21"},{"nodeType":"YulAssignment","src":"384:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"396:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"407:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"392:3:21"},"nodeType":"YulFunctionCall","src":"392:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"384:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"165:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"179:4:21","type":""}],"src":"14:403:21"},{"body":{"nodeType":"YulBlock","src":"519:87:21","statements":[{"nodeType":"YulAssignment","src":"529:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"541:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"552:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:21"},"nodeType":"YulFunctionCall","src":"537:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"529:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"571:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"586:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"594:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"582:3:21"},"nodeType":"YulFunctionCall","src":"582:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"564:6:21"},"nodeType":"YulFunctionCall","src":"564:36:21"},"nodeType":"YulExpressionStatement","src":"564:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"488:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"499:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"510:4:21","type":""}],"src":"422:184:21"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611cde610118600039600081816104d6015281816105160152818161059e015281816105de01526106560152611cde6000f3fe6080604052600436106100c35760003560e01c806301ffc9a7146100c85780630dee1707146100fd578063248a9ca31461011f5780632f2ff15d1461014d57806336568abe1461016d5780633659cfe61461018d5780634f1ef286146101ad57806352d1902d146101c05780635c975abb146101d557806369ffd930146101ed5780638129fc1c1461020d57806391d1485414610222578063a217fddf14610242578063cc944ef314610257578063d547741f14610277578063f72c0d8b14610297575b600080fd5b3480156100d457600080fd5b506100e86100e3366004611175565b6102b9565b60405190151581526020015b60405180910390f35b34801561010957600080fd5b5061011d61011836600461122b565b6102f0565b005b34801561012b57600080fd5b5061013f61013a366004611296565b610413565b6040519081526020016100f4565b34801561015957600080fd5b5061011d6101683660046112cb565b610428565b34801561017957600080fd5b5061011d6101883660046112cb565b610449565b34801561019957600080fd5b5061011d6101a83660046112f7565b6104cc565b61011d6101bb3660046113af565b610594565b3480156101cc57600080fd5b5061013f610649565b3480156101e157600080fd5b5060335460ff166100e8565b3480156101f957600080fd5b5061011d610208366004611430565b6106f7565b34801561021957600080fd5b5061011d610839565b34801561022e57600080fd5b506100e861023d3660046112cb565b610983565b34801561024e57600080fd5b5061013f600081565b34801561026357600080fd5b5061011d61027236600461150d565b6109ae565b34801561028357600080fd5b5061011d6102923660046112cb565b6109d6565b3480156102a357600080fd5b5061013f600080516020611c4283398151915281565b60006001600160e01b03198216637965db0b60e01b14806102ea57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60005b8381101561040c57600085858381811061030f5761030f611645565b9050602002810190610321919061165b565b61032f9060208101906112f7565b9050806001600160a01b0316638b42ecc187878581811061035257610352611645565b9050602002810190610364919061165b565b61037290604081019061167b565b89898781811061038457610384611645565b9050602002810190610396919061165b565b6103a49060208101906116c1565b88886040518663ffffffff1660e01b81526004016103c695949392919061187a565b600060405180830381600087803b1580156103e057600080fd5b505af11580156103f4573d6000803e3d6000fd5b50505050508080610404906118d7565b9150506102f3565b5050505050565b60009081526097602052604090206001015490565b61043182610413565b61043a816109f2565b61044483836109fc565b505050565b6001600160a01b03811633146104be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104c88282610a82565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105145760405162461bcd60e51b81526004016104b5906118f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610546610ae9565b6001600160a01b03161461056c5760405162461bcd60e51b81526004016104b59061192a565b61057581610b05565b6040805160008082526020820190925261059191839190610b1d565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105dc5760405162461bcd60e51b81526004016104b5906118f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060e610ae9565b6001600160a01b0316146106345760405162461bcd60e51b81526004016104b59061192a565b61063d82610b05565b6104c882826001610b1d565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016104b5565b50600080516020611c6283398151915290565b60005b8681101561082f57600088888381811061071657610716611645565b9050602002810190610728919061165b565b6107369060208101906112f7565b9050806001600160a01b031663c5bfc65a8a8a8581811061075957610759611645565b905060200281019061076b919061165b565b61077990604081019061167b565b8c8c8781811061078b5761078b611645565b905060200281019061079d919061165b565b6107ab9060208101906116c1565b8b8b8b8b8b6040518963ffffffff1660e01b81526004016107d39897969594939291906119bc565b6000604051808303816000875af11580156107f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081a9190810190611a42565b50508080610827906118d7565b9150506106fa565b5050505050505050565b600054610100900460ff16158080156108595750600054600160ff909116105b8061087a575061086830610c88565b15801561087a575060005460ff166001145b6108dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104b5565b6000805460ff191660011790558015610900576000805461ff0019166101001790555b610908610c97565b610910610cc8565b610918610cc8565b6109236000336109fc565b61093b600080516020611c42833981519152336109fc565b8015610591576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6109ba8b8b86866102f0565b6109c9898989898987876106f7565b5050505050505050505050565b6109df82610413565b6109e8816109f2565b6104448383610a82565b6105918133610cef565b610a068282610983565b6104c85760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610a3e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610a8c8282610983565b156104c85760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020611c62833981519152546001600160a01b031690565b600080516020611c428339815191526104c8816109f2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b505761044483610d48565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610baa575060408051601f3d908101601f19168201909252610ba791810190611adb565b60015b610c0d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104b5565b600080516020611c628339815191528114610c7c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104b5565b50610444838383610de2565b6001600160a01b03163b151590565b600054610100900460ff16610cbe5760405162461bcd60e51b81526004016104b590611af4565b610cc6610e0d565b565b600054610100900460ff16610cc65760405162461bcd60e51b81526004016104b590611af4565b610cf98282610983565b6104c857610d0681610e40565b610d11836020610e52565b604051602001610d22929190611b3f565b60408051601f198184030181529082905262461bcd60e51b82526104b591600401611bae565b610d5181610c88565b610db35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104b5565b600080516020611c6283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610deb83610ff4565b600082511180610df85750805b1561044457610e078383611034565b50505050565b600054610100900460ff16610e345760405162461bcd60e51b81526004016104b590611af4565b6033805460ff19169055565b60606102ea6001600160a01b03831660145b60606000610e61836002611bc1565b610e6c906002611be0565b6001600160401b03811115610e8357610e83611312565b6040519080825280601f01601f191660200182016040528015610ead576020820181803683370190505b509050600360fc1b81600081518110610ec857610ec8611645565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ef757610ef7611645565b60200101906001600160f81b031916908160001a9053506000610f1b846002611bc1565b610f26906001611be0565b90505b6001811115610f9e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610f5a57610f5a611645565b1a60f81b828281518110610f7057610f70611645565b60200101906001600160f81b031916908160001a90535060049490941c93610f9781611bf8565b9050610f29565b508315610fed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104b5565b9392505050565b610ffd81610d48565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610fed8383604051806060016040528060278152602001611c82602791396060600080856001600160a01b0316856040516110719190611c0f565b600060405180830381855af49150503d80600081146110ac576040519150601f19603f3d011682016040523d82523d6000602084013e6110b1565b606091505b50915091506110c2868383876110cc565b9695505050505050565b60608315611139578251600003611132576110e685610c88565b6111325760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104b5565b5081611143565b611143838361114b565b949350505050565b81511561115b5781518083602001fd5b8060405162461bcd60e51b81526004016104b59190611bae565b60006020828403121561118757600080fd5b81356001600160e01b031981168114610fed57600080fd5b60008083601f8401126111b157600080fd5b5081356001600160401b038111156111c857600080fd5b6020830191508360208260051b85010111156111e357600080fd5b9250929050565b60008083601f8401126111fc57600080fd5b5081356001600160401b0381111561121357600080fd5b6020830191508360208285010111156111e357600080fd5b6000806000806040858703121561124157600080fd5b84356001600160401b038082111561125857600080fd5b6112648883890161119f565b9096509450602087013591508082111561127d57600080fd5b5061128a878288016111ea565b95989497509550505050565b6000602082840312156112a857600080fd5b5035919050565b80356001600160a01b03811681146112c657600080fd5b919050565b600080604083850312156112de57600080fd5b823591506112ee602084016112af565b90509250929050565b60006020828403121561130957600080fd5b610fed826112af565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561135057611350611312565b604052919050565b60006001600160401b0383111561137157611371611312565b611384601f8401601f1916602001611328565b905082815283838301111561139857600080fd5b828260208301376000602084830101529392505050565b600080604083850312156113c257600080fd5b6113cb836112af565b915060208301356001600160401b038111156113e657600080fd5b8301601f810185136113f757600080fd5b61140685823560208401611358565b9150509250929050565b600082601f83011261142157600080fd5b610fed83833560208501611358565b600080600080600080600060a0888a03121561144b57600080fd5b87356001600160401b038082111561146257600080fd5b61146e8b838c0161119f565b909950975060208a013591508082111561148757600080fd5b6114938b838c01611410565b965060408a01359150808211156114a957600080fd5b6114b58b838c01611410565b955060608a01359150808211156114cb57600080fd5b6114d78b838c01611410565b945060808a01359150808211156114ed57600080fd5b506114fa8a828b016111ea565b989b979a50959850939692959293505050565b600080600080600080600080600080600060e08c8e03121561152e57600080fd5b6001600160401b038c3581101561154457600080fd5b6115518e8e358f0161119f565b909c509a5060208d013581101561156757600080fd5b6115778e60208f01358f0161119f565b909a50985060408d013581101561158d57600080fd5b61159d8e60408f01358f01611410565b97508060608e013511156115b057600080fd5b6115c08e60608f01358f01611410565b96508060808e013511156115d357600080fd5b6115e38e60808f01358f01611410565b95508060a08e013511156115f657600080fd5b6116068e60a08f01358f016111ea565b909550935060c08d013581101561161c57600080fd5b5061162d8d60c08e01358e016111ea565b81935080925050509295989b509295989b9093969950565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261167157600080fd5b9190910192915050565b6000808335601e1984360301811261169257600080fd5b8301803591506001600160401b038211156116ac57600080fd5b6020019150368190038213156111e357600080fd5b6000823560de1983360301811261167157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03169052565b6000808335601e1984360301811261172457600080fd5b83016020810192503590506001600160401b0381111561174357600080fd5b8060051b36038313156111e357600080fd5b81835260006001600160fb1b0383111561176e57600080fd5b8260051b8083602087013760009401602001938452509192915050565b8035825260006020820135601e198336030181126117a857600080fd5b820180356001600160401b038111156117c057600080fd5b8036038413156117cf57600080fd5b60e060208601526117e760e0860182602085016116d7565b9150506117f6604084016112af565b6118036040860182611700565b50611810606084016112af565b61181d6060860182611700565b5061182b608084018461170d565b858303608087015261183e838284611755565b9250505061184f60a084018461170d565b85830360a0870152611862838284611755565b9250505060c083013560c08501528091505092915050565b60608152600061188e6060830187896116d7565b82810360208401526118a0818761178b565b905082810360408401526118b58185876116d7565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016118e9576118e96118c1565b5060010190565b6020808252602c90820152600080516020611c2283398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c90820152600080516020611c2283398151915260408201526b6163746976652070726f787960a01b606082015260800190565b60005b8381101561197f578181015183820152602001611967565b83811115610e075750506000910152565b600081518084526119a8816020860160208601611964565b601f01601f19169290920160200192915050565b60c0815260006119d060c083018a8c6116d7565b82810360208401526119e2818a61178b565b905082810360408401526119f68189611990565b90508281036060840152611a0a8188611990565b90508281036080840152611a1e8187611990565b905082810360a0840152611a338185876116d7565b9b9a5050505050505050505050565b60006020808385031215611a5557600080fd5b82516001600160401b0380821115611a6c57600080fd5b818501915085601f830112611a8057600080fd5b815181811115611a9257611a92611312565b8060051b9150611aa3848301611328565b8181529183018401918481019088841115611abd57600080fd5b938501935b838510156118b557845182529385019390850190611ac2565b600060208284031215611aed57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351611b71816017850160208801611964565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611ba2816028840160208801611964565b01602801949350505050565b602081526000610fed6020830184611990565b6000816000190483118215151615611bdb57611bdb6118c1565b500290565b60008219821115611bf357611bf36118c1565b500190565b600081611c0757611c076118c1565b506000190190565b6000825161167181846020870161196456fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a5d09ba0692a10fd1bf1c1b761f6fbe62a70d4090def13c49c5e4ce3f54a77f764736f6c634300080d0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D PUSH2 0x22 JUMP JUMPDEST PUSH2 0xE1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1CDE PUSH2 0x118 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4D6 ADD MSTORE DUP2 DUP2 PUSH2 0x516 ADD MSTORE DUP2 DUP2 PUSH2 0x59E ADD MSTORE DUP2 DUP2 PUSH2 0x5DE ADD MSTORE PUSH2 0x656 ADD MSTORE PUSH2 0x1CDE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDEE1707 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x69FFD930 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xCC944EF3 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x297 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1175 JUMP JUMPDEST PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0x1296 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x428 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x449 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x11D PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x13AF JUMP JUMPDEST PUSH2 0x594 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x649 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH2 0xE8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x208 CALLDATASIZE PUSH1 0x4 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x839 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x150D JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x9D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C42 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2EA JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x40C JUMPI PUSH1 0x0 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x30F JUMPI PUSH2 0x30F PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x32F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x12F7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8B42ECC1 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x364 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x372 SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x167B JUMP JUMPDEST DUP10 DUP10 DUP8 DUP2 DUP2 LT PUSH2 0x384 JUMPI PUSH2 0x384 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x396 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x3A4 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x16C1 JUMP JUMPDEST DUP9 DUP9 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x187A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0x404 SWAP1 PUSH2 0x18D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2F3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x431 DUP3 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x43A DUP2 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0x9FC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x4BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4C8 DUP3 DUP3 PUSH2 0xA82 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x546 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x575 DUP2 PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x591 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x5DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x60E PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x63D DUP3 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0x4C8 DUP3 DUP3 PUSH1 0x1 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B1959081D1A1C9BDD59DA0819195B1959D85D1958D85B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x82F JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x716 JUMPI PUSH2 0x716 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x728 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x736 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x12F7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5BFC65A DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x759 JUMPI PUSH2 0x759 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x76B SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x779 SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x167B JUMP JUMPDEST DUP13 DUP13 DUP8 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x79D SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x7AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x16C1 JUMP JUMPDEST DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD DUP10 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D3 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x81A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A42 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x827 SWAP1 PUSH2 0x18D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6FA JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x859 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x87A JUMPI POP PUSH2 0x868 ADDRESS PUSH2 0xC88 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x87A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x900 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x908 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x910 PUSH2 0xCC8 JUMP JUMPDEST PUSH2 0x918 PUSH2 0xCC8 JUMP JUMPDEST PUSH2 0x923 PUSH1 0x0 CALLER PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x93B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C42 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x9FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x591 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9BA DUP12 DUP12 DUP7 DUP7 PUSH2 0x2F0 JUMP JUMPDEST PUSH2 0x9C9 DUP10 DUP10 DUP10 DUP10 DUP10 DUP8 DUP8 PUSH2 0x6F7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9DF DUP3 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x9E8 DUP2 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0xA82 JUMP JUMPDEST PUSH2 0x591 DUP2 CALLER PUSH2 0xCEF JUMP JUMPDEST PUSH2 0xA06 DUP3 DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xA3E CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xA8C DUP3 DUP3 PUSH2 0x983 JUMP JUMPDEST ISZERO PUSH2 0x4C8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C42 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x4C8 DUP2 PUSH2 0x9F2 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB50 JUMPI PUSH2 0x444 DUP4 PUSH2 0xD48 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xBAA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xBA7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xC7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST POP PUSH2 0x444 DUP4 DUP4 DUP4 PUSH2 0xDE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xCBE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST PUSH2 0xCC6 PUSH2 0xE0D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xCC6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST PUSH2 0xCF9 DUP3 DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH2 0xD06 DUP2 PUSH2 0xE40 JUMP JUMPDEST PUSH2 0xD11 DUP4 PUSH1 0x20 PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD22 SWAP3 SWAP2 SWAP1 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4B5 SWAP2 PUSH1 0x4 ADD PUSH2 0x1BAE JUMP JUMPDEST PUSH2 0xD51 DUP2 PUSH2 0xC88 JUMP JUMPDEST PUSH2 0xDB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xDEB DUP4 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0xDF8 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x444 JUMPI PUSH2 0xE07 DUP4 DUP4 PUSH2 0x1034 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE61 DUP4 PUSH1 0x2 PUSH2 0x1BC1 JUMP JUMPDEST PUSH2 0xE6C SWAP1 PUSH1 0x2 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xE83 JUMPI PUSH2 0xE83 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEAD JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xEC8 JUMPI PUSH2 0xEC8 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xEF7 JUMPI PUSH2 0xEF7 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0xF1B DUP5 PUSH1 0x2 PUSH2 0x1BC1 JUMP JUMPDEST PUSH2 0xF26 SWAP1 PUSH1 0x1 PUSH2 0x1BE0 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xF9E JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0xF5A JUMPI PUSH2 0xF5A PUSH2 0x1645 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF70 JUMPI PUSH2 0xF70 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0xF97 DUP2 PUSH2 0x1BF8 JUMP JUMPDEST SWAP1 POP PUSH2 0xF29 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xFED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xFFD DUP2 PUSH2 0xD48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFED DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C82 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1071 SWAP2 SWAP1 PUSH2 0x1C0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x10C2 DUP7 DUP4 DUP4 DUP8 PUSH2 0x10CC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1139 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1132 JUMPI PUSH2 0x10E6 DUP6 PUSH2 0xC88 JUMP JUMPDEST PUSH2 0x1132 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST POP DUP2 PUSH2 0x1143 JUMP JUMPDEST PUSH2 0x1143 DUP4 DUP4 PUSH2 0x114B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x115B JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xFED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x11B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x11C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1264 DUP9 DUP4 DUP10 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x127D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128A DUP8 DUP3 DUP9 ADD PUSH2 0x11EA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x12EE PUSH1 0x20 DUP5 ADD PUSH2 0x12AF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFED DUP3 PUSH2 0x12AF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1350 JUMPI PUSH2 0x1350 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x1371 JUMPI PUSH2 0x1371 PUSH2 0x1312 JUMP JUMPDEST PUSH2 0x1384 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1328 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13CB DUP4 PUSH2 0x12AF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x13E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x13F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1406 DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1358 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFED DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1358 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x144B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x146E DUP12 DUP4 DUP13 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP10 POP SWAP8 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1493 DUP12 DUP4 DUP13 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14B5 DUP12 DUP4 DUP13 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D7 DUP12 DUP4 DUP13 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14FA DUP11 DUP3 DUP12 ADD PUSH2 0x11EA JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP13 CALLDATALOAD DUP2 LT ISZERO PUSH2 0x1544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1551 DUP15 DUP15 CALLDATALOAD DUP16 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP13 POP SWAP11 POP PUSH1 0x20 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x1567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1577 DUP15 PUSH1 0x20 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x40 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x158D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159D DUP15 PUSH1 0x40 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP8 POP DUP1 PUSH1 0x60 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15C0 DUP15 PUSH1 0x60 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP7 POP DUP1 PUSH1 0x80 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x15D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E3 DUP15 PUSH1 0x80 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP6 POP DUP1 PUSH1 0xA0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x15F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1606 DUP15 PUSH1 0xA0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x11EA JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0xC0 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x161C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162D DUP14 PUSH1 0xC0 DUP15 ADD CALLDATALOAD DUP15 ADD PUSH2 0x11EA JUMP JUMPDEST DUP2 SWAP4 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x16AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0xDE NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x5 SHL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x176E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY PUSH1 0x0 SWAP5 ADD PUSH1 0x20 ADD SWAP4 DUP5 MSTORE POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP5 SGT ISZERO PUSH2 0x17CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x17E7 PUSH1 0xE0 DUP7 ADD DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x16D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x17F6 PUSH1 0x40 DUP5 ADD PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x1803 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1700 JUMP JUMPDEST POP PUSH2 0x1810 PUSH1 0x60 DUP5 ADD PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x181D PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1700 JUMP JUMPDEST POP PUSH2 0x182B PUSH1 0x80 DUP5 ADD DUP5 PUSH2 0x170D JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x183E DUP4 DUP3 DUP5 PUSH2 0x1755 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x184F PUSH1 0xA0 DUP5 ADD DUP5 PUSH2 0x170D JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0xA0 DUP8 ADD MSTORE PUSH2 0x1862 DUP4 DUP3 DUP5 PUSH2 0x1755 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP6 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x188E PUSH1 0x60 DUP4 ADD DUP8 DUP10 PUSH2 0x16D7 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x18A0 DUP2 DUP8 PUSH2 0x178B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x18B5 DUP2 DUP6 DUP8 PUSH2 0x16D7 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x18E9 JUMPI PUSH2 0x18E9 PUSH2 0x18C1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1967 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE07 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x19A8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1964 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19D0 PUSH1 0xC0 DUP4 ADD DUP11 DUP13 PUSH2 0x16D7 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x19E2 DUP2 DUP11 PUSH2 0x178B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x19F6 DUP2 DUP10 PUSH2 0x1990 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1A0A DUP2 DUP9 PUSH2 0x1990 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1A1E DUP2 DUP8 PUSH2 0x1990 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1A33 DUP2 DUP6 DUP8 PUSH2 0x16D7 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1A6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1A92 JUMPI PUSH2 0x1A92 PUSH2 0x1312 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x1AA3 DUP5 DUP4 ADD PUSH2 0x1328 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 DUP4 ADD DUP5 ADD SWAP2 DUP5 DUP2 ADD SWAP1 DUP9 DUP5 GT ISZERO PUSH2 0x1ABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x18B5 JUMPI DUP5 MLOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x1AC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1B71 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1964 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1BA2 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1964 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xFED PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1BDB JUMPI PUSH2 0x1BDB PUSH2 0x18C1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1BF3 JUMPI PUSH2 0x1BF3 PUSH2 0x18C1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1C07 JUMPI PUSH2 0x1C07 PUSH2 0x18C1 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1671 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1964 JUMP INVALID CHAINID PUSH22 0x6E6374696F6E206D7573742062652063616C6C656420 PUSH21 0x68726F75676820189AB7A9244DF0848122154315AF PUSH18 0xFE140F3DB0FE014031783B0946B8C9D2E336 ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220A5 0xD0 SWAP12 LOG0 PUSH10 0x2A10FD1BF1C1B761F6FB 0xE6 0x2A PUSH17 0xD4090DEF13C49C5E4CE3F54A77F764736F PUSH13 0x634300080D0033000000000000 ","sourceMap":"654:2090:17:-:0;;;1198:4:7;1155:48;;901:44:17;;;;;;;;;-1:-1:-1;919:22:17;:20;:22::i;:::-;654:2090;;5939:280:6;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:6;;216:2:21;5998:66:6;;;198:21:21;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:21;;;338:37;392:19;;5998:66:6;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:6;6140:15;6125:30;;;;;;6174:28;;564:36:21;;;6174:28:6;;552:2:21;537:18;6174:28:6;;;;;;;6074:139;5939:280::o;422:184:21:-;654:2090:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_31":{"entryPoint":null,"id":31,"parameterSlots":0,"returnSlots":0},"@UPGRADER_ROLE_2986":{"entryPoint":null,"id":2986,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_48":{"entryPoint":3272,"id":48,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_1113":{"entryPoint":3223,"id":1113,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_1123":{"entryPoint":3597,"id":1123,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_1008":{"entryPoint":null,"id":1008,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_3169":{"entryPoint":2821,"id":3169,"parameterSlots":1,"returnSlots":0},"@_checkRole_108":{"entryPoint":2546,"id":108,"parameterSlots":1,"returnSlots":0},"@_checkRole_147":{"entryPoint":3311,"id":147,"parameterSlots":2,"returnSlots":0},"@_getImplementation_486":{"entryPoint":2793,"id":486,"parameterSlots":0,"returnSlots":1},"@_grantRole_299":{"entryPoint":2556,"id":299,"parameterSlots":2,"returnSlots":0},"@_msgSender_1567":{"entryPoint":null,"id":1567,"parameterSlots":0,"returnSlots":1},"@_revert_1538":{"entryPoint":4427,"id":1538,"parameterSlots":2,"returnSlots":0},"@_revokeRole_330":{"entryPoint":2690,"id":330,"parameterSlots":2,"returnSlots":0},"@_setImplementation_510":{"entryPoint":3400,"id":510,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_608":{"entryPoint":2845,"id":608,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_555":{"entryPoint":3554,"id":555,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_525":{"entryPoint":4084,"id":525,"parameterSlots":1,"returnSlots":0},"@batchTransferOrRetire_3159":{"entryPoint":2478,"id":3159,"parameterSlots":11,"returnSlots":0},"@functionDelegateCall_1426":{"entryPoint":4148,"id":1426,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1455":{"entryPoint":null,"id":1455,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_1622":{"entryPoint":null,"id":1622,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_1633":{"entryPoint":null,"id":1633,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_162":{"entryPoint":1043,"id":162,"parameterSlots":1,"returnSlots":1},"@grantRole_182":{"entryPoint":1064,"id":182,"parameterSlots":2,"returnSlots":0},"@handleRetirements_3124":{"entryPoint":1783,"id":3124,"parameterSlots":7,"returnSlots":0},"@handleTransfers_3068":{"entryPoint":752,"id":3068,"parameterSlots":4,"returnSlots":0},"@hasRole_95":{"entryPoint":2435,"id":95,"parameterSlots":2,"returnSlots":1},"@initialize_3021":{"entryPoint":2105,"id":3021,"parameterSlots":0,"returnSlots":0},"@isContract_1227":{"entryPoint":3208,"id":1227,"parameterSlots":1,"returnSlots":1},"@paused_1148":{"entryPoint":null,"id":1148,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_1026":{"entryPoint":1609,"id":1026,"parameterSlots":0,"returnSlots":1},"@renounceRole_225":{"entryPoint":1097,"id":225,"parameterSlots":2,"returnSlots":0},"@revokeRole_202":{"entryPoint":2518,"id":202,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1968":{"entryPoint":null,"id":1968,"parameterSlots":1,"returnSlots":1},"@supportsInterface_76":{"entryPoint":697,"id":76,"parameterSlots":1,"returnSlots":1},"@toHexString_1883":{"entryPoint":3666,"id":1883,"parameterSlots":2,"returnSlots":1},"@toHexString_1903":{"entryPoint":3648,"id":1903,"parameterSlots":1,"returnSlots":1},"@upgradeToAndCall_1069":{"entryPoint":1428,"id":1069,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1048":{"entryPoint":1228,"id":1048,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1494":{"entryPoint":4300,"id":1494,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":4783,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata":{"entryPoint":4511,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_available_length_bytes":{"entryPoint":4952,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":4586,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_string":{"entryPoint":5136,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":5039,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5389,"id":null,"parameterSlots":2,"returnSlots":11},"abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":4651,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes_calldata_ptr":{"entryPoint":5168,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory":{"entryPoint":6722,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4758,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":6875,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4811,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4469,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address":{"entryPoint":5888,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5973,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":5847,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":6544,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_signatureBatchTransferPayload_calldata":{"entryPoint":6027,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7183,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6975,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6266,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6588,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7086,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6384,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6442,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6900,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":5755,"id":null,"parameterSlots":2,"returnSlots":2},"access_calldata_tail_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr":{"entryPoint":5723,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr":{"entryPoint":5825,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":4904,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_access_array_uint256_dyn_calldata":{"entryPoint":5901,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":7136,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7105,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":6500,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":7160,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":6359,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6337,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5701,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4882,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:22557:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:21","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:21"},"nodeType":"YulFunctionCall","src":"131:12:21"},"nodeType":"YulExpressionStatement","src":"131:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:21"},"nodeType":"YulFunctionCall","src":"100:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:21"},"nodeType":"YulFunctionCall","src":"96:32:21"},"nodeType":"YulIf","src":"93:52:21"},{"nodeType":"YulVariableDeclaration","src":"154:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:21"},"nodeType":"YulFunctionCall","src":"167:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:21"},"nodeType":"YulFunctionCall","src":"256:12:21"},"nodeType":"YulExpressionStatement","src":"256:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:21","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:21"},"nodeType":"YulFunctionCall","src":"230:20:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:21"},"nodeType":"YulFunctionCall","src":"219:32:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:21"},"nodeType":"YulFunctionCall","src":"209:43:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:21"},"nodeType":"YulFunctionCall","src":"202:51:21"},"nodeType":"YulIf","src":"199:71:21"},{"nodeType":"YulAssignment","src":"279:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:21","type":""}],"src":"14:286:21"},{"body":{"nodeType":"YulBlock","src":"400:92:21","statements":[{"nodeType":"YulAssignment","src":"410:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:21"},"nodeType":"YulFunctionCall","src":"418:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:21"},"nodeType":"YulFunctionCall","src":"470:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:21"},"nodeType":"YulFunctionCall","src":"463:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:21"},"nodeType":"YulFunctionCall","src":"445:41:21"},"nodeType":"YulExpressionStatement","src":"445:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:21","type":""}],"src":"305:187:21"},{"body":{"nodeType":"YulBlock","src":"619:283:21","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:21"},"nodeType":"YulFunctionCall","src":"670:12:21"},"nodeType":"YulExpressionStatement","src":"670:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"647:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"655:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"643:3:21"},"nodeType":"YulFunctionCall","src":"643:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"662:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"639:3:21"},"nodeType":"YulFunctionCall","src":"639:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"632:6:21"},"nodeType":"YulFunctionCall","src":"632:35:21"},"nodeType":"YulIf","src":"629:55:21"},{"nodeType":"YulAssignment","src":"693:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"716:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"703:12:21"},"nodeType":"YulFunctionCall","src":"703:20:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"693:6:21"}]},{"body":{"nodeType":"YulBlock","src":"766:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"775:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"778:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"768:6:21"},"nodeType":"YulFunctionCall","src":"768:12:21"},"nodeType":"YulExpressionStatement","src":"768:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"738:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"754:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"758:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"750:3:21"},"nodeType":"YulFunctionCall","src":"750:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"762:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"746:3:21"},"nodeType":"YulFunctionCall","src":"746:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"735:2:21"},"nodeType":"YulFunctionCall","src":"735:30:21"},"nodeType":"YulIf","src":"732:50:21"},{"nodeType":"YulAssignment","src":"791:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"807:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"815:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"803:3:21"},"nodeType":"YulFunctionCall","src":"803:17:21"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"791:8:21"}]},{"body":{"nodeType":"YulBlock","src":"880:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"889:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"892:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"882:6:21"},"nodeType":"YulFunctionCall","src":"882:12:21"},"nodeType":"YulExpressionStatement","src":"882:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"843:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"855:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"858:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"851:3:21"},"nodeType":"YulFunctionCall","src":"851:14:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"839:3:21"},"nodeType":"YulFunctionCall","src":"839:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"868:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"835:3:21"},"nodeType":"YulFunctionCall","src":"835:38:21"},{"name":"end","nodeType":"YulIdentifier","src":"875:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"832:2:21"},"nodeType":"YulFunctionCall","src":"832:47:21"},"nodeType":"YulIf","src":"829:67:21"}]},"name":"abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"582:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"590:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"598:8:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"608:6:21","type":""}],"src":"497:405:21"},{"body":{"nodeType":"YulBlock","src":"979:275:21","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:21"},"nodeType":"YulFunctionCall","src":"1030:12:21"},"nodeType":"YulExpressionStatement","src":"1030:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1007:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1015:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1003:3:21"},"nodeType":"YulFunctionCall","src":"1003:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"1022:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"999:3:21"},"nodeType":"YulFunctionCall","src":"999:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"992:6:21"},"nodeType":"YulFunctionCall","src":"992:35:21"},"nodeType":"YulIf","src":"989:55:21"},{"nodeType":"YulAssignment","src":"1053:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1076:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1063:12:21"},"nodeType":"YulFunctionCall","src":"1063:20:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1053:6:21"}]},{"body":{"nodeType":"YulBlock","src":"1126:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1135:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1138:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1128:6:21"},"nodeType":"YulFunctionCall","src":"1128:12:21"},"nodeType":"YulExpressionStatement","src":"1128:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1098:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1114:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1118:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1110:3:21"},"nodeType":"YulFunctionCall","src":"1110:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"1122:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1106:3:21"},"nodeType":"YulFunctionCall","src":"1106:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1095:2:21"},"nodeType":"YulFunctionCall","src":"1095:30:21"},"nodeType":"YulIf","src":"1092:50:21"},{"nodeType":"YulAssignment","src":"1151:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1167:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1175:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1163:3:21"},"nodeType":"YulFunctionCall","src":"1163:17:21"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1151:8:21"}]},{"body":{"nodeType":"YulBlock","src":"1232:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1241:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1244:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1234:6:21"},"nodeType":"YulFunctionCall","src":"1234:12:21"},"nodeType":"YulExpressionStatement","src":"1234:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1203:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"1211:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1199:3:21"},"nodeType":"YulFunctionCall","src":"1199:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"1220:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1195:3:21"},"nodeType":"YulFunctionCall","src":"1195:30:21"},{"name":"end","nodeType":"YulIdentifier","src":"1227:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1192:2:21"},"nodeType":"YulFunctionCall","src":"1192:39:21"},"nodeType":"YulIf","src":"1189:59:21"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"942:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"950:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"958:8:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"968:6:21","type":""}],"src":"907:347:21"},{"body":{"nodeType":"YulBlock","src":"1449:642:21","statements":[{"body":{"nodeType":"YulBlock","src":"1495:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1504:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1507:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1497:6:21"},"nodeType":"YulFunctionCall","src":"1497:12:21"},"nodeType":"YulExpressionStatement","src":"1497:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1470:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1479:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1466:3:21"},"nodeType":"YulFunctionCall","src":"1466:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1491:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1462:3:21"},"nodeType":"YulFunctionCall","src":"1462:32:21"},"nodeType":"YulIf","src":"1459:52:21"},{"nodeType":"YulVariableDeclaration","src":"1520:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1547:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1534:12:21"},"nodeType":"YulFunctionCall","src":"1534:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1524:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1566:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1588:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1580:3:21"},"nodeType":"YulFunctionCall","src":"1580:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"1592:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1576:3:21"},"nodeType":"YulFunctionCall","src":"1576:18:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1570:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1621:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1630:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1633:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1623:6:21"},"nodeType":"YulFunctionCall","src":"1623:12:21"},"nodeType":"YulExpressionStatement","src":"1623:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1609:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1617:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1606:2:21"},"nodeType":"YulFunctionCall","src":"1606:14:21"},"nodeType":"YulIf","src":"1603:34:21"},{"nodeType":"YulVariableDeclaration","src":"1646:134:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1752:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1763:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1748:3:21"},"nodeType":"YulFunctionCall","src":"1748:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1772:7:21"}],"functionName":{"name":"abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"1672:75:21"},"nodeType":"YulFunctionCall","src":"1672:108:21"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1650:8:21","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1660:8:21","type":""}]},{"nodeType":"YulAssignment","src":"1789:18:21","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1799:8:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1789:6:21"}]},{"nodeType":"YulAssignment","src":"1816:18:21","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1826:8:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1816:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1843:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1876:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1887:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1872:3:21"},"nodeType":"YulFunctionCall","src":"1872:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1859:12:21"},"nodeType":"YulFunctionCall","src":"1859:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1847:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1920:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1929:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1932:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1922:6:21"},"nodeType":"YulFunctionCall","src":"1922:12:21"},"nodeType":"YulExpressionStatement","src":"1922:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1906:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1916:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1903:2:21"},"nodeType":"YulFunctionCall","src":"1903:16:21"},"nodeType":"YulIf","src":"1900:36:21"},{"nodeType":"YulVariableDeclaration","src":"1945:86:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2001:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2012:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1997:3:21"},"nodeType":"YulFunctionCall","src":"1997:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2023:7:21"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1971:25:21"},"nodeType":"YulFunctionCall","src":"1971:60:21"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"1949:8:21","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"1959:8:21","type":""}]},{"nodeType":"YulAssignment","src":"2040:18:21","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"2050:8:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2040:6:21"}]},{"nodeType":"YulAssignment","src":"2067:18:21","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2077:8:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2067:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1391:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1402:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1414:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1422:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1430:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1438:6:21","type":""}],"src":"1259:832:21"},{"body":{"nodeType":"YulBlock","src":"2166:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"2212:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2221:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2224:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2214:6:21"},"nodeType":"YulFunctionCall","src":"2214:12:21"},"nodeType":"YulExpressionStatement","src":"2214:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2187:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2196:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2183:3:21"},"nodeType":"YulFunctionCall","src":"2183:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2208:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2179:3:21"},"nodeType":"YulFunctionCall","src":"2179:32:21"},"nodeType":"YulIf","src":"2176:52:21"},{"nodeType":"YulAssignment","src":"2237:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2260:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2247:12:21"},"nodeType":"YulFunctionCall","src":"2247:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2237:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2132:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2143:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2155:6:21","type":""}],"src":"2096:180:21"},{"body":{"nodeType":"YulBlock","src":"2382:76:21","statements":[{"nodeType":"YulAssignment","src":"2392:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2404:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2415:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2400:3:21"},"nodeType":"YulFunctionCall","src":"2400:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2392:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2434:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"2445:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2427:6:21"},"nodeType":"YulFunctionCall","src":"2427:25:21"},"nodeType":"YulExpressionStatement","src":"2427:25:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2351:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2362:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2373:4:21","type":""}],"src":"2281:177:21"},{"body":{"nodeType":"YulBlock","src":"2512:124:21","statements":[{"nodeType":"YulAssignment","src":"2522:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2544:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2531:12:21"},"nodeType":"YulFunctionCall","src":"2531:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2522:5:21"}]},{"body":{"nodeType":"YulBlock","src":"2614:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2623:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2626:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2616:6:21"},"nodeType":"YulFunctionCall","src":"2616:12:21"},"nodeType":"YulExpressionStatement","src":"2616:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2573:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2584:5:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2599:3:21","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2604:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2595:3:21"},"nodeType":"YulFunctionCall","src":"2595:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"2608:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2591:3:21"},"nodeType":"YulFunctionCall","src":"2591:19:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2580:3:21"},"nodeType":"YulFunctionCall","src":"2580:31:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2570:2:21"},"nodeType":"YulFunctionCall","src":"2570:42:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2563:6:21"},"nodeType":"YulFunctionCall","src":"2563:50:21"},"nodeType":"YulIf","src":"2560:70:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2491:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2502:5:21","type":""}],"src":"2463:173:21"},{"body":{"nodeType":"YulBlock","src":"2728:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"2774:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2783:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2786:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2776:6:21"},"nodeType":"YulFunctionCall","src":"2776:12:21"},"nodeType":"YulExpressionStatement","src":"2776:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2749:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2758:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2745:3:21"},"nodeType":"YulFunctionCall","src":"2745:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2770:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2741:3:21"},"nodeType":"YulFunctionCall","src":"2741:32:21"},"nodeType":"YulIf","src":"2738:52:21"},{"nodeType":"YulAssignment","src":"2799:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2822:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2809:12:21"},"nodeType":"YulFunctionCall","src":"2809:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2799:6:21"}]},{"nodeType":"YulAssignment","src":"2841:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2874:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2885:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2870:3:21"},"nodeType":"YulFunctionCall","src":"2870:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2851:18:21"},"nodeType":"YulFunctionCall","src":"2851:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2841:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2686:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2697:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2709:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2717:6:21","type":""}],"src":"2641:254:21"},{"body":{"nodeType":"YulBlock","src":"2970:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"3016:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3025:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3018:6:21"},"nodeType":"YulFunctionCall","src":"3018:12:21"},"nodeType":"YulExpressionStatement","src":"3018:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2991:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3000:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2987:3:21"},"nodeType":"YulFunctionCall","src":"2987:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3012:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2983:3:21"},"nodeType":"YulFunctionCall","src":"2983:32:21"},"nodeType":"YulIf","src":"2980:52:21"},{"nodeType":"YulAssignment","src":"3041:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3070:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3051:18:21"},"nodeType":"YulFunctionCall","src":"3051:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3041:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2936:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2947:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2959:6:21","type":""}],"src":"2900:186:21"},{"body":{"nodeType":"YulBlock","src":"3123:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3140:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3147:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3152:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3143:3:21"},"nodeType":"YulFunctionCall","src":"3143:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3133:6:21"},"nodeType":"YulFunctionCall","src":"3133:31:21"},"nodeType":"YulExpressionStatement","src":"3133:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3180:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3183:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3173:6:21"},"nodeType":"YulFunctionCall","src":"3173:15:21"},"nodeType":"YulExpressionStatement","src":"3173:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3204:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3207:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3197:6:21"},"nodeType":"YulFunctionCall","src":"3197:15:21"},"nodeType":"YulExpressionStatement","src":"3197:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3091:127:21"},{"body":{"nodeType":"YulBlock","src":"3268:230:21","statements":[{"nodeType":"YulAssignment","src":"3278:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3294:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3288:5:21"},"nodeType":"YulFunctionCall","src":"3288:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3278:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"3306:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3328:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3344:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"3350:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:21"},"nodeType":"YulFunctionCall","src":"3340:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3359:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3355:3:21"},"nodeType":"YulFunctionCall","src":"3355:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3336:3:21"},"nodeType":"YulFunctionCall","src":"3336:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3324:3:21"},"nodeType":"YulFunctionCall","src":"3324:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3310:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3439:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3441:16:21"},"nodeType":"YulFunctionCall","src":"3441:18:21"},"nodeType":"YulExpressionStatement","src":"3441:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3382:10:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3402:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3406:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3398:3:21"},"nodeType":"YulFunctionCall","src":"3398:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"3410:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3394:3:21"},"nodeType":"YulFunctionCall","src":"3394:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3379:2:21"},"nodeType":"YulFunctionCall","src":"3379:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3418:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3430:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3415:2:21"},"nodeType":"YulFunctionCall","src":"3415:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3376:2:21"},"nodeType":"YulFunctionCall","src":"3376:62:21"},"nodeType":"YulIf","src":"3373:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3477:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3481:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3470:6:21"},"nodeType":"YulFunctionCall","src":"3470:22:21"},"nodeType":"YulExpressionStatement","src":"3470:22:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3248:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3257:6:21","type":""}],"src":"3223:275:21"},{"body":{"nodeType":"YulBlock","src":"3577:332:21","statements":[{"body":{"nodeType":"YulBlock","src":"3621:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3623:16:21"},"nodeType":"YulFunctionCall","src":"3623:18:21"},"nodeType":"YulExpressionStatement","src":"3623:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3593:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3609:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3613:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3605:3:21"},"nodeType":"YulFunctionCall","src":"3605:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"3617:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3601:3:21"},"nodeType":"YulFunctionCall","src":"3601:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3590:2:21"},"nodeType":"YulFunctionCall","src":"3590:30:21"},"nodeType":"YulIf","src":"3587:56:21"},{"nodeType":"YulAssignment","src":"3652:66:21","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3689:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3697:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3685:3:21"},"nodeType":"YulFunctionCall","src":"3685:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3706:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3702:3:21"},"nodeType":"YulFunctionCall","src":"3702:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3681:3:21"},"nodeType":"YulFunctionCall","src":"3681:29:21"},{"kind":"number","nodeType":"YulLiteral","src":"3712:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3677:3:21"},"nodeType":"YulFunctionCall","src":"3677:40:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3661:15:21"},"nodeType":"YulFunctionCall","src":"3661:57:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3652:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3734:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"3741:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3727:6:21"},"nodeType":"YulFunctionCall","src":"3727:21:21"},"nodeType":"YulExpressionStatement","src":"3727:21:21"},{"body":{"nodeType":"YulBlock","src":"3786:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3795:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3798:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3788:6:21"},"nodeType":"YulFunctionCall","src":"3788:12:21"},"nodeType":"YulExpressionStatement","src":"3788:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3767:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3772:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3763:3:21"},"nodeType":"YulFunctionCall","src":"3763:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"3781:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3760:2:21"},"nodeType":"YulFunctionCall","src":"3760:25:21"},"nodeType":"YulIf","src":"3757:45:21"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3828:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"3835:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3824:3:21"},"nodeType":"YulFunctionCall","src":"3824:16:21"},{"name":"src","nodeType":"YulIdentifier","src":"3842:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3847:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3811:12:21"},"nodeType":"YulFunctionCall","src":"3811:43:21"},"nodeType":"YulExpressionStatement","src":"3811:43:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3878:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"3885:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3874:3:21"},"nodeType":"YulFunctionCall","src":"3874:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3894:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3870:3:21"},"nodeType":"YulFunctionCall","src":"3870:29:21"},{"kind":"number","nodeType":"YulLiteral","src":"3901:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3863:6:21"},"nodeType":"YulFunctionCall","src":"3863:40:21"},"nodeType":"YulExpressionStatement","src":"3863:40:21"}]},"name":"abi_decode_available_length_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3546:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"3551:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3559:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3567:5:21","type":""}],"src":"3503:406:21"},{"body":{"nodeType":"YulBlock","src":"4010:427:21","statements":[{"body":{"nodeType":"YulBlock","src":"4056:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4065:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4068:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4058:6:21"},"nodeType":"YulFunctionCall","src":"4058:12:21"},"nodeType":"YulExpressionStatement","src":"4058:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4031:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4040:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4027:3:21"},"nodeType":"YulFunctionCall","src":"4027:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4052:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4023:3:21"},"nodeType":"YulFunctionCall","src":"4023:32:21"},"nodeType":"YulIf","src":"4020:52:21"},{"nodeType":"YulAssignment","src":"4081:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4091:18:21"},"nodeType":"YulFunctionCall","src":"4091:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4129:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4160:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4171:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4156:3:21"},"nodeType":"YulFunctionCall","src":"4156:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4143:12:21"},"nodeType":"YulFunctionCall","src":"4143:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4133:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4218:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4227:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4230:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4220:6:21"},"nodeType":"YulFunctionCall","src":"4220:12:21"},"nodeType":"YulExpressionStatement","src":"4220:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4190:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4206:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"4210:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4202:3:21"},"nodeType":"YulFunctionCall","src":"4202:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"4214:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4198:3:21"},"nodeType":"YulFunctionCall","src":"4198:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4187:2:21"},"nodeType":"YulFunctionCall","src":"4187:30:21"},"nodeType":"YulIf","src":"4184:50:21"},{"nodeType":"YulVariableDeclaration","src":"4243:32:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4257:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4268:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4253:3:21"},"nodeType":"YulFunctionCall","src":"4253:22:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4247:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4323:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4332:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4335:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4325:6:21"},"nodeType":"YulFunctionCall","src":"4325:12:21"},"nodeType":"YulExpressionStatement","src":"4325:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4302:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4306:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4298:3:21"},"nodeType":"YulFunctionCall","src":"4298:13:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4313:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4294:3:21"},"nodeType":"YulFunctionCall","src":"4294:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4287:6:21"},"nodeType":"YulFunctionCall","src":"4287:35:21"},"nodeType":"YulIf","src":"4284:55:21"},{"nodeType":"YulAssignment","src":"4348:83:21","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4396:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4400:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4392:3:21"},"nodeType":"YulFunctionCall","src":"4392:11:21"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4418:2:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4405:12:21"},"nodeType":"YulFunctionCall","src":"4405:16:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4423:7:21"}],"functionName":{"name":"abi_decode_available_length_bytes","nodeType":"YulIdentifier","src":"4358:33:21"},"nodeType":"YulFunctionCall","src":"4358:73:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4348:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3968:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3979:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3991:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3999:6:21","type":""}],"src":"3914:523:21"},{"body":{"nodeType":"YulBlock","src":"4495:168:21","statements":[{"body":{"nodeType":"YulBlock","src":"4544:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4553:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4556:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4546:6:21"},"nodeType":"YulFunctionCall","src":"4546:12:21"},"nodeType":"YulExpressionStatement","src":"4546:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4523:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4531:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4519:3:21"},"nodeType":"YulFunctionCall","src":"4519:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"4538:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4515:3:21"},"nodeType":"YulFunctionCall","src":"4515:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4508:6:21"},"nodeType":"YulFunctionCall","src":"4508:35:21"},"nodeType":"YulIf","src":"4505:55:21"},{"nodeType":"YulAssignment","src":"4569:88:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4616:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4624:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4612:3:21"},"nodeType":"YulFunctionCall","src":"4612:17:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4644:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4631:12:21"},"nodeType":"YulFunctionCall","src":"4631:20:21"},{"name":"end","nodeType":"YulIdentifier","src":"4653:3:21"}],"functionName":{"name":"abi_decode_available_length_bytes","nodeType":"YulIdentifier","src":"4578:33:21"},"nodeType":"YulFunctionCall","src":"4578:79:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4569:5:21"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4469:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"4477:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4485:5:21","type":""}],"src":"4442:221:21"},{"body":{"nodeType":"YulBlock","src":"4939:1163:21","statements":[{"body":{"nodeType":"YulBlock","src":"4986:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4995:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4998:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4988:6:21"},"nodeType":"YulFunctionCall","src":"4988:12:21"},"nodeType":"YulExpressionStatement","src":"4988:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4960:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4969:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4956:3:21"},"nodeType":"YulFunctionCall","src":"4956:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4981:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4952:3:21"},"nodeType":"YulFunctionCall","src":"4952:33:21"},"nodeType":"YulIf","src":"4949:53:21"},{"nodeType":"YulVariableDeclaration","src":"5011:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5038:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5025:12:21"},"nodeType":"YulFunctionCall","src":"5025:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5015:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5057:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5075:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"5079:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5071:3:21"},"nodeType":"YulFunctionCall","src":"5071:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"5083:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5067:3:21"},"nodeType":"YulFunctionCall","src":"5067:18:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5061:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5112:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5121:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5124:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5114:6:21"},"nodeType":"YulFunctionCall","src":"5114:12:21"},"nodeType":"YulExpressionStatement","src":"5114:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5100:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5108:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5097:2:21"},"nodeType":"YulFunctionCall","src":"5097:14:21"},"nodeType":"YulIf","src":"5094:34:21"},{"nodeType":"YulVariableDeclaration","src":"5137:134:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5243:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5254:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5239:3:21"},"nodeType":"YulFunctionCall","src":"5239:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5263:7:21"}],"functionName":{"name":"abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"5163:75:21"},"nodeType":"YulFunctionCall","src":"5163:108:21"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"5141:8:21","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"5151:8:21","type":""}]},{"nodeType":"YulAssignment","src":"5280:18:21","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"5290:8:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5280:6:21"}]},{"nodeType":"YulAssignment","src":"5307:18:21","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"5317:8:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5307:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5334:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5367:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5378:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5363:3:21"},"nodeType":"YulFunctionCall","src":"5363:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5350:12:21"},"nodeType":"YulFunctionCall","src":"5350:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5338:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5411:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5420:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5423:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5413:6:21"},"nodeType":"YulFunctionCall","src":"5413:12:21"},"nodeType":"YulExpressionStatement","src":"5413:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5397:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5407:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5394:2:21"},"nodeType":"YulFunctionCall","src":"5394:16:21"},"nodeType":"YulIf","src":"5391:36:21"},{"nodeType":"YulAssignment","src":"5436:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5468:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5479:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5464:3:21"},"nodeType":"YulFunctionCall","src":"5464:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5490:7:21"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"5446:17:21"},"nodeType":"YulFunctionCall","src":"5446:52:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5436:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5507:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5540:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5551:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5536:3:21"},"nodeType":"YulFunctionCall","src":"5536:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5523:12:21"},"nodeType":"YulFunctionCall","src":"5523:32:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5511:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5584:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5593:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5596:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5586:6:21"},"nodeType":"YulFunctionCall","src":"5586:12:21"},"nodeType":"YulExpressionStatement","src":"5586:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5570:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5580:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5567:2:21"},"nodeType":"YulFunctionCall","src":"5567:16:21"},"nodeType":"YulIf","src":"5564:36:21"},{"nodeType":"YulAssignment","src":"5609:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5641:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5652:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5637:3:21"},"nodeType":"YulFunctionCall","src":"5637:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5663:7:21"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"5619:17:21"},"nodeType":"YulFunctionCall","src":"5619:52:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5609:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5680:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5713:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5724:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5709:3:21"},"nodeType":"YulFunctionCall","src":"5709:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5696:12:21"},"nodeType":"YulFunctionCall","src":"5696:32:21"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"5684:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5757:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5766:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5769:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5759:6:21"},"nodeType":"YulFunctionCall","src":"5759:12:21"},"nodeType":"YulExpressionStatement","src":"5759:12:21"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"5743:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5753:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5740:2:21"},"nodeType":"YulFunctionCall","src":"5740:16:21"},"nodeType":"YulIf","src":"5737:36:21"},{"nodeType":"YulAssignment","src":"5782:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5814:9:21"},{"name":"offset_3","nodeType":"YulIdentifier","src":"5825:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5810:3:21"},"nodeType":"YulFunctionCall","src":"5810:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5836:7:21"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"5792:17:21"},"nodeType":"YulFunctionCall","src":"5792:52:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5782:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5853:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5886:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5897:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5882:3:21"},"nodeType":"YulFunctionCall","src":"5882:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5869:12:21"},"nodeType":"YulFunctionCall","src":"5869:33:21"},"variables":[{"name":"offset_4","nodeType":"YulTypedName","src":"5857:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5931:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5940:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5943:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5933:6:21"},"nodeType":"YulFunctionCall","src":"5933:12:21"},"nodeType":"YulExpressionStatement","src":"5933:12:21"}]},"condition":{"arguments":[{"name":"offset_4","nodeType":"YulIdentifier","src":"5917:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5927:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5914:2:21"},"nodeType":"YulFunctionCall","src":"5914:16:21"},"nodeType":"YulIf","src":"5911:36:21"},{"nodeType":"YulVariableDeclaration","src":"5956:86:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6012:9:21"},{"name":"offset_4","nodeType":"YulIdentifier","src":"6023:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6008:3:21"},"nodeType":"YulFunctionCall","src":"6008:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6034:7:21"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"5982:25:21"},"nodeType":"YulFunctionCall","src":"5982:60:21"},"variables":[{"name":"value5_1","nodeType":"YulTypedName","src":"5960:8:21","type":""},{"name":"value6_1","nodeType":"YulTypedName","src":"5970:8:21","type":""}]},{"nodeType":"YulAssignment","src":"6051:18:21","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"6061:8:21"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"6051:6:21"}]},{"nodeType":"YulAssignment","src":"6078:18:21","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"6088:8:21"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"6078:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4857:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4868:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4880:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4888:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4896:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4904:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4912:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4920:6:21","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4928:6:21","type":""}],"src":"4668:1434:21"},{"body":{"nodeType":"YulBlock","src":"6516:1657:21","statements":[{"body":{"nodeType":"YulBlock","src":"6563:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6572:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6575:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6565:6:21"},"nodeType":"YulFunctionCall","src":"6565:12:21"},"nodeType":"YulExpressionStatement","src":"6565:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6537:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6546:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6533:3:21"},"nodeType":"YulFunctionCall","src":"6533:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6558:3:21","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6529:3:21"},"nodeType":"YulFunctionCall","src":"6529:33:21"},"nodeType":"YulIf","src":"6526:53:21"},{"nodeType":"YulVariableDeclaration","src":"6588:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6606:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"6610:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6602:3:21"},"nodeType":"YulFunctionCall","src":"6602:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"6614:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6598:3:21"},"nodeType":"YulFunctionCall","src":"6598:18:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6592:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6660:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6669:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6672:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6662:6:21"},"nodeType":"YulFunctionCall","src":"6662:12:21"},"nodeType":"YulExpressionStatement","src":"6662:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6644:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6631:12:21"},"nodeType":"YulFunctionCall","src":"6631:23:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6656:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6628:2:21"},"nodeType":"YulFunctionCall","src":"6628:31:21"},"nodeType":"YulIf","src":"6625:51:21"},{"nodeType":"YulVariableDeclaration","src":"6685:151:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6791:9:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6815:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6802:12:21"},"nodeType":"YulFunctionCall","src":"6802:23:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6787:3:21"},"nodeType":"YulFunctionCall","src":"6787:39:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6828:7:21"}],"functionName":{"name":"abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"6711:75:21"},"nodeType":"YulFunctionCall","src":"6711:125:21"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"6689:8:21","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"6699:8:21","type":""}]},{"nodeType":"YulAssignment","src":"6845:18:21","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"6855:8:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6845:6:21"}]},{"nodeType":"YulAssignment","src":"6872:18:21","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6882:8:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6872:6:21"}]},{"body":{"nodeType":"YulBlock","src":"6943:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6952:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6955:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6945:6:21"},"nodeType":"YulFunctionCall","src":"6945:12:21"},"nodeType":"YulExpressionStatement","src":"6945:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6922:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6933:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6918:3:21"},"nodeType":"YulFunctionCall","src":"6918:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6905:12:21"},"nodeType":"YulFunctionCall","src":"6905:32:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6939:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6902:2:21"},"nodeType":"YulFunctionCall","src":"6902:40:21"},"nodeType":"YulIf","src":"6899:60:21"},{"nodeType":"YulVariableDeclaration","src":"6968:160:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7074:9:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7102:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7113:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7098:3:21"},"nodeType":"YulFunctionCall","src":"7098:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7085:12:21"},"nodeType":"YulFunctionCall","src":"7085:32:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7070:3:21"},"nodeType":"YulFunctionCall","src":"7070:48:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7120:7:21"}],"functionName":{"name":"abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"6994:75:21"},"nodeType":"YulFunctionCall","src":"6994:134:21"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"6972:8:21","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"6982:8:21","type":""}]},{"nodeType":"YulAssignment","src":"7137:18:21","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"7147:8:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7137:6:21"}]},{"nodeType":"YulAssignment","src":"7164:18:21","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"7174:8:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7164:6:21"}]},{"body":{"nodeType":"YulBlock","src":"7235:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7244:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7247:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7237:6:21"},"nodeType":"YulFunctionCall","src":"7237:12:21"},"nodeType":"YulExpressionStatement","src":"7237:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7214:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7225:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7210:3:21"},"nodeType":"YulFunctionCall","src":"7210:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7197:12:21"},"nodeType":"YulFunctionCall","src":"7197:32:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7231:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7194:2:21"},"nodeType":"YulFunctionCall","src":"7194:40:21"},"nodeType":"YulIf","src":"7191:60:21"},{"nodeType":"YulAssignment","src":"7260:86:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7292:9:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7320:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7331:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7316:3:21"},"nodeType":"YulFunctionCall","src":"7316:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7303:12:21"},"nodeType":"YulFunctionCall","src":"7303:32:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7288:3:21"},"nodeType":"YulFunctionCall","src":"7288:48:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7338:7:21"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"7270:17:21"},"nodeType":"YulFunctionCall","src":"7270:76:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7260:6:21"}]},{"body":{"nodeType":"YulBlock","src":"7399:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7408:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7411:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7401:6:21"},"nodeType":"YulFunctionCall","src":"7401:12:21"},"nodeType":"YulExpressionStatement","src":"7401:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7378:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7389:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7374:3:21"},"nodeType":"YulFunctionCall","src":"7374:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7361:12:21"},"nodeType":"YulFunctionCall","src":"7361:32:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7395:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7358:2:21"},"nodeType":"YulFunctionCall","src":"7358:40:21"},"nodeType":"YulIf","src":"7355:60:21"},{"nodeType":"YulAssignment","src":"7424:86:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7456:9:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7484:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7495:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7480:3:21"},"nodeType":"YulFunctionCall","src":"7480:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7467:12:21"},"nodeType":"YulFunctionCall","src":"7467:32:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7452:3:21"},"nodeType":"YulFunctionCall","src":"7452:48:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7502:7:21"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"7434:17:21"},"nodeType":"YulFunctionCall","src":"7434:76:21"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7424:6:21"}]},{"body":{"nodeType":"YulBlock","src":"7564:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7573:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7576:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7566:6:21"},"nodeType":"YulFunctionCall","src":"7566:12:21"},"nodeType":"YulExpressionStatement","src":"7566:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7542:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7553:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7538:3:21"},"nodeType":"YulFunctionCall","src":"7538:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7525:12:21"},"nodeType":"YulFunctionCall","src":"7525:33:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7560:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7522:2:21"},"nodeType":"YulFunctionCall","src":"7522:41:21"},"nodeType":"YulIf","src":"7519:61:21"},{"nodeType":"YulAssignment","src":"7589:87:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7621:9:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7649:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7660:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7645:3:21"},"nodeType":"YulFunctionCall","src":"7645:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7632:12:21"},"nodeType":"YulFunctionCall","src":"7632:33:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7617:3:21"},"nodeType":"YulFunctionCall","src":"7617:49:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7668:7:21"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"7599:17:21"},"nodeType":"YulFunctionCall","src":"7599:77:21"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7589:6:21"}]},{"body":{"nodeType":"YulBlock","src":"7730:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7739:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7742:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7732:6:21"},"nodeType":"YulFunctionCall","src":"7732:12:21"},"nodeType":"YulExpressionStatement","src":"7732:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7708:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7719:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7704:3:21"},"nodeType":"YulFunctionCall","src":"7704:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7691:12:21"},"nodeType":"YulFunctionCall","src":"7691:33:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7726:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7688:2:21"},"nodeType":"YulFunctionCall","src":"7688:41:21"},"nodeType":"YulIf","src":"7685:61:21"},{"nodeType":"YulVariableDeclaration","src":"7755:111:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7811:9:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7839:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7850:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7835:3:21"},"nodeType":"YulFunctionCall","src":"7835:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7822:12:21"},"nodeType":"YulFunctionCall","src":"7822:33:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7807:3:21"},"nodeType":"YulFunctionCall","src":"7807:49:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7858:7:21"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"7781:25:21"},"nodeType":"YulFunctionCall","src":"7781:85:21"},"variables":[{"name":"value7_1","nodeType":"YulTypedName","src":"7759:8:21","type":""},{"name":"value8_1","nodeType":"YulTypedName","src":"7769:8:21","type":""}]},{"nodeType":"YulAssignment","src":"7875:18:21","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"7885:8:21"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"7875:6:21"}]},{"nodeType":"YulAssignment","src":"7902:18:21","value":{"name":"value8_1","nodeType":"YulIdentifier","src":"7912:8:21"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"7902:6:21"}]},{"body":{"nodeType":"YulBlock","src":"7974:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7983:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7986:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7976:6:21"},"nodeType":"YulFunctionCall","src":"7976:12:21"},"nodeType":"YulExpressionStatement","src":"7976:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7952:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7963:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7948:3:21"},"nodeType":"YulFunctionCall","src":"7948:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7935:12:21"},"nodeType":"YulFunctionCall","src":"7935:33:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7970:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7932:2:21"},"nodeType":"YulFunctionCall","src":"7932:41:21"},"nodeType":"YulIf","src":"7929:61:21"},{"nodeType":"YulVariableDeclaration","src":"7999:112:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8056:9:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8084:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8095:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8080:3:21"},"nodeType":"YulFunctionCall","src":"8080:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8067:12:21"},"nodeType":"YulFunctionCall","src":"8067:33:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8052:3:21"},"nodeType":"YulFunctionCall","src":"8052:49:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8103:7:21"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"8026:25:21"},"nodeType":"YulFunctionCall","src":"8026:85:21"},"variables":[{"name":"value9_1","nodeType":"YulTypedName","src":"8003:8:21","type":""},{"name":"value10_1","nodeType":"YulTypedName","src":"8013:9:21","type":""}]},{"nodeType":"YulAssignment","src":"8120:18:21","value":{"name":"value9_1","nodeType":"YulIdentifier","src":"8130:8:21"},"variableNames":[{"name":"value9","nodeType":"YulIdentifier","src":"8120:6:21"}]},{"nodeType":"YulAssignment","src":"8147:20:21","value":{"name":"value10_1","nodeType":"YulIdentifier","src":"8158:9:21"},"variableNames":[{"name":"value10","nodeType":"YulIdentifier","src":"8147:7:21"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6401:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6412:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6424:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6432:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6440:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6448:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6456:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6464:6:21","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6472:6:21","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6480:6:21","type":""},{"name":"value8","nodeType":"YulTypedName","src":"6488:6:21","type":""},{"name":"value9","nodeType":"YulTypedName","src":"6496:6:21","type":""},{"name":"value10","nodeType":"YulTypedName","src":"6504:7:21","type":""}],"src":"6107:2066:21"},{"body":{"nodeType":"YulBlock","src":"8210:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8227:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8234:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8239:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8230:3:21"},"nodeType":"YulFunctionCall","src":"8230:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8220:6:21"},"nodeType":"YulFunctionCall","src":"8220:31:21"},"nodeType":"YulExpressionStatement","src":"8220:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8267:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8270:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8260:6:21"},"nodeType":"YulFunctionCall","src":"8260:15:21"},"nodeType":"YulExpressionStatement","src":"8260:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8291:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8294:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8284:6:21"},"nodeType":"YulFunctionCall","src":"8284:15:21"},"nodeType":"YulExpressionStatement","src":"8284:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8178:127:21"},{"body":{"nodeType":"YulBlock","src":"8434:222:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8444:51:21","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"8483:11:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8470:12:21"},"nodeType":"YulFunctionCall","src":"8470:25:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"8448:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8584:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8593:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8596:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8586:6:21"},"nodeType":"YulFunctionCall","src":"8586:12:21"},"nodeType":"YulExpressionStatement","src":"8586:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"8518:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"8546:12:21"},"nodeType":"YulFunctionCall","src":"8546:14:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"8562:8:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8542:3:21"},"nodeType":"YulFunctionCall","src":"8542:29:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8577:2:21","type":"","value":"94"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8573:3:21"},"nodeType":"YulFunctionCall","src":"8573:7:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8538:3:21"},"nodeType":"YulFunctionCall","src":"8538:43:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8514:3:21"},"nodeType":"YulFunctionCall","src":"8514:68:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8507:6:21"},"nodeType":"YulFunctionCall","src":"8507:76:21"},"nodeType":"YulIf","src":"8504:96:21"},{"nodeType":"YulAssignment","src":"8609:41:21","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"8621:8:21"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"8631:18:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8617:3:21"},"nodeType":"YulFunctionCall","src":"8617:33:21"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"8609:4:21"}]}]},"name":"access_calldata_tail_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"8399:8:21","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"8409:11:21","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"8425:4:21","type":""}],"src":"8310:346:21"},{"body":{"nodeType":"YulBlock","src":"8755:427:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8765:51:21","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"8804:11:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8791:12:21"},"nodeType":"YulFunctionCall","src":"8791:25:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"8769:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8905:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8914:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8917:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8907:6:21"},"nodeType":"YulFunctionCall","src":"8907:12:21"},"nodeType":"YulExpressionStatement","src":"8907:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"8839:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"8867:12:21"},"nodeType":"YulFunctionCall","src":"8867:14:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"8883:8:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8863:3:21"},"nodeType":"YulFunctionCall","src":"8863:29:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8898:2:21","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8894:3:21"},"nodeType":"YulFunctionCall","src":"8894:7:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8859:3:21"},"nodeType":"YulFunctionCall","src":"8859:43:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8835:3:21"},"nodeType":"YulFunctionCall","src":"8835:68:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8828:6:21"},"nodeType":"YulFunctionCall","src":"8828:76:21"},"nodeType":"YulIf","src":"8825:96:21"},{"nodeType":"YulVariableDeclaration","src":"8930:47:21","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"8948:8:21"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"8958:18:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8944:3:21"},"nodeType":"YulFunctionCall","src":"8944:33:21"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"8934:6:21","type":""}]},{"nodeType":"YulAssignment","src":"8986:30:21","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"9009:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8996:12:21"},"nodeType":"YulFunctionCall","src":"8996:20:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8986:6:21"}]},{"body":{"nodeType":"YulBlock","src":"9059:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9068:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9071:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9061:6:21"},"nodeType":"YulFunctionCall","src":"9061:12:21"},"nodeType":"YulExpressionStatement","src":"9061:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9031:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9047:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"9051:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9043:3:21"},"nodeType":"YulFunctionCall","src":"9043:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"9055:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9039:3:21"},"nodeType":"YulFunctionCall","src":"9039:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9028:2:21"},"nodeType":"YulFunctionCall","src":"9028:30:21"},"nodeType":"YulIf","src":"9025:50:21"},{"nodeType":"YulAssignment","src":"9084:25:21","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"9096:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9104:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9092:3:21"},"nodeType":"YulFunctionCall","src":"9092:17:21"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"9084:4:21"}]},{"body":{"nodeType":"YulBlock","src":"9160:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9169:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9172:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9162:6:21"},"nodeType":"YulFunctionCall","src":"9162:12:21"},"nodeType":"YulExpressionStatement","src":"9162:12:21"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"9125:4:21"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"9135:12:21"},"nodeType":"YulFunctionCall","src":"9135:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"9151:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9131:3:21"},"nodeType":"YulFunctionCall","src":"9131:27:21"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"9121:3:21"},"nodeType":"YulFunctionCall","src":"9121:38:21"},"nodeType":"YulIf","src":"9118:58:21"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"8712:8:21","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"8722:11:21","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"8738:4:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"8744:6:21","type":""}],"src":"8661:521:21"},{"body":{"nodeType":"YulBlock","src":"9311:223:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9321:51:21","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"9360:11:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9347:12:21"},"nodeType":"YulFunctionCall","src":"9347:25:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"9325:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9462:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9471:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9474:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9464:6:21"},"nodeType":"YulFunctionCall","src":"9464:12:21"},"nodeType":"YulExpressionStatement","src":"9464:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"9395:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"9423:12:21"},"nodeType":"YulFunctionCall","src":"9423:14:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"9439:8:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9419:3:21"},"nodeType":"YulFunctionCall","src":"9419:29:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9454:3:21","type":"","value":"222"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9450:3:21"},"nodeType":"YulFunctionCall","src":"9450:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9415:3:21"},"nodeType":"YulFunctionCall","src":"9415:44:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9391:3:21"},"nodeType":"YulFunctionCall","src":"9391:69:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9384:6:21"},"nodeType":"YulFunctionCall","src":"9384:77:21"},"nodeType":"YulIf","src":"9381:97:21"},{"nodeType":"YulAssignment","src":"9487:41:21","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"9499:8:21"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"9509:18:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:21"},"nodeType":"YulFunctionCall","src":"9495:33:21"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"9487:4:21"}]}]},"name":"access_calldata_tail_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"9276:8:21","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"9286:11:21","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"9302:4:21","type":""}],"src":"9187:347:21"},{"body":{"nodeType":"YulBlock","src":"9605:200:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9622:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"9627:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9615:6:21"},"nodeType":"YulFunctionCall","src":"9615:19:21"},"nodeType":"YulExpressionStatement","src":"9615:19:21"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9660:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"9665:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9656:3:21"},"nodeType":"YulFunctionCall","src":"9656:14:21"},{"name":"start","nodeType":"YulIdentifier","src":"9672:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"9679:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9643:12:21"},"nodeType":"YulFunctionCall","src":"9643:43:21"},"nodeType":"YulExpressionStatement","src":"9643:43:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9710:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"9715:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9706:3:21"},"nodeType":"YulFunctionCall","src":"9706:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"9724:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9702:3:21"},"nodeType":"YulFunctionCall","src":"9702:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"9731:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9695:6:21"},"nodeType":"YulFunctionCall","src":"9695:38:21"},"nodeType":"YulExpressionStatement","src":"9695:38:21"},{"nodeType":"YulAssignment","src":"9742:57:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9757:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9770:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9778:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9766:3:21"},"nodeType":"YulFunctionCall","src":"9766:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9787:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9783:3:21"},"nodeType":"YulFunctionCall","src":"9783:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9762:3:21"},"nodeType":"YulFunctionCall","src":"9762:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9753:3:21"},"nodeType":"YulFunctionCall","src":"9753:39:21"},{"kind":"number","nodeType":"YulLiteral","src":"9794:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9749:3:21"},"nodeType":"YulFunctionCall","src":"9749:50:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9742:3:21"}]}]},"name":"abi_encode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"9574:5:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"9581:6:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9589:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9597:3:21","type":""}],"src":"9539:266:21"},{"body":{"nodeType":"YulBlock","src":"9854:60:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9871:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9880:5:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9895:3:21","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9900:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9891:3:21"},"nodeType":"YulFunctionCall","src":"9891:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"9904:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9887:3:21"},"nodeType":"YulFunctionCall","src":"9887:19:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9876:3:21"},"nodeType":"YulFunctionCall","src":"9876:31:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9864:6:21"},"nodeType":"YulFunctionCall","src":"9864:44:21"},"nodeType":"YulExpressionStatement","src":"9864:44:21"}]},"name":"abi_encode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9838:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9845:3:21","type":""}],"src":"9810:104:21"},{"body":{"nodeType":"YulBlock","src":"10007:435:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10017:43:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"10056:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10043:12:21"},"nodeType":"YulFunctionCall","src":"10043:17:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"10021:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10149:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10158:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10161:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10151:6:21"},"nodeType":"YulFunctionCall","src":"10151:12:21"},"nodeType":"YulExpressionStatement","src":"10151:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10083:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10111:12:21"},"nodeType":"YulFunctionCall","src":"10111:14:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"10127:8:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10107:3:21"},"nodeType":"YulFunctionCall","src":"10107:29:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10142:2:21","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10138:3:21"},"nodeType":"YulFunctionCall","src":"10138:7:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10103:3:21"},"nodeType":"YulFunctionCall","src":"10103:43:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10079:3:21"},"nodeType":"YulFunctionCall","src":"10079:68:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10072:6:21"},"nodeType":"YulFunctionCall","src":"10072:76:21"},"nodeType":"YulIf","src":"10069:96:21"},{"nodeType":"YulVariableDeclaration","src":"10174:48:21","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10193:18:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"10213:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10189:3:21"},"nodeType":"YulFunctionCall","src":"10189:33:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"10178:7:21","type":""}]},{"nodeType":"YulAssignment","src":"10231:31:21","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10254:7:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10241:12:21"},"nodeType":"YulFunctionCall","src":"10241:21:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10231:6:21"}]},{"nodeType":"YulAssignment","src":"10271:27:21","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10284:7:21"},{"kind":"number","nodeType":"YulLiteral","src":"10293:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10280:3:21"},"nodeType":"YulFunctionCall","src":"10280:18:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10271:5:21"}]},{"body":{"nodeType":"YulBlock","src":"10341:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10350:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10353:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10343:6:21"},"nodeType":"YulFunctionCall","src":"10343:12:21"},"nodeType":"YulExpressionStatement","src":"10343:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10313:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10329:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"10333:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10325:3:21"},"nodeType":"YulFunctionCall","src":"10325:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"10337:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10321:3:21"},"nodeType":"YulFunctionCall","src":"10321:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10310:2:21"},"nodeType":"YulFunctionCall","src":"10310:30:21"},"nodeType":"YulIf","src":"10307:50:21"},{"body":{"nodeType":"YulBlock","src":"10420:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10429:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10432:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10422:6:21"},"nodeType":"YulFunctionCall","src":"10422:12:21"},"nodeType":"YulExpressionStatement","src":"10422:12:21"}]},"condition":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"10373:8:21"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10387:12:21"},"nodeType":"YulFunctionCall","src":"10387:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10407:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10410:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10403:3:21"},"nodeType":"YulFunctionCall","src":"10403:14:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10383:3:21"},"nodeType":"YulFunctionCall","src":"10383:35:21"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"10369:3:21"},"nodeType":"YulFunctionCall","src":"10369:50:21"},"nodeType":"YulIf","src":"10366:70:21"}]},"name":"calldata_access_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"9971:8:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"9981:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9989:5:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"9996:6:21","type":""}],"src":"9919:523:21"},{"body":{"nodeType":"YulBlock","src":"10525:276:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10542:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"10547:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10535:6:21"},"nodeType":"YulFunctionCall","src":"10535:19:21"},"nodeType":"YulExpressionStatement","src":"10535:19:21"},{"body":{"nodeType":"YulBlock","src":"10598:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10607:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10610:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10600:6:21"},"nodeType":"YulFunctionCall","src":"10600:12:21"},"nodeType":"YulExpressionStatement","src":"10600:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10569:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10585:3:21","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"10590:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10581:3:21"},"nodeType":"YulFunctionCall","src":"10581:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"10594:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10577:3:21"},"nodeType":"YulFunctionCall","src":"10577:19:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10566:2:21"},"nodeType":"YulFunctionCall","src":"10566:31:21"},"nodeType":"YulIf","src":"10563:51:21"},{"nodeType":"YulVariableDeclaration","src":"10623:30:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10643:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10646:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10639:3:21"},"nodeType":"YulFunctionCall","src":"10639:14:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10627:8:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10679:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10684:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10675:3:21"},"nodeType":"YulFunctionCall","src":"10675:14:21"},{"name":"start","nodeType":"YulIdentifier","src":"10691:5:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"10698:8:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"10662:12:21"},"nodeType":"YulFunctionCall","src":"10662:45:21"},"nodeType":"YulExpressionStatement","src":"10662:45:21"},{"nodeType":"YulVariableDeclaration","src":"10716:39:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10734:3:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"10739:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10730:3:21"},"nodeType":"YulFunctionCall","src":"10730:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10750:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10726:3:21"},"nodeType":"YulFunctionCall","src":"10726:29:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10720:2:21","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10771:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"10775:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10764:6:21"},"nodeType":"YulFunctionCall","src":"10764:13:21"},"nodeType":"YulExpressionStatement","src":"10764:13:21"},{"nodeType":"YulAssignment","src":"10786:9:21","value":{"name":"_1","nodeType":"YulIdentifier","src":"10793:2:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10786:3:21"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"10494:5:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"10501:6:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10509:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10517:3:21","type":""}],"src":"10447:354:21"},{"body":{"nodeType":"YulBlock","src":"10895:1418:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10912:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10930:5:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10917:12:21"},"nodeType":"YulFunctionCall","src":"10917:19:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10905:6:21"},"nodeType":"YulFunctionCall","src":"10905:32:21"},"nodeType":"YulExpressionStatement","src":"10905:32:21"},{"nodeType":"YulVariableDeclaration","src":"10946:56:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10989:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10996:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10985:3:21"},"nodeType":"YulFunctionCall","src":"10985:16:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10972:12:21"},"nodeType":"YulFunctionCall","src":"10972:30:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"10950:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"11088:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11097:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11100:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11090:6:21"},"nodeType":"YulFunctionCall","src":"11090:12:21"},"nodeType":"YulExpressionStatement","src":"11090:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"11025:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"11053:12:21"},"nodeType":"YulFunctionCall","src":"11053:14:21"},{"name":"value","nodeType":"YulIdentifier","src":"11069:5:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11049:3:21"},"nodeType":"YulFunctionCall","src":"11049:26:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11081:2:21","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11077:3:21"},"nodeType":"YulFunctionCall","src":"11077:7:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11045:3:21"},"nodeType":"YulFunctionCall","src":"11045:40:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11021:3:21"},"nodeType":"YulFunctionCall","src":"11021:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11014:6:21"},"nodeType":"YulFunctionCall","src":"11014:73:21"},"nodeType":"YulIf","src":"11011:93:21"},{"nodeType":"YulVariableDeclaration","src":"11113:45:21","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"11132:18:21"},{"name":"value","nodeType":"YulIdentifier","src":"11152:5:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11128:3:21"},"nodeType":"YulFunctionCall","src":"11128:30:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11117:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11167:35:21","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11194:7:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11181:12:21"},"nodeType":"YulFunctionCall","src":"11181:21:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11171:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"11245:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11254:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11257:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11247:6:21"},"nodeType":"YulFunctionCall","src":"11247:12:21"},"nodeType":"YulExpressionStatement","src":"11247:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11217:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11233:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"11237:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11229:3:21"},"nodeType":"YulFunctionCall","src":"11229:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"11241:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11225:3:21"},"nodeType":"YulFunctionCall","src":"11225:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11214:2:21"},"nodeType":"YulFunctionCall","src":"11214:30:21"},"nodeType":"YulIf","src":"11211:50:21"},{"body":{"nodeType":"YulBlock","src":"11313:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11322:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11325:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11315:6:21"},"nodeType":"YulFunctionCall","src":"11315:12:21"},"nodeType":"YulExpressionStatement","src":"11315:12:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11277:5:21"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"11288:12:21"},"nodeType":"YulFunctionCall","src":"11288:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"11304:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11284:3:21"},"nodeType":"YulFunctionCall","src":"11284:27:21"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"11273:3:21"},"nodeType":"YulFunctionCall","src":"11273:39:21"},"nodeType":"YulIf","src":"11270:59:21"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11349:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11354:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11345:3:21"},"nodeType":"YulFunctionCall","src":"11345:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"11361:4:21","type":"","value":"0xe0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11338:6:21"},"nodeType":"YulFunctionCall","src":"11338:28:21"},"nodeType":"YulExpressionStatement","src":"11338:28:21"},{"nodeType":"YulVariableDeclaration","src":"11375:81:21","value":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11417:7:21"},{"kind":"number","nodeType":"YulLiteral","src":"11426:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11413:3:21"},"nodeType":"YulFunctionCall","src":"11413:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"11433:6:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11445:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11450:4:21","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11441:3:21"},"nodeType":"YulFunctionCall","src":"11441:14:21"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"11387:25:21"},"nodeType":"YulFunctionCall","src":"11387:69:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"11379:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11465:56:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11508:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"11515:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11504:3:21"},"nodeType":"YulFunctionCall","src":"11504:16:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11485:18:21"},"nodeType":"YulFunctionCall","src":"11485:36:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"11469:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"11549:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11567:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11572:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11563:3:21"},"nodeType":"YulFunctionCall","src":"11563:14:21"}],"functionName":{"name":"abi_encode_address","nodeType":"YulIdentifier","src":"11530:18:21"},"nodeType":"YulFunctionCall","src":"11530:48:21"},"nodeType":"YulExpressionStatement","src":"11530:48:21"},{"nodeType":"YulVariableDeclaration","src":"11587:58:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11632:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"11639:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11628:3:21"},"nodeType":"YulFunctionCall","src":"11628:16:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11609:18:21"},"nodeType":"YulFunctionCall","src":"11609:36:21"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"11591:14:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"11673:14:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11693:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11698:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11689:3:21"},"nodeType":"YulFunctionCall","src":"11689:14:21"}],"functionName":{"name":"abi_encode_address","nodeType":"YulIdentifier","src":"11654:18:21"},"nodeType":"YulFunctionCall","src":"11654:50:21"},"nodeType":"YulExpressionStatement","src":"11654:50:21"},{"nodeType":"YulVariableDeclaration","src":"11713:103:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11792:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11803:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"11810:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11799:3:21"},"nodeType":"YulFunctionCall","src":"11799:16:21"}],"functionName":{"name":"calldata_access_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"11749:42:21"},"nodeType":"YulFunctionCall","src":"11749:67:21"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"11717:14:21","type":""},{"name":"memberValue1","nodeType":"YulTypedName","src":"11733:12:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11836:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11841:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11832:3:21"},"nodeType":"YulFunctionCall","src":"11832:14:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11852:4:21"},{"name":"pos","nodeType":"YulIdentifier","src":"11858:3:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11848:3:21"},"nodeType":"YulFunctionCall","src":"11848:14:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11825:6:21"},"nodeType":"YulFunctionCall","src":"11825:38:21"},"nodeType":"YulExpressionStatement","src":"11825:38:21"},{"nodeType":"YulVariableDeclaration","src":"11872:87:21","value":{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"11924:14:21"},{"name":"memberValue1","nodeType":"YulIdentifier","src":"11940:12:21"},{"name":"tail","nodeType":"YulIdentifier","src":"11954:4:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"11886:37:21"},"nodeType":"YulFunctionCall","src":"11886:73:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11876:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11968:105:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12049:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12060:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"12067:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12056:3:21"},"nodeType":"YulFunctionCall","src":"12056:16:21"}],"functionName":{"name":"calldata_access_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"12006:42:21"},"nodeType":"YulFunctionCall","src":"12006:67:21"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"11972:14:21","type":""},{"name":"memberValue1_1","nodeType":"YulTypedName","src":"11988:14:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12093:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12098:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12089:3:21"},"nodeType":"YulFunctionCall","src":"12089:14:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12109:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"12117:3:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12105:3:21"},"nodeType":"YulFunctionCall","src":"12105:16:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12082:6:21"},"nodeType":"YulFunctionCall","src":"12082:40:21"},"nodeType":"YulExpressionStatement","src":"12082:40:21"},{"nodeType":"YulVariableDeclaration","src":"12131:91:21","value":{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"12183:14:21"},{"name":"memberValue1_1","nodeType":"YulIdentifier","src":"12199:14:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12215:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"12145:37:21"},"nodeType":"YulFunctionCall","src":"12145:77:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"12135:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12242:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12247:4:21","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12238:3:21"},"nodeType":"YulFunctionCall","src":"12238:14:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12271:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"12278:4:21","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12267:3:21"},"nodeType":"YulFunctionCall","src":"12267:16:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12254:12:21"},"nodeType":"YulFunctionCall","src":"12254:30:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12231:6:21"},"nodeType":"YulFunctionCall","src":"12231:54:21"},"nodeType":"YulExpressionStatement","src":"12231:54:21"},{"nodeType":"YulAssignment","src":"12294:13:21","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"12301:6:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12294:3:21"}]}]},"name":"abi_encode_struct_signatureBatchTransferPayload_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10872:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10879:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10887:3:21","type":""}],"src":"10806:1507:21"},{"body":{"nodeType":"YulBlock","src":"12627:400:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12644:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12655:2:21","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12637:6:21"},"nodeType":"YulFunctionCall","src":"12637:21:21"},"nodeType":"YulExpressionStatement","src":"12637:21:21"},{"nodeType":"YulVariableDeclaration","src":"12667:75:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12707:6:21"},{"name":"value1","nodeType":"YulIdentifier","src":"12715:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12727:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12738:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12723:3:21"},"nodeType":"YulFunctionCall","src":"12723:18:21"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"12681:25:21"},"nodeType":"YulFunctionCall","src":"12681:61:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12671:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12762:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12773:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12758:3:21"},"nodeType":"YulFunctionCall","src":"12758:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12782:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12790:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12778:3:21"},"nodeType":"YulFunctionCall","src":"12778:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12751:6:21"},"nodeType":"YulFunctionCall","src":"12751:50:21"},"nodeType":"YulExpressionStatement","src":"12751:50:21"},{"nodeType":"YulVariableDeclaration","src":"12810:86:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12881:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12889:6:21"}],"functionName":{"name":"abi_encode_struct_signatureBatchTransferPayload_calldata","nodeType":"YulIdentifier","src":"12824:56:21"},"nodeType":"YulFunctionCall","src":"12824:72:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"12814:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12916:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12927:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12912:3:21"},"nodeType":"YulFunctionCall","src":"12912:18:21"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"12936:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12944:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12932:3:21"},"nodeType":"YulFunctionCall","src":"12932:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12905:6:21"},"nodeType":"YulFunctionCall","src":"12905:50:21"},"nodeType":"YulExpressionStatement","src":"12905:50:21"},{"nodeType":"YulAssignment","src":"12964:57:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12998:6:21"},{"name":"value4","nodeType":"YulIdentifier","src":"13006:6:21"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13014:6:21"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"12972:25:21"},"nodeType":"YulFunctionCall","src":"12972:49:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12964:4:21"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12564:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12575:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12583:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12591:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12599:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12607:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12618:4:21","type":""}],"src":"12318:709:21"},{"body":{"nodeType":"YulBlock","src":"13064:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13081:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13088:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13093:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13084:3:21"},"nodeType":"YulFunctionCall","src":"13084:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13074:6:21"},"nodeType":"YulFunctionCall","src":"13074:31:21"},"nodeType":"YulExpressionStatement","src":"13074:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13121:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13124:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13114:6:21"},"nodeType":"YulFunctionCall","src":"13114:15:21"},"nodeType":"YulExpressionStatement","src":"13114:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13145:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13148:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13138:6:21"},"nodeType":"YulFunctionCall","src":"13138:15:21"},"nodeType":"YulExpressionStatement","src":"13138:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13032:127:21"},{"body":{"nodeType":"YulBlock","src":"13211:88:21","statements":[{"body":{"nodeType":"YulBlock","src":"13242:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13244:16:21"},"nodeType":"YulFunctionCall","src":"13244:18:21"},"nodeType":"YulExpressionStatement","src":"13244:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13227:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13238:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13234:3:21"},"nodeType":"YulFunctionCall","src":"13234:6:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13224:2:21"},"nodeType":"YulFunctionCall","src":"13224:17:21"},"nodeType":"YulIf","src":"13221:43:21"},{"nodeType":"YulAssignment","src":"13273:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13284:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"13291:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13280:3:21"},"nodeType":"YulFunctionCall","src":"13280:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13273:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13193:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13203:3:21","type":""}],"src":"13164:135:21"},{"body":{"nodeType":"YulBlock","src":"13478:237:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13495:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13506:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13488:6:21"},"nodeType":"YulFunctionCall","src":"13488:21:21"},"nodeType":"YulExpressionStatement","src":"13488:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13529:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13540:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13525:3:21"},"nodeType":"YulFunctionCall","src":"13525:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13545:2:21","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13518:6:21"},"nodeType":"YulFunctionCall","src":"13518:30:21"},"nodeType":"YulExpressionStatement","src":"13518:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13568:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13579:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13564:3:21"},"nodeType":"YulFunctionCall","src":"13564:18:21"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"13584:34:21","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13557:6:21"},"nodeType":"YulFunctionCall","src":"13557:62:21"},"nodeType":"YulExpressionStatement","src":"13557:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13639:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13650:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13635:3:21"},"nodeType":"YulFunctionCall","src":"13635:18:21"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"13655:17:21","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13628:6:21"},"nodeType":"YulFunctionCall","src":"13628:45:21"},"nodeType":"YulExpressionStatement","src":"13628:45:21"},{"nodeType":"YulAssignment","src":"13682:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13694:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13705:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13690:3:21"},"nodeType":"YulFunctionCall","src":"13690:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13682:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13455:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13469:4:21","type":""}],"src":"13304:411:21"},{"body":{"nodeType":"YulBlock","src":"13894:234:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13911:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13922:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13904:6:21"},"nodeType":"YulFunctionCall","src":"13904:21:21"},"nodeType":"YulExpressionStatement","src":"13904:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13945:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13956:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13941:3:21"},"nodeType":"YulFunctionCall","src":"13941:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13961:2:21","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13934:6:21"},"nodeType":"YulFunctionCall","src":"13934:30:21"},"nodeType":"YulExpressionStatement","src":"13934:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13984:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13995:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13980:3:21"},"nodeType":"YulFunctionCall","src":"13980:18:21"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14000:34:21","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13973:6:21"},"nodeType":"YulFunctionCall","src":"13973:62:21"},"nodeType":"YulExpressionStatement","src":"13973:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14055:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14066:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14051:3:21"},"nodeType":"YulFunctionCall","src":"14051:18:21"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"14071:14:21","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14044:6:21"},"nodeType":"YulFunctionCall","src":"14044:42:21"},"nodeType":"YulExpressionStatement","src":"14044:42:21"},{"nodeType":"YulAssignment","src":"14095:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14107:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14118:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14103:3:21"},"nodeType":"YulFunctionCall","src":"14103:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14095:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13871:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13885:4:21","type":""}],"src":"13720:408:21"},{"body":{"nodeType":"YulBlock","src":"14307:234:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14324:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14335:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14317:6:21"},"nodeType":"YulFunctionCall","src":"14317:21:21"},"nodeType":"YulExpressionStatement","src":"14317:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14358:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14369:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14354:3:21"},"nodeType":"YulFunctionCall","src":"14354:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14374:2:21","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14347:6:21"},"nodeType":"YulFunctionCall","src":"14347:30:21"},"nodeType":"YulExpressionStatement","src":"14347:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14397:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14408:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14393:3:21"},"nodeType":"YulFunctionCall","src":"14393:18:21"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"14413:34:21","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14386:6:21"},"nodeType":"YulFunctionCall","src":"14386:62:21"},"nodeType":"YulExpressionStatement","src":"14386:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14468:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14479:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14464:3:21"},"nodeType":"YulFunctionCall","src":"14464:18:21"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"14484:14:21","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14457:6:21"},"nodeType":"YulFunctionCall","src":"14457:42:21"},"nodeType":"YulExpressionStatement","src":"14457:42:21"},{"nodeType":"YulAssignment","src":"14508:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14520:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14531:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14516:3:21"},"nodeType":"YulFunctionCall","src":"14516:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14508:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14284:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14298:4:21","type":""}],"src":"14133:408:21"},{"body":{"nodeType":"YulBlock","src":"14720:246:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14737:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14748:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14730:6:21"},"nodeType":"YulFunctionCall","src":"14730:21:21"},"nodeType":"YulExpressionStatement","src":"14730:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14771:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14782:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14767:3:21"},"nodeType":"YulFunctionCall","src":"14767:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14787:2:21","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14760:6:21"},"nodeType":"YulFunctionCall","src":"14760:30:21"},"nodeType":"YulExpressionStatement","src":"14760:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14810:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14821:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14806:3:21"},"nodeType":"YulFunctionCall","src":"14806:18:21"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"14826:34:21","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14799:6:21"},"nodeType":"YulFunctionCall","src":"14799:62:21"},"nodeType":"YulExpressionStatement","src":"14799:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14881:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14892:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14877:3:21"},"nodeType":"YulFunctionCall","src":"14877:18:21"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"14897:26:21","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14870:6:21"},"nodeType":"YulFunctionCall","src":"14870:54:21"},"nodeType":"YulExpressionStatement","src":"14870:54:21"},{"nodeType":"YulAssignment","src":"14933:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14945:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14956:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14941:3:21"},"nodeType":"YulFunctionCall","src":"14941:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14933:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14697:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14711:4:21","type":""}],"src":"14546:420:21"},{"body":{"nodeType":"YulBlock","src":"15024:205:21","statements":[{"nodeType":"YulVariableDeclaration","src":"15034:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"15043:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15038:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"15103:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15128:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"15133:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15124:3:21"},"nodeType":"YulFunctionCall","src":"15124:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15147:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"15152:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15143:3:21"},"nodeType":"YulFunctionCall","src":"15143:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15137:5:21"},"nodeType":"YulFunctionCall","src":"15137:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15117:6:21"},"nodeType":"YulFunctionCall","src":"15117:39:21"},"nodeType":"YulExpressionStatement","src":"15117:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15064:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"15067:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15061:2:21"},"nodeType":"YulFunctionCall","src":"15061:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15075:19:21","statements":[{"nodeType":"YulAssignment","src":"15077:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15086:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"15089:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15082:3:21"},"nodeType":"YulFunctionCall","src":"15082:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15077:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"15057:3:21","statements":[]},"src":"15053:113:21"},{"body":{"nodeType":"YulBlock","src":"15192:31:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15205:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15210:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15201:3:21"},"nodeType":"YulFunctionCall","src":"15201:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"15219:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15194:6:21"},"nodeType":"YulFunctionCall","src":"15194:27:21"},"nodeType":"YulExpressionStatement","src":"15194:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15181:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"15184:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15178:2:21"},"nodeType":"YulFunctionCall","src":"15178:13:21"},"nodeType":"YulIf","src":"15175:48:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"15002:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"15007:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"15012:6:21","type":""}],"src":"14971:258:21"},{"body":{"nodeType":"YulBlock","src":"15284:208:21","statements":[{"nodeType":"YulVariableDeclaration","src":"15294:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15314:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15308:5:21"},"nodeType":"YulFunctionCall","src":"15308:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15298:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15336:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15341:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15329:6:21"},"nodeType":"YulFunctionCall","src":"15329:19:21"},"nodeType":"YulExpressionStatement","src":"15329:19:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15383:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"15390:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15379:3:21"},"nodeType":"YulFunctionCall","src":"15379:16:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15401:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15406:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15397:3:21"},"nodeType":"YulFunctionCall","src":"15397:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"15413:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"15357:21:21"},"nodeType":"YulFunctionCall","src":"15357:63:21"},"nodeType":"YulExpressionStatement","src":"15357:63:21"},{"nodeType":"YulAssignment","src":"15429:57:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15444:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15457:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15465:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15453:3:21"},"nodeType":"YulFunctionCall","src":"15453:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15474:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15470:3:21"},"nodeType":"YulFunctionCall","src":"15470:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15449:3:21"},"nodeType":"YulFunctionCall","src":"15449:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15440:3:21"},"nodeType":"YulFunctionCall","src":"15440:39:21"},{"kind":"number","nodeType":"YulLiteral","src":"15481:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15436:3:21"},"nodeType":"YulFunctionCall","src":"15436:50:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15429:3:21"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15261:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15268:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15276:3:21","type":""}],"src":"15234:258:21"},{"body":{"nodeType":"YulBlock","src":"15950:749:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15967:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15978:3:21","type":"","value":"192"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15960:6:21"},"nodeType":"YulFunctionCall","src":"15960:22:21"},"nodeType":"YulExpressionStatement","src":"15960:22:21"},{"nodeType":"YulVariableDeclaration","src":"15991:76:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16031:6:21"},{"name":"value1","nodeType":"YulIdentifier","src":"16039:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16051:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16062:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16047:3:21"},"nodeType":"YulFunctionCall","src":"16047:19:21"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"16005:25:21"},"nodeType":"YulFunctionCall","src":"16005:62:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"15995:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16087:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16098:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16083:3:21"},"nodeType":"YulFunctionCall","src":"16083:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"16107:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16115:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16103:3:21"},"nodeType":"YulFunctionCall","src":"16103:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16076:6:21"},"nodeType":"YulFunctionCall","src":"16076:50:21"},"nodeType":"YulExpressionStatement","src":"16076:50:21"},{"nodeType":"YulVariableDeclaration","src":"16135:86:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16206:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"16214:6:21"}],"functionName":{"name":"abi_encode_struct_signatureBatchTransferPayload_calldata","nodeType":"YulIdentifier","src":"16149:56:21"},"nodeType":"YulFunctionCall","src":"16149:72:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"16139:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16241:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16252:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16237:3:21"},"nodeType":"YulFunctionCall","src":"16237:18:21"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"16261:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16269:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16257:3:21"},"nodeType":"YulFunctionCall","src":"16257:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16230:6:21"},"nodeType":"YulFunctionCall","src":"16230:50:21"},"nodeType":"YulExpressionStatement","src":"16230:50:21"},{"nodeType":"YulVariableDeclaration","src":"16289:47:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16321:6:21"},{"name":"tail_2","nodeType":"YulIdentifier","src":"16329:6:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"16303:17:21"},"nodeType":"YulFunctionCall","src":"16303:33:21"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"16293:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16356:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16367:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16352:3:21"},"nodeType":"YulFunctionCall","src":"16352:18:21"},{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"16376:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16384:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16372:3:21"},"nodeType":"YulFunctionCall","src":"16372:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16345:6:21"},"nodeType":"YulFunctionCall","src":"16345:50:21"},"nodeType":"YulExpressionStatement","src":"16345:50:21"},{"nodeType":"YulVariableDeclaration","src":"16404:47:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"16436:6:21"},{"name":"tail_3","nodeType":"YulIdentifier","src":"16444:6:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"16418:17:21"},"nodeType":"YulFunctionCall","src":"16418:33:21"},"variables":[{"name":"tail_4","nodeType":"YulTypedName","src":"16408:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16471:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16482:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16467:3:21"},"nodeType":"YulFunctionCall","src":"16467:19:21"},{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"16492:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16500:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16488:3:21"},"nodeType":"YulFunctionCall","src":"16488:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16460:6:21"},"nodeType":"YulFunctionCall","src":"16460:51:21"},"nodeType":"YulExpressionStatement","src":"16460:51:21"},{"nodeType":"YulVariableDeclaration","src":"16520:47:21","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"16552:6:21"},{"name":"tail_4","nodeType":"YulIdentifier","src":"16560:6:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"16534:17:21"},"nodeType":"YulFunctionCall","src":"16534:33:21"},"variables":[{"name":"tail_5","nodeType":"YulTypedName","src":"16524:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16587:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16598:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16583:3:21"},"nodeType":"YulFunctionCall","src":"16583:19:21"},{"arguments":[{"name":"tail_5","nodeType":"YulIdentifier","src":"16608:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16616:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16604:3:21"},"nodeType":"YulFunctionCall","src":"16604:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16576:6:21"},"nodeType":"YulFunctionCall","src":"16576:51:21"},"nodeType":"YulExpressionStatement","src":"16576:51:21"},{"nodeType":"YulAssignment","src":"16636:57:21","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"16670:6:21"},{"name":"value7","nodeType":"YulIdentifier","src":"16678:6:21"},{"name":"tail_5","nodeType":"YulIdentifier","src":"16686:6:21"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"16644:25:21"},"nodeType":"YulFunctionCall","src":"16644:49:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16636:4:21"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15863:9:21","type":""},{"name":"value7","nodeType":"YulTypedName","src":"15874:6:21","type":""},{"name":"value6","nodeType":"YulTypedName","src":"15882:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"15890:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15898:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15906:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15914:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15922:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15930:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15941:4:21","type":""}],"src":"15497:1202:21"},{"body":{"nodeType":"YulBlock","src":"16810:830:21","statements":[{"nodeType":"YulVariableDeclaration","src":"16820:12:21","value":{"kind":"number","nodeType":"YulLiteral","src":"16830:2:21","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16824:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"16877:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16886:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16889:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16879:6:21"},"nodeType":"YulFunctionCall","src":"16879:12:21"},"nodeType":"YulExpressionStatement","src":"16879:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16852:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16861:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16848:3:21"},"nodeType":"YulFunctionCall","src":"16848:23:21"},{"name":"_1","nodeType":"YulIdentifier","src":"16873:2:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16844:3:21"},"nodeType":"YulFunctionCall","src":"16844:32:21"},"nodeType":"YulIf","src":"16841:52:21"},{"nodeType":"YulVariableDeclaration","src":"16902:30:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16922:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16916:5:21"},"nodeType":"YulFunctionCall","src":"16916:16:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16906:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16941:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16959:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"16963:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16955:3:21"},"nodeType":"YulFunctionCall","src":"16955:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"16967:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16951:3:21"},"nodeType":"YulFunctionCall","src":"16951:18:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"16945:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"16996:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17005:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17008:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16998:6:21"},"nodeType":"YulFunctionCall","src":"16998:12:21"},"nodeType":"YulExpressionStatement","src":"16998:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16984:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"16992:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16981:2:21"},"nodeType":"YulFunctionCall","src":"16981:14:21"},"nodeType":"YulIf","src":"16978:34:21"},{"nodeType":"YulVariableDeclaration","src":"17021:32:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17035:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"17046:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17031:3:21"},"nodeType":"YulFunctionCall","src":"17031:22:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"17025:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"17101:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17110:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17113:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17103:6:21"},"nodeType":"YulFunctionCall","src":"17103:12:21"},"nodeType":"YulExpressionStatement","src":"17103:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"17080:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"17084:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17076:3:21"},"nodeType":"YulFunctionCall","src":"17076:13:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17091:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17072:3:21"},"nodeType":"YulFunctionCall","src":"17072:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17065:6:21"},"nodeType":"YulFunctionCall","src":"17065:35:21"},"nodeType":"YulIf","src":"17062:55:21"},{"nodeType":"YulVariableDeclaration","src":"17126:19:21","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"17142:2:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17136:5:21"},"nodeType":"YulFunctionCall","src":"17136:9:21"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"17130:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"17168:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"17170:16:21"},"nodeType":"YulFunctionCall","src":"17170:18:21"},"nodeType":"YulExpressionStatement","src":"17170:18:21"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"17160:2:21"},{"name":"_2","nodeType":"YulIdentifier","src":"17164:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17157:2:21"},"nodeType":"YulFunctionCall","src":"17157:10:21"},"nodeType":"YulIf","src":"17154:36:21"},{"nodeType":"YulVariableDeclaration","src":"17199:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17213:1:21","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"17216:2:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17209:3:21"},"nodeType":"YulFunctionCall","src":"17209:10:21"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"17203:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17228:39:21","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"17259:2:21"},{"name":"_1","nodeType":"YulIdentifier","src":"17263:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17255:3:21"},"nodeType":"YulFunctionCall","src":"17255:11:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"17239:15:21"},"nodeType":"YulFunctionCall","src":"17239:28:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"17232:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17276:16:21","value":{"name":"dst","nodeType":"YulIdentifier","src":"17289:3:21"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"17280:5:21","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17308:3:21"},{"name":"_4","nodeType":"YulIdentifier","src":"17313:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17301:6:21"},"nodeType":"YulFunctionCall","src":"17301:15:21"},"nodeType":"YulExpressionStatement","src":"17301:15:21"},{"nodeType":"YulAssignment","src":"17325:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17336:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"17341:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17332:3:21"},"nodeType":"YulFunctionCall","src":"17332:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"17325:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"17353:34:21","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"17375:2:21"},{"name":"_5","nodeType":"YulIdentifier","src":"17379:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17371:3:21"},"nodeType":"YulFunctionCall","src":"17371:11:21"},{"name":"_1","nodeType":"YulIdentifier","src":"17384:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17367:3:21"},"nodeType":"YulFunctionCall","src":"17367:20:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"17357:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"17419:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17428:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17431:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17421:6:21"},"nodeType":"YulFunctionCall","src":"17421:12:21"},"nodeType":"YulExpressionStatement","src":"17421:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"17402:6:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17410:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17399:2:21"},"nodeType":"YulFunctionCall","src":"17399:19:21"},"nodeType":"YulIf","src":"17396:39:21"},{"nodeType":"YulVariableDeclaration","src":"17444:22:21","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"17459:2:21"},{"name":"_1","nodeType":"YulIdentifier","src":"17463:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17455:3:21"},"nodeType":"YulFunctionCall","src":"17455:11:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"17448:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"17531:79:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17552:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17563:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17557:5:21"},"nodeType":"YulFunctionCall","src":"17557:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17545:6:21"},"nodeType":"YulFunctionCall","src":"17545:23:21"},"nodeType":"YulExpressionStatement","src":"17545:23:21"},{"nodeType":"YulAssignment","src":"17581:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17592:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"17597:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17588:3:21"},"nodeType":"YulFunctionCall","src":"17588:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"17581:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17486:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"17491:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17483:2:21"},"nodeType":"YulFunctionCall","src":"17483:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17499:23:21","statements":[{"nodeType":"YulAssignment","src":"17501:19:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17512:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"17517:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17508:3:21"},"nodeType":"YulFunctionCall","src":"17508:12:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"17501:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"17479:3:21","statements":[]},"src":"17475:135:21"},{"nodeType":"YulAssignment","src":"17619:15:21","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"17629:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17619:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16776:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16787:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16799:6:21","type":""}],"src":"16704:936:21"},{"body":{"nodeType":"YulBlock","src":"17819:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17836:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17847:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17829:6:21"},"nodeType":"YulFunctionCall","src":"17829:21:21"},"nodeType":"YulExpressionStatement","src":"17829:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17870:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17881:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17866:3:21"},"nodeType":"YulFunctionCall","src":"17866:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"17886:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17859:6:21"},"nodeType":"YulFunctionCall","src":"17859:30:21"},"nodeType":"YulExpressionStatement","src":"17859:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17909:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17920:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17905:3:21"},"nodeType":"YulFunctionCall","src":"17905:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"17925:34:21","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17898:6:21"},"nodeType":"YulFunctionCall","src":"17898:62:21"},"nodeType":"YulExpressionStatement","src":"17898:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17980:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17991:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17976:3:21"},"nodeType":"YulFunctionCall","src":"17976:18:21"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"17996:16:21","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17969:6:21"},"nodeType":"YulFunctionCall","src":"17969:44:21"},"nodeType":"YulExpressionStatement","src":"17969:44:21"},{"nodeType":"YulAssignment","src":"18022:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18034:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18045:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18030:3:21"},"nodeType":"YulFunctionCall","src":"18030:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18022:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17796:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17810:4:21","type":""}],"src":"17645:410:21"},{"body":{"nodeType":"YulBlock","src":"18167:87:21","statements":[{"nodeType":"YulAssignment","src":"18177:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18189:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18200:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18185:3:21"},"nodeType":"YulFunctionCall","src":"18185:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18177:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18219:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18234:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"18242:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18230:3:21"},"nodeType":"YulFunctionCall","src":"18230:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18212:6:21"},"nodeType":"YulFunctionCall","src":"18212:36:21"},"nodeType":"YulExpressionStatement","src":"18212:36:21"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18136:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18147:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18158:4:21","type":""}],"src":"18060:194:21"},{"body":{"nodeType":"YulBlock","src":"18340:103:21","statements":[{"body":{"nodeType":"YulBlock","src":"18386:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18395:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18398:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18388:6:21"},"nodeType":"YulFunctionCall","src":"18388:12:21"},"nodeType":"YulExpressionStatement","src":"18388:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18361:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"18370:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18357:3:21"},"nodeType":"YulFunctionCall","src":"18357:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"18382:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18353:3:21"},"nodeType":"YulFunctionCall","src":"18353:32:21"},"nodeType":"YulIf","src":"18350:52:21"},{"nodeType":"YulAssignment","src":"18411:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18427:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18421:5:21"},"nodeType":"YulFunctionCall","src":"18421:16:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18411:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18306:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18317:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18329:6:21","type":""}],"src":"18259:184:21"},{"body":{"nodeType":"YulBlock","src":"18622:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18639:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18650:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18632:6:21"},"nodeType":"YulFunctionCall","src":"18632:21:21"},"nodeType":"YulExpressionStatement","src":"18632:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18673:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18684:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18669:3:21"},"nodeType":"YulFunctionCall","src":"18669:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"18689:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18662:6:21"},"nodeType":"YulFunctionCall","src":"18662:30:21"},"nodeType":"YulExpressionStatement","src":"18662:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18712:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18723:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18708:3:21"},"nodeType":"YulFunctionCall","src":"18708:18:21"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"18728:34:21","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18701:6:21"},"nodeType":"YulFunctionCall","src":"18701:62:21"},"nodeType":"YulExpressionStatement","src":"18701:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18783:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18794:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18779:3:21"},"nodeType":"YulFunctionCall","src":"18779:18:21"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"18799:16:21","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18772:6:21"},"nodeType":"YulFunctionCall","src":"18772:44:21"},"nodeType":"YulExpressionStatement","src":"18772:44:21"},{"nodeType":"YulAssignment","src":"18825:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18837:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18848:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18833:3:21"},"nodeType":"YulFunctionCall","src":"18833:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18825:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18599:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18613:4:21","type":""}],"src":"18448:410:21"},{"body":{"nodeType":"YulBlock","src":"19037:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19054:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19065:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19047:6:21"},"nodeType":"YulFunctionCall","src":"19047:21:21"},"nodeType":"YulExpressionStatement","src":"19047:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19088:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19099:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19084:3:21"},"nodeType":"YulFunctionCall","src":"19084:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19104:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19077:6:21"},"nodeType":"YulFunctionCall","src":"19077:30:21"},"nodeType":"YulExpressionStatement","src":"19077:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19127:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19138:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19123:3:21"},"nodeType":"YulFunctionCall","src":"19123:18:21"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"19143:34:21","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19116:6:21"},"nodeType":"YulFunctionCall","src":"19116:62:21"},"nodeType":"YulExpressionStatement","src":"19116:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19198:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19209:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19194:3:21"},"nodeType":"YulFunctionCall","src":"19194:18:21"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"19214:11:21","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19187:6:21"},"nodeType":"YulFunctionCall","src":"19187:39:21"},"nodeType":"YulExpressionStatement","src":"19187:39:21"},{"nodeType":"YulAssignment","src":"19235:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19247:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19258:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19243:3:21"},"nodeType":"YulFunctionCall","src":"19243:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19235:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19014:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19028:4:21","type":""}],"src":"18863:405:21"},{"body":{"nodeType":"YulBlock","src":"19447:233:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19464:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19475:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19457:6:21"},"nodeType":"YulFunctionCall","src":"19457:21:21"},"nodeType":"YulExpressionStatement","src":"19457:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19498:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19509:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19494:3:21"},"nodeType":"YulFunctionCall","src":"19494:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19514:2:21","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19487:6:21"},"nodeType":"YulFunctionCall","src":"19487:30:21"},"nodeType":"YulExpressionStatement","src":"19487:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19537:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19548:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19533:3:21"},"nodeType":"YulFunctionCall","src":"19533:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"19553:34:21","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19526:6:21"},"nodeType":"YulFunctionCall","src":"19526:62:21"},"nodeType":"YulExpressionStatement","src":"19526:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19608:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19619:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19604:3:21"},"nodeType":"YulFunctionCall","src":"19604:18:21"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"19624:13:21","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19597:6:21"},"nodeType":"YulFunctionCall","src":"19597:41:21"},"nodeType":"YulExpressionStatement","src":"19597:41:21"},{"nodeType":"YulAssignment","src":"19647:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19659:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19670:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19655:3:21"},"nodeType":"YulFunctionCall","src":"19655:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19647:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19424:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19438:4:21","type":""}],"src":"19273:407:21"},{"body":{"nodeType":"YulBlock","src":"20074:397:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20091:3:21"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"20096:25:21","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20084:6:21"},"nodeType":"YulFunctionCall","src":"20084:38:21"},"nodeType":"YulExpressionStatement","src":"20084:38:21"},{"nodeType":"YulVariableDeclaration","src":"20131:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20151:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20145:5:21"},"nodeType":"YulFunctionCall","src":"20145:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"20135:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20193:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"20201:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20189:3:21"},"nodeType":"YulFunctionCall","src":"20189:17:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20212:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"20217:2:21","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20208:3:21"},"nodeType":"YulFunctionCall","src":"20208:12:21"},{"name":"length","nodeType":"YulIdentifier","src":"20222:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"20167:21:21"},"nodeType":"YulFunctionCall","src":"20167:62:21"},"nodeType":"YulExpressionStatement","src":"20167:62:21"},{"nodeType":"YulVariableDeclaration","src":"20238:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20252:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"20257:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20248:3:21"},"nodeType":"YulFunctionCall","src":"20248:16:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20242:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20284:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"20288:2:21","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20280:3:21"},"nodeType":"YulFunctionCall","src":"20280:11:21"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"20293:19:21","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20273:6:21"},"nodeType":"YulFunctionCall","src":"20273:40:21"},"nodeType":"YulExpressionStatement","src":"20273:40:21"},{"nodeType":"YulVariableDeclaration","src":"20322:29:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20344:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20338:5:21"},"nodeType":"YulFunctionCall","src":"20338:13:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"20326:8:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20386:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"20394:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20382:3:21"},"nodeType":"YulFunctionCall","src":"20382:17:21"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20405:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"20409:2:21","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20401:3:21"},"nodeType":"YulFunctionCall","src":"20401:11:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"20414:8:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"20360:21:21"},"nodeType":"YulFunctionCall","src":"20360:63:21"},"nodeType":"YulExpressionStatement","src":"20360:63:21"},{"nodeType":"YulAssignment","src":"20432:33:21","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20447:2:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"20451:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20443:3:21"},"nodeType":"YulFunctionCall","src":"20443:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"20462:2:21","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20439:3:21"},"nodeType":"YulFunctionCall","src":"20439:26:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20432:3:21"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20042:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20047:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20055:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20066:3:21","type":""}],"src":"19685:786:21"},{"body":{"nodeType":"YulBlock","src":"20597:99:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20614:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20625:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20607:6:21"},"nodeType":"YulFunctionCall","src":"20607:21:21"},"nodeType":"YulExpressionStatement","src":"20607:21:21"},{"nodeType":"YulAssignment","src":"20637:53:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20663:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20675:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20686:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20671:3:21"},"nodeType":"YulFunctionCall","src":"20671:18:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"20645:17:21"},"nodeType":"YulFunctionCall","src":"20645:45:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20637:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20566:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20577:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20588:4:21","type":""}],"src":"20476:220:21"},{"body":{"nodeType":"YulBlock","src":"20875:235:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20892:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20903:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20885:6:21"},"nodeType":"YulFunctionCall","src":"20885:21:21"},"nodeType":"YulExpressionStatement","src":"20885:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20926:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20937:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20922:3:21"},"nodeType":"YulFunctionCall","src":"20922:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"20942:2:21","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20915:6:21"},"nodeType":"YulFunctionCall","src":"20915:30:21"},"nodeType":"YulExpressionStatement","src":"20915:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20965:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20976:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20961:3:21"},"nodeType":"YulFunctionCall","src":"20961:18:21"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"20981:34:21","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20954:6:21"},"nodeType":"YulFunctionCall","src":"20954:62:21"},"nodeType":"YulExpressionStatement","src":"20954:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21036:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21047:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21032:3:21"},"nodeType":"YulFunctionCall","src":"21032:18:21"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"21052:15:21","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21025:6:21"},"nodeType":"YulFunctionCall","src":"21025:43:21"},"nodeType":"YulExpressionStatement","src":"21025:43:21"},{"nodeType":"YulAssignment","src":"21077:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21089:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21100:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21085:3:21"},"nodeType":"YulFunctionCall","src":"21085:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21077:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20852:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20866:4:21","type":""}],"src":"20701:409:21"},{"body":{"nodeType":"YulBlock","src":"21167:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"21226:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21228:16:21"},"nodeType":"YulFunctionCall","src":"21228:18:21"},"nodeType":"YulExpressionStatement","src":"21228:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21198:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21191:6:21"},"nodeType":"YulFunctionCall","src":"21191:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21184:6:21"},"nodeType":"YulFunctionCall","src":"21184:17:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21206:1:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21217:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21213:3:21"},"nodeType":"YulFunctionCall","src":"21213:6:21"},{"name":"x","nodeType":"YulIdentifier","src":"21221:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"21209:3:21"},"nodeType":"YulFunctionCall","src":"21209:14:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21203:2:21"},"nodeType":"YulFunctionCall","src":"21203:21:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21180:3:21"},"nodeType":"YulFunctionCall","src":"21180:45:21"},"nodeType":"YulIf","src":"21177:71:21"},{"nodeType":"YulAssignment","src":"21257:20:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21272:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"21275:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21268:3:21"},"nodeType":"YulFunctionCall","src":"21268:9:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"21257:7:21"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21146:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"21149:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"21155:7:21","type":""}],"src":"21115:168:21"},{"body":{"nodeType":"YulBlock","src":"21336:80:21","statements":[{"body":{"nodeType":"YulBlock","src":"21363:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21365:16:21"},"nodeType":"YulFunctionCall","src":"21365:18:21"},"nodeType":"YulExpressionStatement","src":"21365:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21352:1:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21359:1:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21355:3:21"},"nodeType":"YulFunctionCall","src":"21355:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21349:2:21"},"nodeType":"YulFunctionCall","src":"21349:13:21"},"nodeType":"YulIf","src":"21346:39:21"},{"nodeType":"YulAssignment","src":"21394:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21405:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"21408:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21401:3:21"},"nodeType":"YulFunctionCall","src":"21401:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"21394:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21319:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"21322:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21328:3:21","type":""}],"src":"21288:128:21"},{"body":{"nodeType":"YulBlock","src":"21468:89:21","statements":[{"body":{"nodeType":"YulBlock","src":"21495:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21497:16:21"},"nodeType":"YulFunctionCall","src":"21497:18:21"},"nodeType":"YulExpressionStatement","src":"21497:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21488:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21481:6:21"},"nodeType":"YulFunctionCall","src":"21481:13:21"},"nodeType":"YulIf","src":"21478:39:21"},{"nodeType":"YulAssignment","src":"21526:25:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21537:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21548:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21544:3:21"},"nodeType":"YulFunctionCall","src":"21544:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21533:3:21"},"nodeType":"YulFunctionCall","src":"21533:18:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21526:3:21"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21450:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21460:3:21","type":""}],"src":"21421:136:21"},{"body":{"nodeType":"YulBlock","src":"21736:182:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21753:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21764:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21746:6:21"},"nodeType":"YulFunctionCall","src":"21746:21:21"},"nodeType":"YulExpressionStatement","src":"21746:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21787:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21798:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21783:3:21"},"nodeType":"YulFunctionCall","src":"21783:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"21803:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21776:6:21"},"nodeType":"YulFunctionCall","src":"21776:30:21"},"nodeType":"YulExpressionStatement","src":"21776:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21826:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21837:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21822:3:21"},"nodeType":"YulFunctionCall","src":"21822:18:21"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"21842:34:21","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21815:6:21"},"nodeType":"YulFunctionCall","src":"21815:62:21"},"nodeType":"YulExpressionStatement","src":"21815:62:21"},{"nodeType":"YulAssignment","src":"21886:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21898:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21909:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21894:3:21"},"nodeType":"YulFunctionCall","src":"21894:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21886:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21713:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21727:4:21","type":""}],"src":"21562:356:21"},{"body":{"nodeType":"YulBlock","src":"22060:137:21","statements":[{"nodeType":"YulVariableDeclaration","src":"22070:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22090:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22084:5:21"},"nodeType":"YulFunctionCall","src":"22084:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22074:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22132:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22140:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22128:3:21"},"nodeType":"YulFunctionCall","src":"22128:17:21"},{"name":"pos","nodeType":"YulIdentifier","src":"22147:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"22152:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"22106:21:21"},"nodeType":"YulFunctionCall","src":"22106:53:21"},"nodeType":"YulExpressionStatement","src":"22106:53:21"},{"nodeType":"YulAssignment","src":"22168:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22179:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"22184:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22175:3:21"},"nodeType":"YulFunctionCall","src":"22175:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22168:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22036:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22041:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22052:3:21","type":""}],"src":"21923:274:21"},{"body":{"nodeType":"YulBlock","src":"22376:179:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22393:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22404:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22386:6:21"},"nodeType":"YulFunctionCall","src":"22386:21:21"},"nodeType":"YulExpressionStatement","src":"22386:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22427:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22438:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22423:3:21"},"nodeType":"YulFunctionCall","src":"22423:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"22443:2:21","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22416:6:21"},"nodeType":"YulFunctionCall","src":"22416:30:21"},"nodeType":"YulExpressionStatement","src":"22416:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22466:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22477:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22462:3:21"},"nodeType":"YulFunctionCall","src":"22462:18:21"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"22482:31:21","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22455:6:21"},"nodeType":"YulFunctionCall","src":"22455:59:21"},"nodeType":"YulExpressionStatement","src":"22455:59:21"},{"nodeType":"YulAssignment","src":"22523:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22535:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22546:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22531:3:21"},"nodeType":"YulFunctionCall","src":"22531:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22523:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22353:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22367:4:21","type":""}],"src":"22202:353:21"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_available_length_bytes(src, length, end) -> array\n    {\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), not(31)), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value1 := abi_decode_available_length_bytes(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_bytes(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value3 := abi_decode_string(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value4 := abi_decode_string(add(headStart, offset_3), dataEnd)\n        let offset_4 := calldataload(add(headStart, 128))\n        if gt(offset_4, _1) { revert(0, 0) }\n        let value5_1, value6_1 := abi_decode_bytes_calldata(add(headStart, offset_4), dataEnd)\n        value5 := value5_1\n        value6 := value6_1\n    }\n    function abi_decode_tuple_t_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_array$_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let _1 := sub(shl(64, 1), 1)\n        if gt(calldataload(headStart), _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata(add(headStart, calldataload(headStart)), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        if gt(calldataload(add(headStart, 32)), _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_struct_SignatureBatchTransferPayload_calldata_dyn_calldata(add(headStart, calldataload(add(headStart, 32))), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        if gt(calldataload(add(headStart, 64)), _1) { revert(0, 0) }\n        value4 := abi_decode_string(add(headStart, calldataload(add(headStart, 64))), dataEnd)\n        if gt(calldataload(add(headStart, 96)), _1) { revert(0, 0) }\n        value5 := abi_decode_string(add(headStart, calldataload(add(headStart, 96))), dataEnd)\n        if gt(calldataload(add(headStart, 128)), _1) { revert(0, 0) }\n        value6 := abi_decode_string(add(headStart, calldataload(add(headStart, 128))), dataEnd)\n        if gt(calldataload(add(headStart, 160)), _1) { revert(0, 0) }\n        let value7_1, value8_1 := abi_decode_bytes_calldata(add(headStart, calldataload(add(headStart, 160))), dataEnd)\n        value7 := value7_1\n        value8 := value8_1\n        if gt(calldataload(add(headStart, 192)), _1) { revert(0, 0) }\n        let value9_1, value10_1 := abi_decode_bytes_calldata(add(headStart, calldataload(add(headStart, 192))), dataEnd)\n        value9 := value9_1\n        value10 := value10_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_SignatureBatchTransferPayload_$2973_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function access_calldata_tail_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(222)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function calldata_access_array_uint256_dyn_calldata(base_ref, ptr) -> value, length\n    {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, base_ref)\n        length := calldataload(value_1)\n        value := add(value_1, 0x20)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        if sgt(base_ref, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        let _1 := add(add(pos, length_1), 0x20)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_struct_signatureBatchTransferPayload_calldata(value, pos) -> end\n    {\n        mstore(pos, calldataload(value))\n        let rel_offset_of_tail := calldataload(add(value, 0x20))\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), value), not(30)))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, value)\n        let length := calldataload(value_1)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n        mstore(add(pos, 0x20), 0xe0)\n        let tail := abi_encode_bytes_calldata(add(value_1, 0x20), length, add(pos, 0xe0))\n        let memberValue0 := abi_decode_address(add(value, 0x40))\n        abi_encode_address(memberValue0, add(pos, 0x40))\n        let memberValue0_1 := abi_decode_address(add(value, 0x60))\n        abi_encode_address(memberValue0_1, add(pos, 0x60))\n        let memberValue0_2, memberValue1 := calldata_access_array_uint256_dyn_calldata(value, add(value, 0x80))\n        mstore(add(pos, 0x80), sub(tail, pos))\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(memberValue0_2, memberValue1, tail)\n        let memberValue0_3, memberValue1_1 := calldata_access_array_uint256_dyn_calldata(value, add(value, 0xa0))\n        mstore(add(pos, 0xa0), sub(tail_1, pos))\n        let tail_2 := abi_encode_array_uint256_dyn_calldata(memberValue0_3, memberValue1_1, tail_1)\n        mstore(add(pos, 0xc0), calldataload(add(value, 0xc0)))\n        end := tail_2\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_bytes_calldata(value0, value1, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_struct_signatureBatchTransferPayload_calldata(value2, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_bytes_calldata(value3, value4, tail_2)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr_t_struct$_signatureBatchTransferPayload_$3380_calldata_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_struct$_signatureBatchTransferPayload_$3380_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_bytes_calldata(value0, value1, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_struct_signatureBatchTransferPayload_calldata(value2, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        let tail_3 := abi_encode_string(value3, tail_2)\n        mstore(add(headStart, 96), sub(tail_3, headStart))\n        let tail_4 := abi_encode_string(value4, tail_3)\n        mstore(add(headStart, 128), sub(tail_4, headStart))\n        let tail_5 := abi_encode_string(value5, tail_4)\n        mstore(add(headStart, 160), sub(tail_5, headStart))\n        tail := abi_encode_bytes_calldata(value6, value7, tail_5)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"964":[{"length":32,"start":1238},{"length":32,"start":1302},{"length":32,"start":1438},{"length":32,"start":1502},{"length":32,"start":1622}]},"linkReferences":{},"object":"6080604052600436106100c35760003560e01c806301ffc9a7146100c85780630dee1707146100fd578063248a9ca31461011f5780632f2ff15d1461014d57806336568abe1461016d5780633659cfe61461018d5780634f1ef286146101ad57806352d1902d146101c05780635c975abb146101d557806369ffd930146101ed5780638129fc1c1461020d57806391d1485414610222578063a217fddf14610242578063cc944ef314610257578063d547741f14610277578063f72c0d8b14610297575b600080fd5b3480156100d457600080fd5b506100e86100e3366004611175565b6102b9565b60405190151581526020015b60405180910390f35b34801561010957600080fd5b5061011d61011836600461122b565b6102f0565b005b34801561012b57600080fd5b5061013f61013a366004611296565b610413565b6040519081526020016100f4565b34801561015957600080fd5b5061011d6101683660046112cb565b610428565b34801561017957600080fd5b5061011d6101883660046112cb565b610449565b34801561019957600080fd5b5061011d6101a83660046112f7565b6104cc565b61011d6101bb3660046113af565b610594565b3480156101cc57600080fd5b5061013f610649565b3480156101e157600080fd5b5060335460ff166100e8565b3480156101f957600080fd5b5061011d610208366004611430565b6106f7565b34801561021957600080fd5b5061011d610839565b34801561022e57600080fd5b506100e861023d3660046112cb565b610983565b34801561024e57600080fd5b5061013f600081565b34801561026357600080fd5b5061011d61027236600461150d565b6109ae565b34801561028357600080fd5b5061011d6102923660046112cb565b6109d6565b3480156102a357600080fd5b5061013f600080516020611c4283398151915281565b60006001600160e01b03198216637965db0b60e01b14806102ea57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60005b8381101561040c57600085858381811061030f5761030f611645565b9050602002810190610321919061165b565b61032f9060208101906112f7565b9050806001600160a01b0316638b42ecc187878581811061035257610352611645565b9050602002810190610364919061165b565b61037290604081019061167b565b89898781811061038457610384611645565b9050602002810190610396919061165b565b6103a49060208101906116c1565b88886040518663ffffffff1660e01b81526004016103c695949392919061187a565b600060405180830381600087803b1580156103e057600080fd5b505af11580156103f4573d6000803e3d6000fd5b50505050508080610404906118d7565b9150506102f3565b5050505050565b60009081526097602052604090206001015490565b61043182610413565b61043a816109f2565b61044483836109fc565b505050565b6001600160a01b03811633146104be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104c88282610a82565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105145760405162461bcd60e51b81526004016104b5906118f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610546610ae9565b6001600160a01b03161461056c5760405162461bcd60e51b81526004016104b59061192a565b61057581610b05565b6040805160008082526020820190925261059191839190610b1d565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105dc5760405162461bcd60e51b81526004016104b5906118f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060e610ae9565b6001600160a01b0316146106345760405162461bcd60e51b81526004016104b59061192a565b61063d82610b05565b6104c882826001610b1d565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016104b5565b50600080516020611c6283398151915290565b60005b8681101561082f57600088888381811061071657610716611645565b9050602002810190610728919061165b565b6107369060208101906112f7565b9050806001600160a01b031663c5bfc65a8a8a8581811061075957610759611645565b905060200281019061076b919061165b565b61077990604081019061167b565b8c8c8781811061078b5761078b611645565b905060200281019061079d919061165b565b6107ab9060208101906116c1565b8b8b8b8b8b6040518963ffffffff1660e01b81526004016107d39897969594939291906119bc565b6000604051808303816000875af11580156107f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081a9190810190611a42565b50508080610827906118d7565b9150506106fa565b5050505050505050565b600054610100900460ff16158080156108595750600054600160ff909116105b8061087a575061086830610c88565b15801561087a575060005460ff166001145b6108dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104b5565b6000805460ff191660011790558015610900576000805461ff0019166101001790555b610908610c97565b610910610cc8565b610918610cc8565b6109236000336109fc565b61093b600080516020611c42833981519152336109fc565b8015610591576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6109ba8b8b86866102f0565b6109c9898989898987876106f7565b5050505050505050505050565b6109df82610413565b6109e8816109f2565b6104448383610a82565b6105918133610cef565b610a068282610983565b6104c85760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610a3e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610a8c8282610983565b156104c85760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020611c62833981519152546001600160a01b031690565b600080516020611c428339815191526104c8816109f2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b505761044483610d48565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610baa575060408051601f3d908101601f19168201909252610ba791810190611adb565b60015b610c0d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104b5565b600080516020611c628339815191528114610c7c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104b5565b50610444838383610de2565b6001600160a01b03163b151590565b600054610100900460ff16610cbe5760405162461bcd60e51b81526004016104b590611af4565b610cc6610e0d565b565b600054610100900460ff16610cc65760405162461bcd60e51b81526004016104b590611af4565b610cf98282610983565b6104c857610d0681610e40565b610d11836020610e52565b604051602001610d22929190611b3f565b60408051601f198184030181529082905262461bcd60e51b82526104b591600401611bae565b610d5181610c88565b610db35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104b5565b600080516020611c6283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610deb83610ff4565b600082511180610df85750805b1561044457610e078383611034565b50505050565b600054610100900460ff16610e345760405162461bcd60e51b81526004016104b590611af4565b6033805460ff19169055565b60606102ea6001600160a01b03831660145b60606000610e61836002611bc1565b610e6c906002611be0565b6001600160401b03811115610e8357610e83611312565b6040519080825280601f01601f191660200182016040528015610ead576020820181803683370190505b509050600360fc1b81600081518110610ec857610ec8611645565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ef757610ef7611645565b60200101906001600160f81b031916908160001a9053506000610f1b846002611bc1565b610f26906001611be0565b90505b6001811115610f9e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610f5a57610f5a611645565b1a60f81b828281518110610f7057610f70611645565b60200101906001600160f81b031916908160001a90535060049490941c93610f9781611bf8565b9050610f29565b508315610fed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104b5565b9392505050565b610ffd81610d48565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610fed8383604051806060016040528060278152602001611c82602791396060600080856001600160a01b0316856040516110719190611c0f565b600060405180830381855af49150503d80600081146110ac576040519150601f19603f3d011682016040523d82523d6000602084013e6110b1565b606091505b50915091506110c2868383876110cc565b9695505050505050565b60608315611139578251600003611132576110e685610c88565b6111325760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104b5565b5081611143565b611143838361114b565b949350505050565b81511561115b5781518083602001fd5b8060405162461bcd60e51b81526004016104b59190611bae565b60006020828403121561118757600080fd5b81356001600160e01b031981168114610fed57600080fd5b60008083601f8401126111b157600080fd5b5081356001600160401b038111156111c857600080fd5b6020830191508360208260051b85010111156111e357600080fd5b9250929050565b60008083601f8401126111fc57600080fd5b5081356001600160401b0381111561121357600080fd5b6020830191508360208285010111156111e357600080fd5b6000806000806040858703121561124157600080fd5b84356001600160401b038082111561125857600080fd5b6112648883890161119f565b9096509450602087013591508082111561127d57600080fd5b5061128a878288016111ea565b95989497509550505050565b6000602082840312156112a857600080fd5b5035919050565b80356001600160a01b03811681146112c657600080fd5b919050565b600080604083850312156112de57600080fd5b823591506112ee602084016112af565b90509250929050565b60006020828403121561130957600080fd5b610fed826112af565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561135057611350611312565b604052919050565b60006001600160401b0383111561137157611371611312565b611384601f8401601f1916602001611328565b905082815283838301111561139857600080fd5b828260208301376000602084830101529392505050565b600080604083850312156113c257600080fd5b6113cb836112af565b915060208301356001600160401b038111156113e657600080fd5b8301601f810185136113f757600080fd5b61140685823560208401611358565b9150509250929050565b600082601f83011261142157600080fd5b610fed83833560208501611358565b600080600080600080600060a0888a03121561144b57600080fd5b87356001600160401b038082111561146257600080fd5b61146e8b838c0161119f565b909950975060208a013591508082111561148757600080fd5b6114938b838c01611410565b965060408a01359150808211156114a957600080fd5b6114b58b838c01611410565b955060608a01359150808211156114cb57600080fd5b6114d78b838c01611410565b945060808a01359150808211156114ed57600080fd5b506114fa8a828b016111ea565b989b979a50959850939692959293505050565b600080600080600080600080600080600060e08c8e03121561152e57600080fd5b6001600160401b038c3581101561154457600080fd5b6115518e8e358f0161119f565b909c509a5060208d013581101561156757600080fd5b6115778e60208f01358f0161119f565b909a50985060408d013581101561158d57600080fd5b61159d8e60408f01358f01611410565b97508060608e013511156115b057600080fd5b6115c08e60608f01358f01611410565b96508060808e013511156115d357600080fd5b6115e38e60808f01358f01611410565b95508060a08e013511156115f657600080fd5b6116068e60a08f01358f016111ea565b909550935060c08d013581101561161c57600080fd5b5061162d8d60c08e01358e016111ea565b81935080925050509295989b509295989b9093969950565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261167157600080fd5b9190910192915050565b6000808335601e1984360301811261169257600080fd5b8301803591506001600160401b038211156116ac57600080fd5b6020019150368190038213156111e357600080fd5b6000823560de1983360301811261167157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03169052565b6000808335601e1984360301811261172457600080fd5b83016020810192503590506001600160401b0381111561174357600080fd5b8060051b36038313156111e357600080fd5b81835260006001600160fb1b0383111561176e57600080fd5b8260051b8083602087013760009401602001938452509192915050565b8035825260006020820135601e198336030181126117a857600080fd5b820180356001600160401b038111156117c057600080fd5b8036038413156117cf57600080fd5b60e060208601526117e760e0860182602085016116d7565b9150506117f6604084016112af565b6118036040860182611700565b50611810606084016112af565b61181d6060860182611700565b5061182b608084018461170d565b858303608087015261183e838284611755565b9250505061184f60a084018461170d565b85830360a0870152611862838284611755565b9250505060c083013560c08501528091505092915050565b60608152600061188e6060830187896116d7565b82810360208401526118a0818761178b565b905082810360408401526118b58185876116d7565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016118e9576118e96118c1565b5060010190565b6020808252602c90820152600080516020611c2283398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c90820152600080516020611c2283398151915260408201526b6163746976652070726f787960a01b606082015260800190565b60005b8381101561197f578181015183820152602001611967565b83811115610e075750506000910152565b600081518084526119a8816020860160208601611964565b601f01601f19169290920160200192915050565b60c0815260006119d060c083018a8c6116d7565b82810360208401526119e2818a61178b565b905082810360408401526119f68189611990565b90508281036060840152611a0a8188611990565b90508281036080840152611a1e8187611990565b905082810360a0840152611a338185876116d7565b9b9a5050505050505050505050565b60006020808385031215611a5557600080fd5b82516001600160401b0380821115611a6c57600080fd5b818501915085601f830112611a8057600080fd5b815181811115611a9257611a92611312565b8060051b9150611aa3848301611328565b8181529183018401918481019088841115611abd57600080fd5b938501935b838510156118b557845182529385019390850190611ac2565b600060208284031215611aed57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351611b71816017850160208801611964565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611ba2816028840160208801611964565b01602801949350505050565b602081526000610fed6020830184611990565b6000816000190483118215151615611bdb57611bdb6118c1565b500290565b60008219821115611bf357611bf36118c1565b500190565b600081611c0757611c076118c1565b506000190190565b6000825161167181846020870161196456fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a5d09ba0692a10fd1bf1c1b761f6fbe62a70d4090def13c49c5e4ce3f54a77f764736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDEE1707 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x69FFD930 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xCC944EF3 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x297 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1175 JUMP JUMPDEST PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0x1296 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x428 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x449 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x11D PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x13AF JUMP JUMPDEST PUSH2 0x594 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x649 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH2 0xE8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x208 CALLDATASIZE PUSH1 0x4 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x839 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x150D JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CB JUMP JUMPDEST PUSH2 0x9D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C42 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2EA JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x40C JUMPI PUSH1 0x0 DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x30F JUMPI PUSH2 0x30F PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x32F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x12F7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8B42ECC1 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x364 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x372 SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x167B JUMP JUMPDEST DUP10 DUP10 DUP8 DUP2 DUP2 LT PUSH2 0x384 JUMPI PUSH2 0x384 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x396 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x3A4 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x16C1 JUMP JUMPDEST DUP9 DUP9 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x187A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0x404 SWAP1 PUSH2 0x18D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2F3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x431 DUP3 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x43A DUP2 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0x9FC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x4BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4C8 DUP3 DUP3 PUSH2 0xA82 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x546 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x575 DUP2 PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x591 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xB1D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x5DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x60E PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x63D DUP3 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0x4C8 DUP3 DUP3 PUSH1 0x1 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B1959081D1A1C9BDD59DA0819195B1959D85D1958D85B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x82F JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x716 JUMPI PUSH2 0x716 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x728 SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x736 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x12F7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5BFC65A DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x759 JUMPI PUSH2 0x759 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x76B SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x779 SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x167B JUMP JUMPDEST DUP13 DUP13 DUP8 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x79D SWAP2 SWAP1 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x7AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x16C1 JUMP JUMPDEST DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD DUP10 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D3 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x81A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A42 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x827 SWAP1 PUSH2 0x18D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6FA JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x859 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x87A JUMPI POP PUSH2 0x868 ADDRESS PUSH2 0xC88 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x87A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x900 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x908 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x910 PUSH2 0xCC8 JUMP JUMPDEST PUSH2 0x918 PUSH2 0xCC8 JUMP JUMPDEST PUSH2 0x923 PUSH1 0x0 CALLER PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x93B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C42 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x9FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x591 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9BA DUP12 DUP12 DUP7 DUP7 PUSH2 0x2F0 JUMP JUMPDEST PUSH2 0x9C9 DUP10 DUP10 DUP10 DUP10 DUP10 DUP8 DUP8 PUSH2 0x6F7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9DF DUP3 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x9E8 DUP2 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0xA82 JUMP JUMPDEST PUSH2 0x591 DUP2 CALLER PUSH2 0xCEF JUMP JUMPDEST PUSH2 0xA06 DUP3 DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xA3E CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xA8C DUP3 DUP3 PUSH2 0x983 JUMP JUMPDEST ISZERO PUSH2 0x4C8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C42 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x4C8 DUP2 PUSH2 0x9F2 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB50 JUMPI PUSH2 0x444 DUP4 PUSH2 0xD48 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xBAA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xBA7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1ADB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0xC7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST POP PUSH2 0x444 DUP4 DUP4 DUP4 PUSH2 0xDE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xCBE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST PUSH2 0xCC6 PUSH2 0xE0D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xCC6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST PUSH2 0xCF9 DUP3 DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH2 0x4C8 JUMPI PUSH2 0xD06 DUP2 PUSH2 0xE40 JUMP JUMPDEST PUSH2 0xD11 DUP4 PUSH1 0x20 PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD22 SWAP3 SWAP2 SWAP1 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4B5 SWAP2 PUSH1 0x4 ADD PUSH2 0x1BAE JUMP JUMPDEST PUSH2 0xD51 DUP2 PUSH2 0xC88 JUMP JUMPDEST PUSH2 0xDB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C62 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xDEB DUP4 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0xDF8 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x444 JUMPI PUSH2 0xE07 DUP4 DUP4 PUSH2 0x1034 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE61 DUP4 PUSH1 0x2 PUSH2 0x1BC1 JUMP JUMPDEST PUSH2 0xE6C SWAP1 PUSH1 0x2 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xE83 JUMPI PUSH2 0xE83 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEAD JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xEC8 JUMPI PUSH2 0xEC8 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xEF7 JUMPI PUSH2 0xEF7 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0xF1B DUP5 PUSH1 0x2 PUSH2 0x1BC1 JUMP JUMPDEST PUSH2 0xF26 SWAP1 PUSH1 0x1 PUSH2 0x1BE0 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xF9E JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0xF5A JUMPI PUSH2 0xF5A PUSH2 0x1645 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF70 JUMPI PUSH2 0xF70 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0xF97 DUP2 PUSH2 0x1BF8 JUMP JUMPDEST SWAP1 POP PUSH2 0xF29 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xFED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xFFD DUP2 PUSH2 0xD48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFED DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C82 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1071 SWAP2 SWAP1 PUSH2 0x1C0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x10C2 DUP7 DUP4 DUP4 DUP8 PUSH2 0x10CC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1139 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1132 JUMPI PUSH2 0x10E6 DUP6 PUSH2 0xC88 JUMP JUMPDEST PUSH2 0x1132 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B5 JUMP JUMPDEST POP DUP2 PUSH2 0x1143 JUMP JUMPDEST PUSH2 0x1143 DUP4 DUP4 PUSH2 0x114B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x115B JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B5 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xFED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x11B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x11C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1264 DUP9 DUP4 DUP10 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x127D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128A DUP8 DUP3 DUP9 ADD PUSH2 0x11EA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x12EE PUSH1 0x20 DUP5 ADD PUSH2 0x12AF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFED DUP3 PUSH2 0x12AF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1350 JUMPI PUSH2 0x1350 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x1371 JUMPI PUSH2 0x1371 PUSH2 0x1312 JUMP JUMPDEST PUSH2 0x1384 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1328 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13CB DUP4 PUSH2 0x12AF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x13E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x13F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1406 DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1358 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFED DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1358 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x144B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x146E DUP12 DUP4 DUP13 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP10 POP SWAP8 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1493 DUP12 DUP4 DUP13 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14B5 DUP12 DUP4 DUP13 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D7 DUP12 DUP4 DUP13 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14FA DUP11 DUP3 DUP12 ADD PUSH2 0x11EA JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP13 CALLDATALOAD DUP2 LT ISZERO PUSH2 0x1544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1551 DUP15 DUP15 CALLDATALOAD DUP16 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP13 POP SWAP11 POP PUSH1 0x20 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x1567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1577 DUP15 PUSH1 0x20 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x119F JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x40 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x158D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159D DUP15 PUSH1 0x40 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP8 POP DUP1 PUSH1 0x60 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x15B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15C0 DUP15 PUSH1 0x60 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP7 POP DUP1 PUSH1 0x80 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x15D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E3 DUP15 PUSH1 0x80 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x1410 JUMP JUMPDEST SWAP6 POP DUP1 PUSH1 0xA0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x15F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1606 DUP15 PUSH1 0xA0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x11EA JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0xC0 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x161C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162D DUP14 PUSH1 0xC0 DUP15 ADD CALLDATALOAD DUP15 ADD PUSH2 0x11EA JUMP JUMPDEST DUP2 SWAP4 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x16AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0xDE NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x5 SHL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x176E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY PUSH1 0x0 SWAP5 ADD PUSH1 0x20 ADD SWAP4 DUP5 MSTORE POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP5 SGT ISZERO PUSH2 0x17CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x17E7 PUSH1 0xE0 DUP7 ADD DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x16D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x17F6 PUSH1 0x40 DUP5 ADD PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x1803 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1700 JUMP JUMPDEST POP PUSH2 0x1810 PUSH1 0x60 DUP5 ADD PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x181D PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1700 JUMP JUMPDEST POP PUSH2 0x182B PUSH1 0x80 DUP5 ADD DUP5 PUSH2 0x170D JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x183E DUP4 DUP3 DUP5 PUSH2 0x1755 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x184F PUSH1 0xA0 DUP5 ADD DUP5 PUSH2 0x170D JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0xA0 DUP8 ADD MSTORE PUSH2 0x1862 DUP4 DUP3 DUP5 PUSH2 0x1755 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP6 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x188E PUSH1 0x60 DUP4 ADD DUP8 DUP10 PUSH2 0x16D7 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x18A0 DUP2 DUP8 PUSH2 0x178B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x18B5 DUP2 DUP6 DUP8 PUSH2 0x16D7 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x18E9 JUMPI PUSH2 0x18E9 PUSH2 0x18C1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1C22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1967 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE07 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x19A8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1964 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19D0 PUSH1 0xC0 DUP4 ADD DUP11 DUP13 PUSH2 0x16D7 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x19E2 DUP2 DUP11 PUSH2 0x178B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x19F6 DUP2 DUP10 PUSH2 0x1990 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1A0A DUP2 DUP9 PUSH2 0x1990 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1A1E DUP2 DUP8 PUSH2 0x1990 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1A33 DUP2 DUP6 DUP8 PUSH2 0x16D7 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1A6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1A92 JUMPI PUSH2 0x1A92 PUSH2 0x1312 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x1AA3 DUP5 DUP4 ADD PUSH2 0x1328 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 DUP4 ADD DUP5 ADD SWAP2 DUP5 DUP2 ADD SWAP1 DUP9 DUP5 GT ISZERO PUSH2 0x1ABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x18B5 JUMPI DUP5 MLOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x1AC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1B71 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1964 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1BA2 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1964 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xFED PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1BDB JUMPI PUSH2 0x1BDB PUSH2 0x18C1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1BF3 JUMPI PUSH2 0x1BF3 PUSH2 0x18C1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1C07 JUMPI PUSH2 0x1C07 PUSH2 0x18C1 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1671 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1964 JUMP INVALID CHAINID PUSH22 0x6E6374696F6E206D7573742062652063616C6C656420 PUSH21 0x68726F75676820189AB7A9244DF0848122154315AF PUSH18 0xFE140F3DB0FE014031783B0946B8C9D2E336 ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220A5 0xD0 SWAP12 LOG0 PUSH10 0x2A10FD1BF1C1B761F6FB 0xE6 0x2A PUSH17 0xD4090DEF13C49C5E4CE3F54A77F764736F PUSH13 0x634300080D0033000000000000 ","sourceMap":"654:2090:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3050:213:0;;;;;;;;;;-1:-1:-1;3050:213:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:21;;463:22;445:41;;433:2;418:18;3050:213:0;;;;;;;;1161:422:17;;;;;;;;;;-1:-1:-1;1161:422:17;;;;;:::i;:::-;;:::i;:::-;;4855:129:0;;;;;;;;;;-1:-1:-1;4855:129:0;;;;;:::i;:::-;;:::i;:::-;;;2427:25:21;;;2415:2;2400:18;4855:129:0;2281:177:21;5280:145:0;;;;;;;;;;-1:-1:-1;5280:145:0;;;;;:::i;:::-;;:::i;6389:214::-;;;;;;;;;;-1:-1:-1;6389:214:0;;;;;:::i;:::-;;:::i;3408:195:7:-;;;;;;;;;;-1:-1:-1;3408:195:7;;;;;:::i;:::-;;:::i;3922:220::-;;;;;;:::i;:::-;;:::i;3027:131::-;;;;;;;;;;;;;:::i;1879:84:8:-;;;;;;;;;;-1:-1:-1;1949:7:8;;;;1879:84;;1585:587:17;;;;;;;;;;-1:-1:-1;1585:587:17;;;;;:::i;:::-;;:::i;951:208::-;;;;;;;;;;;;;:::i;3350:145:0:-;;;;;;;;;;-1:-1:-1;3350:145:0;;;;;:::i;:::-;;:::i;2320:49::-;;;;;;;;;;-1:-1:-1;2320:49:0;2365:4;2320:49;;2174:459:17;;;;;;;;;;-1:-1:-1;2174:459:17;;;;;:::i;:::-;;:::i;5705:147:0:-;;;;;;;;;;-1:-1:-1;5705:147:0;;;;;:::i;:::-;;:::i;778:66:17:-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;778:66:17;;3050:213:0;3135:4;-1:-1:-1;;;;;;3158:58:0;;-1:-1:-1;;;3158:58:0;;:98;;-1:-1:-1;;;;;;;;;;1189:51:13;;;3220:36:0;3151:105;3050:213;-1:-1:-1;;3050:213:0:o;1161:422:17:-;1299:9;1294:287;1314:24;;;1294:287;;;1355:16;1383:13;;1397:1;1383:16;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:32;;;;;;;:::i;:::-;1355:61;;1426:7;-1:-1:-1;;;;;1426:34:17;;1474:13;;1488:1;1474:16;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:26;;;;;;;:::i;:::-;1514:13;;1528:1;1514:16;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:24;;;;;;;:::i;:::-;1552:12;;1426:148;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1345:236;1340:3;;;;;:::i;:::-;;;;1294:287;;;;1161:422;;;;:::o;4855:129:0:-;4929:7;4955:12;;;:6;:12;;;;;:22;;;;4855:129::o;5280:145::-;5363:18;5376:4;5363:12;:18::i;:::-;2798:16;2809:4;2798:10;:16::i;:::-;5393:25:::1;5404:4;5410:7;5393:10;:25::i;:::-;5280:145:::0;;;:::o;6389:214::-;-1:-1:-1;;;;;6484:23:0;;965:10:10;6484:23:0;6476:83;;;;-1:-1:-1;;;6476:83:0;;13506:2:21;6476:83:0;;;13488:21:21;13545:2;13525:18;;;13518:30;13584:34;13564:18;;;13557:62;-1:-1:-1;;;13635:18:21;;;13628:45;13690:19;;6476:83:0;;;;;;;;;6570:26;6582:4;6588:7;6570:11;:26::i;:::-;6389:214;;:::o;3408:195:7:-;-1:-1:-1;;;;;1764:6:7;1747:23;1755:4;1747:23;1739:80;;;;-1:-1:-1;;;1739:80:7;;;;;;;:::i;:::-;1861:6;-1:-1:-1;;;;;1837:30:7;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1837:30:7;;1829:87;;;;-1:-1:-1;;;1829:87:7;;;;;;;:::i;:::-;3489:36:::1;3507:17;3489;:36::i;:::-;3576:12;::::0;;3586:1:::1;3576:12:::0;;;::::1;::::0;::::1;::::0;;;3535:61:::1;::::0;3557:17;;3576:12;3535:21:::1;:61::i;:::-;3408:195:::0;:::o;3922:220::-;-1:-1:-1;;;;;1764:6:7;1747:23;1755:4;1747:23;1739:80;;;;-1:-1:-1;;;1739:80:7;;;;;;;:::i;:::-;1861:6;-1:-1:-1;;;;;1837:30:7;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1837:30:7;;1829:87;;;;-1:-1:-1;;;1829:87:7;;;;;;;:::i;:::-;4037:36:::1;4055:17;4037;:36::i;:::-;4083:52;4105:17;4124:4;4130;4083:21;:52::i;3027:131::-:0;3105:7;2190:4;-1:-1:-1;;;;;2199:6:7;2182:23;;2174:92;;;;-1:-1:-1;;;2174:92:7;;14748:2:21;2174:92:7;;;14730:21:21;14787:2;14767:18;;;14760:30;14826:34;14806:18;;;14799:62;-1:-1:-1;;;14877:18:21;;;14870:54;14941:19;;2174:92:7;14546:420:21;2174:92:7;-1:-1:-1;;;;;;;;;;;;3027:131:7;:::o;1585:587:17:-;1816:9;1811:359;1831:26;;;1811:359;;;1874:16;1902:15;;1918:1;1902:18;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:34;;;;;;;:::i;:::-;1874:63;;1947:7;-1:-1:-1;;;;;1947:27:17;;1988:15;;2004:1;1988:18;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:28;;;;;;;:::i;:::-;2030:15;;2046:1;2030:18;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:26;;;;;;;:::i;:::-;2070:11;2095:9;2118:7;2139:14;;1947:216;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1947:216:17;;;;;;;;;;;;:::i;:::-;;1864:306;1859:3;;;;;:::i;:::-;;;;1811:359;;;;1585:587;;;;;;;:::o;951:208::-;3279:19:6;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:6;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;-1:-1:-1;3436:12:6;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:6;;17847:2:21;3325:201:6;;;17829:21:21;17886:2;17866:18;;;17859:30;17925:34;17905:18;;;17898:62;-1:-1:-1;;;17976:18:21;;;17969:44;18030:19;;3325:201:6;17645:410:21;3325:201:6;3536:12;:16;;-1:-1:-1;;3536:16:6;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:6;;;;;3562:65;996:17:17::1;:15;:17::i;:::-;1017:22;:20;:22::i;:::-;1043:24;:22;:24::i;:::-;1072:42;2365:4:0;1103:10:17;1072;:42::i;:::-;1118:37;-1:-1:-1::0;;;;;;;;;;;1144:10:17::1;1118;:37::i;:::-;3651:14:6::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:6;;;3721:14;;-1:-1:-1;18212:36:21;;3721:14:6;;18200:2:21;18185:18;3721:14:6;;;;;;;3269:483;951:208:17:o;3350:145:0:-;3436:4;3459:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3459:29:0;;;;;;;;;;;;;;;3350:145::o;2174:459:17:-;2497:44;2513:13;;2528:12;;2497:15;:44::i;:::-;2547:83;2565:15;;2582:11;2595:9;2606:7;2615:14;;2547:17;:83::i;:::-;2174:459;;;;;;;;;;;:::o;5705:147:0:-;5789:18;5802:4;5789:12;:18::i;:::-;2798:16;2809:4;2798:10;:16::i;:::-;5819:26:::1;5831:4;5837:7;5819:11;:26::i;3789:103::-:0;3855:30;3866:4;965:10:10;3855::0;:30::i;7938:233::-;8021:22;8029:4;8035:7;8021;:22::i;:::-;8016:149;;8059:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8059:29:0;;;;;;;;;:36;;-1:-1:-1;;8059:36:0;8091:4;8059:36;;;8141:12;965:10:10;;886:96;8141:12:0;-1:-1:-1;;;;;8114:40:0;8132:7;-1:-1:-1;;;;;8114:40:0;8126:4;8114:40;;;;;;;;;;7938:233;;:::o;8342:234::-;8425:22;8433:4;8439:7;8425;:22::i;:::-;8421:149;;;8495:5;8463:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8463:29:0;;;;;;;;;;:37;;-1:-1:-1;;8463:37:0;;;8519:40;965:10:10;;8463:12:0;;8519:40;;8495:5;8519:40;8342:234;;:::o;1478:151:4:-;-1:-1:-1;;;;;;;;;;;1557:65:4;-1:-1:-1;;;;;1557:65:4;;1478:151::o;2640:102:17:-;-1:-1:-1;;;;;;;;;;;2798:16:0;2809:4;2798:10;:16::i;2841:944:4:-;839:66;3257:59;;;3253:526;;;3332:37;3351:17;3332:18;:37::i;3253:526::-;3433:17;-1:-1:-1;;;;;3404:61:4;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3404:63:4;;;;;;;;-1:-1:-1;;3404:63:4;;;;;;;;;;;;:::i;:::-;;;3400:302;;3631:56;;-1:-1:-1;;;3631:56:4;;18650:2:21;3631:56:4;;;18632:21:21;18689:2;18669:18;;;18662:30;18728:34;18708:18;;;18701:62;-1:-1:-1;;;18779:18:21;;;18772:44;18833:19;;3631:56:4;18448:410:21;3400:302:4;-1:-1:-1;;;;;;;;;;;3517:28:4;;3509:82;;;;-1:-1:-1;;;3509:82:4;;19065:2:21;3509:82:4;;;19047:21:21;19104:2;19084:18;;;19077:30;19143:34;19123:18;;;19116:62;-1:-1:-1;;;19194:18:21;;;19187:39;19243:19;;3509:82:4;18863:405:21;3509:82:4;3468:138;3715:53;3733:17;3752:4;3758:9;3715:17;:53::i;1423:320:9:-;-1:-1:-1;;;;;1713:19:9;;:23;;;1423:320::o;1084:97:8:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;1147:27:8::1;:25;:27::i;:::-;1084:97::o:0;2838:65:0:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;4173:501:0:-;4261:22;4269:4;4275:7;4261;:22::i;:::-;4256:412;;4444:39;4475:7;4444:30;:39::i;:::-;4554:49;4593:4;4600:2;4554:30;:49::i;:::-;4351:274;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4351:274:0;;;;;;;;;;-1:-1:-1;;;4299:358:0;;;;;;;:::i;1720:281:4:-;1801:48;1831:17;1801:29;:48::i;:::-;1793:106;;;;-1:-1:-1;;;1793:106:4;;20903:2:21;1793:106:4;;;20885:21:21;20942:2;20922:18;;;20915:30;20981:34;20961:18;;;20954:62;-1:-1:-1;;;21032:18:21;;;21025:43;21085:19;;1793:106:4;20701:409:21;1793:106:4;-1:-1:-1;;;;;;;;;;;1909:85:4;;-1:-1:-1;;;;;;1909:85:4;-1:-1:-1;;;;;1909:85:4;;;;;;;;;;1720:281::o;2393:276::-;2501:29;2512:17;2501:10;:29::i;:::-;2558:1;2544:4;:11;:15;:28;;;;2563:9;2544:28;2540:123;;;2588:64;2628:17;2647:4;2588:39;:64::i;:::-;;2393:276;;;:::o;1187:95:8:-;5374:13:6;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:6;;;;;;;:::i;:::-;1260:7:8::1;:15:::0;;-1:-1:-1;;1260:15:8::1;::::0;;1187:95::o;2473:149:12:-;2531:13;2563:52;-1:-1:-1;;;;;2575:22:12;;376:2;1884:437;1959:13;1984:19;2016:10;2020:6;2016:1;:10;:::i;:::-;:14;;2029:1;2016:14;:::i;:::-;-1:-1:-1;;;;;2006:25:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2006:25:12;;1984:47;;-1:-1:-1;;;2041:6:12;2048:1;2041:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2041:15:12;;;;;;;;;-1:-1:-1;;;2066:6:12;2073:1;2066:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2066:15:12;;;;;;;;-1:-1:-1;2096:9:12;2108:10;2112:6;2108:1;:10;:::i;:::-;:14;;2121:1;2108:14;:::i;:::-;2096:26;;2091:128;2128:1;2124;:5;2091:128;;;-1:-1:-1;;;2171:5:12;2179:3;2171:11;2162:21;;;;;;;:::i;:::-;;;;2150:6;2157:1;2150:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2150:33:12;;;;;;;;-1:-1:-1;2207:1:12;2197:11;;;;;2131:3;;;:::i;:::-;;;2091:128;;;-1:-1:-1;2236:10:12;;2228:55;;;;-1:-1:-1;;;2228:55:12;;21764:2:21;2228:55:12;;;21746:21:21;;;21783:18;;;21776:30;21842:34;21822:18;;;21815:62;21894:18;;2228:55:12;21562:356:21;2228:55:12;2307:6;1884:437;-1:-1:-1;;;1884:437:12:o;2107:152:4:-;2173:37;2192:17;2173:18;:37::i;:::-;2225:27;;-1:-1:-1;;;;;2225:27:4;;;;;;;;2107:152;:::o;6685:198:9:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;7210:12;7235;7249:23;7276:6;-1:-1:-1;;;;;7276:19:9;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:9:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;8132:18;8143:6;8132:10;:18::i;:::-;8124:60;;;;-1:-1:-1;;;8124:60:9;;22404:2:21;8124:60:9;;;22386:21:21;22443:2;22423:18;;;22416:30;22482:31;22462:18;;;22455:59;22531:18;;8124:60:9;22202:353:21;8124:60:9;-1:-1:-1;8219:10:9;8212:17;;7886:418;8260:33;8268:10;8280:12;8260:7;:33::i;:::-;7682:628;;;;;;:::o;8832:540::-;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;-1:-1:-1;;;9335:20:9;;;;;;;;:::i;14:286:21:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:21;;209:43;;199:71;;266:1;263;256:12;497:405;598:8;608:6;662:3;655:4;647:6;643:17;639:27;629:55;;680:1;677;670:12;629:55;-1:-1:-1;703:20:21;;-1:-1:-1;;;;;735:30:21;;732:50;;;778:1;775;768:12;732:50;815:4;807:6;803:17;791:29;;875:3;868:4;858:6;855:1;851:14;843:6;839:27;835:38;832:47;829:67;;;892:1;889;882:12;829:67;497:405;;;;;:::o;907:347::-;958:8;968:6;1022:3;1015:4;1007:6;1003:17;999:27;989:55;;1040:1;1037;1030:12;989:55;-1:-1:-1;1063:20:21;;-1:-1:-1;;;;;1095:30:21;;1092:50;;;1138:1;1135;1128:12;1092:50;1175:4;1167:6;1163:17;1151:29;;1227:3;1220:4;1211:6;1203;1199:19;1195:30;1192:39;1189:59;;;1244:1;1241;1234:12;1259:832;1414:6;1422;1430;1438;1491:2;1479:9;1470:7;1466:23;1462:32;1459:52;;;1507:1;1504;1497:12;1459:52;1534:23;;-1:-1:-1;;;;;1606:14:21;;;1603:34;;;1633:1;1630;1623:12;1603:34;1672:108;1772:7;1763:6;1752:9;1748:22;1672:108;:::i;:::-;1799:8;;-1:-1:-1;1646:134:21;-1:-1:-1;1887:2:21;1872:18;;1859:32;;-1:-1:-1;1903:16:21;;;1900:36;;;1932:1;1929;1922:12;1900:36;;1971:60;2023:7;2012:8;2001:9;1997:24;1971:60;:::i;:::-;1259:832;;;;-1:-1:-1;2050:8:21;-1:-1:-1;;;;1259:832:21:o;2096:180::-;2155:6;2208:2;2196:9;2187:7;2183:23;2179:32;2176:52;;;2224:1;2221;2214:12;2176:52;-1:-1:-1;2247:23:21;;2096:180;-1:-1:-1;2096:180:21:o;2463:173::-;2531:20;;-1:-1:-1;;;;;2580:31:21;;2570:42;;2560:70;;2626:1;2623;2616:12;2560:70;2463:173;;;:::o;2641:254::-;2709:6;2717;2770:2;2758:9;2749:7;2745:23;2741:32;2738:52;;;2786:1;2783;2776:12;2738:52;2822:9;2809:23;2799:33;;2851:38;2885:2;2874:9;2870:18;2851:38;:::i;:::-;2841:48;;2641:254;;;;;:::o;2900:186::-;2959:6;3012:2;3000:9;2991:7;2987:23;2983:32;2980:52;;;3028:1;3025;3018:12;2980:52;3051:29;3070:9;3051:29;:::i;3091:127::-;3152:10;3147:3;3143:20;3140:1;3133:31;3183:4;3180:1;3173:15;3207:4;3204:1;3197:15;3223:275;3294:2;3288:9;3359:2;3340:13;;-1:-1:-1;;3336:27:21;3324:40;;-1:-1:-1;;;;;3379:34:21;;3415:22;;;3376:62;3373:88;;;3441:18;;:::i;:::-;3477:2;3470:22;3223:275;;-1:-1:-1;3223:275:21:o;3503:406::-;3567:5;-1:-1:-1;;;;;3590:30:21;;3587:56;;;3623:18;;:::i;:::-;3661:57;3706:2;3685:15;;-1:-1:-1;;3681:29:21;3712:4;3677:40;3661:57;:::i;:::-;3652:66;;3741:6;3734:5;3727:21;3781:3;3772:6;3767:3;3763:16;3760:25;3757:45;;;3798:1;3795;3788:12;3757:45;3847:6;3842:3;3835:4;3828:5;3824:16;3811:43;3901:1;3894:4;3885:6;3878:5;3874:18;3870:29;3863:40;3503:406;;;;;:::o;3914:523::-;3991:6;3999;4052:2;4040:9;4031:7;4027:23;4023:32;4020:52;;;4068:1;4065;4058:12;4020:52;4091:29;4110:9;4091:29;:::i;:::-;4081:39;-1:-1:-1;4171:2:21;4156:18;;4143:32;-1:-1:-1;;;;;4187:30:21;;4184:50;;;4230:1;4227;4220:12;4184:50;4253:22;;4306:4;4298:13;;4294:27;-1:-1:-1;4284:55:21;;4335:1;4332;4325:12;4284:55;4358:73;4423:7;4418:2;4405:16;4400:2;4396;4392:11;4358:73;:::i;:::-;4348:83;;;3914:523;;;;;:::o;4442:221::-;4485:5;4538:3;4531:4;4523:6;4519:17;4515:27;4505:55;;4556:1;4553;4546:12;4505:55;4578:79;4653:3;4644:6;4631:20;4624:4;4616:6;4612:17;4578:79;:::i;4668:1434::-;4880:6;4888;4896;4904;4912;4920;4928;4981:3;4969:9;4960:7;4956:23;4952:33;4949:53;;;4998:1;4995;4988:12;4949:53;5025:23;;-1:-1:-1;;;;;5097:14:21;;;5094:34;;;5124:1;5121;5114:12;5094:34;5163:108;5263:7;5254:6;5243:9;5239:22;5163:108;:::i;:::-;5290:8;;-1:-1:-1;5137:134:21;-1:-1:-1;5378:2:21;5363:18;;5350:32;;-1:-1:-1;5394:16:21;;;5391:36;;;5423:1;5420;5413:12;5391:36;5446:52;5490:7;5479:8;5468:9;5464:24;5446:52;:::i;:::-;5436:62;;5551:2;5540:9;5536:18;5523:32;5507:48;;5580:2;5570:8;5567:16;5564:36;;;5596:1;5593;5586:12;5564:36;5619:52;5663:7;5652:8;5641:9;5637:24;5619:52;:::i;:::-;5609:62;;5724:2;5713:9;5709:18;5696:32;5680:48;;5753:2;5743:8;5740:16;5737:36;;;5769:1;5766;5759:12;5737:36;5792:52;5836:7;5825:8;5814:9;5810:24;5792:52;:::i;:::-;5782:62;;5897:3;5886:9;5882:19;5869:33;5853:49;;5927:2;5917:8;5914:16;5911:36;;;5943:1;5940;5933:12;5911:36;;5982:60;6034:7;6023:8;6012:9;6008:24;5982:60;:::i;:::-;4668:1434;;;;-1:-1:-1;4668:1434:21;;-1:-1:-1;4668:1434:21;;;;5956:86;;-1:-1:-1;;;4668:1434:21:o;6107:2066::-;6424:6;6432;6440;6448;6456;6464;6472;6480;6488;6496;6504:7;6558:3;6546:9;6537:7;6533:23;6529:33;6526:53;;;6575:1;6572;6565:12;6526:53;-1:-1:-1;;;;;6631:23:21;;6628:31;-1:-1:-1;6625:51:21;;;6672:1;6669;6662:12;6625:51;6711:125;6828:7;6815:9;6802:23;6791:9;6787:39;6711:125;:::i;:::-;6855:8;;-1:-1:-1;6882:8:21;-1:-1:-1;6933:2:21;6918:18;;6905:32;6902:40;-1:-1:-1;6899:60:21;;;6955:1;6952;6945:12;6899:60;6994:134;7120:7;7113:2;7102:9;7098:18;7085:32;7074:9;7070:48;6994:134;:::i;:::-;7147:8;;-1:-1:-1;7174:8:21;-1:-1:-1;7225:2:21;7210:18;;7197:32;7194:40;-1:-1:-1;7191:60:21;;;7247:1;7244;7237:12;7191:60;7270:76;7338:7;7331:2;7320:9;7316:18;7303:32;7292:9;7288:48;7270:76;:::i;:::-;7260:86;;7395:2;7389;7378:9;7374:18;7361:32;7358:40;7355:60;;;7411:1;7408;7401:12;7355:60;7434:76;7502:7;7495:2;7484:9;7480:18;7467:32;7456:9;7452:48;7434:76;:::i;:::-;7424:86;;7560:2;7553:3;7542:9;7538:19;7525:33;7522:41;7519:61;;;7576:1;7573;7566:12;7519:61;7599:77;7668:7;7660:3;7649:9;7645:19;7632:33;7621:9;7617:49;7599:77;:::i;:::-;7589:87;;7726:2;7719:3;7708:9;7704:19;7691:33;7688:41;7685:61;;;7742:1;7739;7732:12;7685:61;7781:85;7858:7;7850:3;7839:9;7835:19;7822:33;7811:9;7807:49;7781:85;:::i;:::-;7885:8;;-1:-1:-1;7912:8:21;-1:-1:-1;7963:3:21;7948:19;;7935:33;7932:41;-1:-1:-1;7929:61:21;;;7986:1;7983;7976:12;7929:61;;8026:85;8103:7;8095:3;8084:9;8080:19;8067:33;8056:9;8052:49;8026:85;:::i;:::-;8130:8;8120:18;;8158:9;8147:20;;;;6107:2066;;;;;;;;;;;;;;:::o;8178:127::-;8239:10;8234:3;8230:20;8227:1;8220:31;8270:4;8267:1;8260:15;8294:4;8291:1;8284:15;8310:346;8425:4;8483:11;8470:25;8577:2;8573:7;8562:8;8546:14;8542:29;8538:43;8518:18;8514:68;8504:96;;8596:1;8593;8586:12;8504:96;8617:33;;;;;8310:346;-1:-1:-1;;8310:346:21:o;8661:521::-;8738:4;8744:6;8804:11;8791:25;8898:2;8894:7;8883:8;8867:14;8863:29;8859:43;8839:18;8835:68;8825:96;;8917:1;8914;8907:12;8825:96;8944:33;;8996:20;;;-1:-1:-1;;;;;;9028:30:21;;9025:50;;;9071:1;9068;9061:12;9025:50;9104:4;9092:17;;-1:-1:-1;9135:14:21;9131:27;;;9121:38;;9118:58;;;9172:1;9169;9162:12;9187:347;9302:4;9360:11;9347:25;9454:3;9450:8;9439;9423:14;9419:29;9415:44;9395:18;9391:69;9381:97;;9474:1;9471;9464:12;9539:266;9627:6;9622:3;9615:19;9679:6;9672:5;9665:4;9660:3;9656:14;9643:43;-1:-1:-1;9731:1:21;9706:16;;;9724:4;9702:27;;;9695:38;;;;9787:2;9766:15;;;-1:-1:-1;;9762:29:21;9753:39;;;9749:50;;9539:266::o;9810:104::-;-1:-1:-1;;;;;9876:31:21;9864:44;;9810:104::o;9919:523::-;9989:5;9996:6;10056:3;10043:17;10142:2;10138:7;10127:8;10111:14;10107:29;10103:43;10083:18;10079:68;10069:96;;10161:1;10158;10151:12;10069:96;10189:33;;10293:4;10280:18;;;-1:-1:-1;10241:21:21;;-1:-1:-1;;;;;;10310:30:21;;10307:50;;;10353:1;10350;10343:12;10307:50;10410:6;10407:1;10403:14;10387;10383:35;10373:8;10369:50;10366:70;;;10432:1;10429;10422:12;10447:354;10535:19;;;10517:3;-1:-1:-1;;;;;10566:31:21;;10563:51;;;10610:1;10607;10600:12;10563:51;10646:6;10643:1;10639:14;10698:8;10691:5;10684:4;10679:3;10675:14;10662:45;10775:1;10730:18;;10750:4;10726:29;10764:13;;;-1:-1:-1;10726:29:21;;10447:354;-1:-1:-1;;10447:354:21:o;10806:1507::-;10930:5;10917:19;10912:3;10905:32;10887:3;10996:4;10989:5;10985:16;10972:30;11081:2;11077:7;11069:5;11053:14;11049:26;11045:40;11025:18;11021:65;11011:93;;11100:1;11097;11090:12;11011:93;11128:30;;11181:21;;-1:-1:-1;;;;;11214:30:21;;11211:50;;;11257:1;11254;11247:12;11211:50;11304:6;11288:14;11284:27;11277:5;11273:39;11270:59;;;11325:1;11322;11315:12;11270:59;11361:4;11354;11349:3;11345:14;11338:28;11387:69;11450:4;11445:3;11441:14;11433:6;11426:4;11417:7;11413:18;11387:69;:::i;:::-;11375:81;;;11485:36;11515:4;11508:5;11504:16;11485:36;:::i;:::-;11530:48;11572:4;11567:3;11563:14;11549:12;11530:48;:::i;:::-;;11609:36;11639:4;11632:5;11628:16;11609:36;:::i;:::-;11654:50;11698:4;11693:3;11689:14;11673;11654:50;:::i;:::-;;11749:67;11810:4;11803:5;11799:16;11792:5;11749:67;:::i;:::-;11858:3;11852:4;11848:14;11841:4;11836:3;11832:14;11825:38;11886:73;11954:4;11940:12;11924:14;11886:73;:::i;:::-;11872:87;;;;12006:67;12067:4;12060:5;12056:16;12049:5;12006:67;:::i;:::-;12117:3;12109:6;12105:16;12098:4;12093:3;12089:14;12082:40;12145:77;12215:6;12199:14;12183;12145:77;:::i;:::-;12131:91;;;;12278:4;12271:5;12267:16;12254:30;12247:4;12242:3;12238:14;12231:54;12301:6;12294:13;;;10806:1507;;;;:::o;12318:709::-;12655:2;12644:9;12637:21;12618:4;12681:61;12738:2;12727:9;12723:18;12715:6;12707;12681:61;:::i;:::-;12790:9;12782:6;12778:22;12773:2;12762:9;12758:18;12751:50;12824:72;12889:6;12881;12824:72;:::i;:::-;12810:86;;12944:9;12936:6;12932:22;12927:2;12916:9;12912:18;12905:50;12972:49;13014:6;13006;12998;12972:49;:::i;:::-;12964:57;12318:709;-1:-1:-1;;;;;;;;12318:709:21:o;13032:127::-;13093:10;13088:3;13084:20;13081:1;13074:31;13124:4;13121:1;13114:15;13148:4;13145:1;13138:15;13164:135;13203:3;13224:17;;;13221:43;;13244:18;;:::i;:::-;-1:-1:-1;13291:1:21;13280:13;;13164:135::o;13720:408::-;13922:2;13904:21;;;13961:2;13941:18;;;13934:30;-1:-1:-1;;;;;;;;;;;13995:2:21;13980:18;;13973:62;-1:-1:-1;;;14066:2:21;14051:18;;14044:42;14118:3;14103:19;;13720:408::o;14133:::-;14335:2;14317:21;;;14374:2;14354:18;;;14347:30;-1:-1:-1;;;;;;;;;;;14408:2:21;14393:18;;14386:62;-1:-1:-1;;;14479:2:21;14464:18;;14457:42;14531:3;14516:19;;14133:408::o;14971:258::-;15043:1;15053:113;15067:6;15064:1;15061:13;15053:113;;;15143:11;;;15137:18;15124:11;;;15117:39;15089:2;15082:10;15053:113;;;15184:6;15181:1;15178:13;15175:48;;;-1:-1:-1;;15219:1:21;15201:16;;15194:27;14971:258::o;15234:::-;15276:3;15314:5;15308:12;15341:6;15336:3;15329:19;15357:63;15413:6;15406:4;15401:3;15397:14;15390:4;15383:5;15379:16;15357:63;:::i;:::-;15474:2;15453:15;-1:-1:-1;;15449:29:21;15440:39;;;;15481:4;15436:50;;15234:258;-1:-1:-1;;15234:258:21:o;15497:1202::-;15978:3;15967:9;15960:22;15941:4;16005:62;16062:3;16051:9;16047:19;16039:6;16031;16005:62;:::i;:::-;16115:9;16107:6;16103:22;16098:2;16087:9;16083:18;16076:50;16149:72;16214:6;16206;16149:72;:::i;:::-;16135:86;;16269:9;16261:6;16257:22;16252:2;16241:9;16237:18;16230:50;16303:33;16329:6;16321;16303:33;:::i;:::-;16289:47;;16384:9;16376:6;16372:22;16367:2;16356:9;16352:18;16345:50;16418:33;16444:6;16436;16418:33;:::i;:::-;16404:47;;16500:9;16492:6;16488:22;16482:3;16471:9;16467:19;16460:51;16534:33;16560:6;16552;16534:33;:::i;:::-;16520:47;;16616:9;16608:6;16604:22;16598:3;16587:9;16583:19;16576:51;16644:49;16686:6;16678;16670;16644:49;:::i;:::-;16636:57;15497:1202;-1:-1:-1;;;;;;;;;;;15497:1202:21:o;16704:936::-;16799:6;16830:2;16873;16861:9;16852:7;16848:23;16844:32;16841:52;;;16889:1;16886;16879:12;16841:52;16916:16;;-1:-1:-1;;;;;16981:14:21;;;16978:34;;;17008:1;17005;16998:12;16978:34;17046:6;17035:9;17031:22;17021:32;;17091:7;17084:4;17080:2;17076:13;17072:27;17062:55;;17113:1;17110;17103:12;17062:55;17142:2;17136:9;17164:2;17160;17157:10;17154:36;;;17170:18;;:::i;:::-;17216:2;17213:1;17209:10;17199:20;;17239:28;17263:2;17259;17255:11;17239:28;:::i;:::-;17301:15;;;17371:11;;;17367:20;;;17332:12;;;;17399:19;;;17396:39;;;17431:1;17428;17421:12;17396:39;17455:11;;;;17475:135;17491:6;17486:3;17483:15;17475:135;;;17557:10;;17545:23;;17508:12;;;;17588;;;;17475:135;;18259:184;18329:6;18382:2;18370:9;18361:7;18357:23;18353:32;18350:52;;;18398:1;18395;18388:12;18350:52;-1:-1:-1;18421:16:21;;18259:184;-1:-1:-1;18259:184:21:o;19273:407::-;19475:2;19457:21;;;19514:2;19494:18;;;19487:30;19553:34;19548:2;19533:18;;19526:62;-1:-1:-1;;;19619:2:21;19604:18;;19597:41;19670:3;19655:19;;19273:407::o;19685:786::-;-1:-1:-1;;;20091:3:21;20084:38;20066:3;20151:6;20145:13;20167:62;20222:6;20217:2;20212:3;20208:12;20201:4;20193:6;20189:17;20167:62;:::i;:::-;-1:-1:-1;;;20288:2:21;20248:16;;;20280:11;;;20273:40;20338:13;;20360:63;20338:13;20409:2;20401:11;;20394:4;20382:17;;20360:63;:::i;:::-;20443:17;20462:2;20439:26;;19685:786;-1:-1:-1;;;;19685:786:21:o;20476:220::-;20625:2;20614:9;20607:21;20588:4;20645:45;20686:2;20675:9;20671:18;20663:6;20645:45;:::i;21115:168::-;21155:7;21221:1;21217;21213:6;21209:14;21206:1;21203:21;21198:1;21191:9;21184:17;21180:45;21177:71;;;21228:18;;:::i;:::-;-1:-1:-1;21268:9:21;;21115:168::o;21288:128::-;21328:3;21359:1;21355:6;21352:1;21349:13;21346:39;;;21365:18;;:::i;:::-;-1:-1:-1;21401:9:21;;21288:128::o;21421:136::-;21460:3;21488:5;21478:39;;21497:18;;:::i;:::-;-1:-1:-1;;;21533:18:21;;21421:136::o;21923:274::-;22052:3;22090:6;22084:13;22106:53;22152:6;22147:3;22140:4;22132:6;22128:17;22106:53;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1478000","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"437","UPGRADER_ROLE()":"infinite","batchTransferOrRetire((address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],(address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],string,string,string,bytes,bytes)":"infinite","getRoleAdmin(bytes32)":"2478","grantRole(bytes32,address)":"infinite","handleRetirements((address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],string,string,string,bytes)":"infinite","handleTransfers((address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],bytes)":"infinite","hasRole(bytes32,address)":"2874","initialize()":"infinite","paused()":"2447","proxiableUUID()":"infinite","renounceRole(bytes32,address)":"29067","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"404","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","UPGRADER_ROLE()":"f72c0d8b","batchTransferOrRetire((address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],(address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],string,string,string,bytes,bytes)":"cc944ef3","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","handleRetirements((address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],string,string,string,bytes)":"69ffd930","handleTransfers((address,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)[],bytes)":"0dee1707","hasRole(bytes32,address)":"91d14854","initialize()":"8129fc1c","paused()":"5c975abb","proxiableUUID()":"52d1902d","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureBatchTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignatureBatchTransferPayload[]\",\"name\":\"transferItems\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureBatchTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignatureBatchTransferPayload[]\",\"name\":\"retirementItems\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"retirementData\",\"type\":\"bytes\"}],\"name\":\"batchTransferOrRetire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureBatchTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignatureBatchTransferPayload[]\",\"name\":\"retirementItems\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"retirementData\",\"type\":\"bytes\"}],\"name\":\"handleRetirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureBatchTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignatureBatchTransferPayload[]\",\"name\":\"transferItems\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"}],\"name\":\"handleTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BatchCreditActions.sol\":\"BatchCreditActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/BatchCreditActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// Importing the IERC1155Upgradeable interface from OpenZeppelin\\nimport \\\"./interfaces/IProject.sol\\\";\\nimport \\\"./utils/CustomSignaturesTypes.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nstruct SignatureBatchTransferPayload {\\n    address contractAddress;\\n    signatureBatchTransferPayload payload;\\n    bytes signature;\\n}\\n\\ncontract BatchCreditActions is\\n\\tInitializable,\\n\\tPausableUpgradeable,\\n\\tAccessControlUpgradeable,\\n\\tUUPSUpgradeable {\\n    \\n    bytes32 public constant UPGRADER_ROLE = keccak256('UPGRADER_ROLE');\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n    function initialize() public initializer {\\n\\t\\t__Pausable_init();\\n\\t\\t__AccessControl_init();\\n\\t\\t__UUPSUpgradeable_init();\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_grantRole(UPGRADER_ROLE, msg.sender);\\n\\t}\\n\\nfunction handleTransfers(\\n    SignatureBatchTransferPayload[] calldata transferItems,\\n    bytes calldata transferData\\n) public {\\n    for (uint256 i = 0; i < transferItems.length; i++) {\\n        IProject erc1155 = IProject(transferItems[i].contractAddress);\\n        erc1155.batchTransferFromSignature(\\n            transferItems[i].signature,\\n            transferItems[i].payload,\\n            transferData\\n        );\\n    }\\n}\\n\\nfunction handleRetirements(\\n    SignatureBatchTransferPayload[] calldata retirementItems,\\n    string memory retireeName,\\n    string memory customUri,\\n    string memory comment,\\n    bytes calldata retirementData\\n) public {\\n    for (uint256 i = 0; i < retirementItems.length; i++) {\\n        IProject project = IProject(retirementItems[i].contractAddress);\\n        project.retireFromSignature(\\n            retirementItems[i].signature,\\n            retirementItems[i].payload,\\n            retireeName,\\n            customUri,\\n            comment,\\n            retirementData\\n        );\\n    }\\n}\\n\\nfunction batchTransferOrRetire(\\n    SignatureBatchTransferPayload[] calldata transferItems,\\n    SignatureBatchTransferPayload[] calldata retirementItems,\\n    string memory retireeName,\\n    string memory customUri,\\n    string memory comment,\\n    bytes calldata transferData,\\n    bytes calldata retirementData\\n) public {\\n    handleTransfers(transferItems, transferData);\\n    handleRetirements(retirementItems, retireeName, customUri, comment, retirementData);\\n}\\n\\n\\n    function _authorizeUpgrade(\\n\\taddress newImplementation\\n\\t) internal override onlyRole(UPGRADER_ROLE) {}\\n}\\n\",\"keccak256\":\"0xd66465c3fe10e1c577b1c34c3659812c9ddb546e8ad20612b272321d942b07d6\",\"license\":\"MIT\"},\"contracts/interfaces/IProject.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport '../types/ProjectTypes.sol';\\nimport '../utils/CustomSignaturesTypes.sol';\\n\\ninterface IProject {\\n\\tevent ExPostCreated(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 estimatedAmount,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring serialization\\n\\t);\\n\\n\\tevent VintageMitigationEstimateChanged(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 newEstimate,\\n\\t\\tuint256 oldEstimate,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent ExAnteMinted(\\n\\t\\tuint256 indexed exAnteTokenId,\\n\\t\\tuint256 indexed exPostTokenId,\\n\\t\\taddress indexed account,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\tevent ExPostVerifiedAndMinted(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 amountToAnteHolders,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring monitoringReport\\n\\t);\\n\\n\\tevent AdminBurn(\\n\\t\\taddress indexed from,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent AdminClawback(\\n\\t\\taddress indexed from,\\n\\t\\taddress to,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent ExchangeAnteForPost(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 indexed exPostTokenId,\\n\\t\\tuint256 exPostAmountReceived,\\n\\t\\tuint256 exAnteAmountBurned\\n\\t);\\n\\n\\tevent RetiredVintage(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 nftTokenId,\\n\\t\\tbytes data\\n\\t);\\n\\n\\tevent CancelledCredits(\\n\\t\\taddress indexed account, \\n\\t\\tuint256 indexed tokenId, \\n\\t\\tuint256 amount, \\n\\t\\tstring reason,\\n\\t\\tbytes data\\n\\t\\t);\\n\\n\\tfunction retire(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\taddress beneficiary,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t) external returns (uint256 nftTokenId) ;\\n\\n\\tfunction batchTransferFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureBatchTransferPayload calldata payload,\\n\\t\\tbytes memory data\\n\\t) external payable;\\n\\n\\tfunction retireFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureBatchTransferPayload calldata payload,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (uint256[] memory);\\n}\",\"keccak256\":\"0x31c6e6e4b27bf3c59fef4416cbf5cec0d80eaba012a9204d5936fd68cdb17fd0\",\"license\":\"UNLICENSED\"},\"contracts/types/ProjectTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct VintageData {\\n    string serialization;\\n    uint256 estMitigations; // in TC02e\\n    uint256 verificationPeriodStart; // timestamp seconds since Unix\\n    uint256 verificationPeriodEnd;\\n    uint256 lastVerificationTimestamp;\\n}\\n\\nstruct RetirementData {\\n    address retiree;\\n    uint256 amount;\\n    uint256 vintageTokenId;\\n    string retireeName;\\n    string customUri;\\n    string comment;\\n}\\n\\nenum AdminActionReason {\\n    NoReason,\\n    OverEstimated,\\n    UnderEstimated,\\n    CreditsLost,\\n    CreditsGained\\n}\\n\\nabstract contract ProjectTypes {}\\n\",\"keccak256\":\"0xc33719689b0f5257f012954fe55d7a0193ac3a4587a9fa452d66426347527e9e\",\"license\":\"MIT\"},\"contracts/utils/CustomSignaturesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Mojoflower\\n//\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nstruct signatureBatchTransferPayload {\\n    uint256 deadline;\\n    string description;\\n    address signer;\\n    address to;\\n    uint256[] tokenIds;\\n    uint256[] amounts;\\n    uint256 nonce;\\n}\\n\\nabstract contract CustomSignaturesTypes {}\\n\",\"keccak256\":\"0xa9b39a5b696ae19678ce29cfa2e67c5994971ffda8aca81c835095cbb01605a5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":782,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":785,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1589,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1103,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":1208,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1973,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":28,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)23_storage)"},{"astId":335,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":764,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":1080,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"__gap","offset":0,"slot":"251","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)23_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)23_storage"},"t_struct(RoleData)23_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":20,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":22,"contract":"contracts/BatchCreditActions.sol:BatchCreditActions","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IProject.sol":{"IProject":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"enum AdminActionReason","name":"reason","type":"uint8"}],"name":"AdminBurn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"enum AdminActionReason","name":"reason","type":"uint8"}],"name":"AdminClawback","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"string","name":"reason","type":"string"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"CancelledCredits","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"exAnteTokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"exPostTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ExAnteMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"estimatedAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"verificationPeriodStart","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"verificationPeriodEnd","type":"uint256"},{"indexed":false,"internalType":"string","name":"serialization","type":"string"}],"name":"ExPostCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountToAnteHolders","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"verificationPeriodStart","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"verificationPeriodEnd","type":"uint256"},{"indexed":false,"internalType":"string","name":"monitoringReport","type":"string"}],"name":"ExPostVerifiedAndMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"exPostTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"exPostAmountReceived","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"exAnteAmountBurned","type":"uint256"}],"name":"ExchangeAnteForPost","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nftTokenId","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"RetiredVintage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newEstimate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldEstimate","type":"uint256"},{"indexed":true,"internalType":"enum AdminActionReason","name":"reason","type":"uint8"}],"name":"VintageMitigationEstimateChanged","type":"event"},{"inputs":[{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"description","type":"string"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct signatureBatchTransferPayload","name":"payload","type":"tuple"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"batchTransferFromSignature","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"beneficiary","type":"address"},{"internalType":"string","name":"retireeName","type":"string"},{"internalType":"string","name":"customUri","type":"string"},{"internalType":"string","name":"comment","type":"string"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"retire","outputs":[{"internalType":"uint256","name":"nftTokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"description","type":"string"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct signatureBatchTransferPayload","name":"payload","type":"tuple"},{"internalType":"string","name":"retireeName","type":"string"},{"internalType":"string","name":"customUri","type":"string"},{"internalType":"string","name":"comment","type":"string"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"retireFromSignature","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransferFromSignature(bytes,(uint256,string,address,address,uint256[],uint256[],uint256),bytes)":"8b42ecc1","retire(uint256,uint256,address,string,string,string,bytes)":"275d4dec","retireFromSignature(bytes,(uint256,string,address,address,uint256[],uint256[],uint256),string,string,string,bytes)":"c5bfc65a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"AdminBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"AdminClawback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CancelledCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exAnteTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exPostTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExAnteMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serialization\",\"type\":\"string\"}],\"name\":\"ExPostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToAnteHolders\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationPeriodEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"monitoringReport\",\"type\":\"string\"}],\"name\":\"ExPostVerifiedAndMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exPostTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exPostAmountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exAnteAmountBurned\",\"type\":\"uint256\"}],\"name\":\"ExchangeAnteForPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RetiredVintage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEstimate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEstimate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum AdminActionReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"VintageMitigationEstimateChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureBatchTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFromSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"retire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct signatureBatchTransferPayload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"retireeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"retireFromSignature\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IProject.sol\":\"IProject\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IProject.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport '../types/ProjectTypes.sol';\\nimport '../utils/CustomSignaturesTypes.sol';\\n\\ninterface IProject {\\n\\tevent ExPostCreated(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 estimatedAmount,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring serialization\\n\\t);\\n\\n\\tevent VintageMitigationEstimateChanged(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 newEstimate,\\n\\t\\tuint256 oldEstimate,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent ExAnteMinted(\\n\\t\\tuint256 indexed exAnteTokenId,\\n\\t\\tuint256 indexed exPostTokenId,\\n\\t\\taddress indexed account,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\tevent ExPostVerifiedAndMinted(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 amountToAnteHolders,\\n\\t\\tuint256 verificationPeriodStart,\\n\\t\\tuint256 verificationPeriodEnd,\\n\\t\\tstring monitoringReport\\n\\t);\\n\\n\\tevent AdminBurn(\\n\\t\\taddress indexed from,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent AdminClawback(\\n\\t\\taddress indexed from,\\n\\t\\taddress to,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tAdminActionReason indexed reason\\n\\t);\\n\\n\\tevent ExchangeAnteForPost(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 indexed exPostTokenId,\\n\\t\\tuint256 exPostAmountReceived,\\n\\t\\tuint256 exAnteAmountBurned\\n\\t);\\n\\n\\tevent RetiredVintage(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 nftTokenId,\\n\\t\\tbytes data\\n\\t);\\n\\n\\tevent CancelledCredits(\\n\\t\\taddress indexed account, \\n\\t\\tuint256 indexed tokenId, \\n\\t\\tuint256 amount, \\n\\t\\tstring reason,\\n\\t\\tbytes data\\n\\t\\t);\\n\\n\\tfunction retire(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\taddress beneficiary,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t) external returns (uint256 nftTokenId) ;\\n\\n\\tfunction batchTransferFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureBatchTransferPayload calldata payload,\\n\\t\\tbytes memory data\\n\\t) external payable;\\n\\n\\tfunction retireFromSignature(\\n\\t\\tbytes calldata signature,\\n\\t\\tsignatureBatchTransferPayload calldata payload,\\n\\t\\tstring memory retireeName,\\n\\t\\tstring memory customUri,\\n\\t\\tstring memory comment,\\n\\t\\tbytes memory data\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (uint256[] memory);\\n}\",\"keccak256\":\"0x31c6e6e4b27bf3c59fef4416cbf5cec0d80eaba012a9204d5936fd68cdb17fd0\",\"license\":\"UNLICENSED\"},\"contracts/types/ProjectTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct VintageData {\\n    string serialization;\\n    uint256 estMitigations; // in TC02e\\n    uint256 verificationPeriodStart; // timestamp seconds since Unix\\n    uint256 verificationPeriodEnd;\\n    uint256 lastVerificationTimestamp;\\n}\\n\\nstruct RetirementData {\\n    address retiree;\\n    uint256 amount;\\n    uint256 vintageTokenId;\\n    string retireeName;\\n    string customUri;\\n    string comment;\\n}\\n\\nenum AdminActionReason {\\n    NoReason,\\n    OverEstimated,\\n    UnderEstimated,\\n    CreditsLost,\\n    CreditsGained\\n}\\n\\nabstract contract ProjectTypes {}\\n\",\"keccak256\":\"0xc33719689b0f5257f012954fe55d7a0193ac3a4587a9fa452d66426347527e9e\",\"license\":\"MIT\"},\"contracts/utils/CustomSignaturesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Mojoflower\\n//\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nstruct signatureBatchTransferPayload {\\n    uint256 deadline;\\n    string description;\\n    address signer;\\n    address to;\\n    uint256[] tokenIds;\\n    uint256[] amounts;\\n    uint256 nonce;\\n}\\n\\nabstract contract CustomSignaturesTypes {}\\n\",\"keccak256\":\"0xa9b39a5b696ae19678ce29cfa2e67c5994971ffda8aca81c835095cbb01605a5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/types/ProjectTypes.sol":{"ProjectTypes":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/types/ProjectTypes.sol\":\"ProjectTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/types/ProjectTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct VintageData {\\n    string serialization;\\n    uint256 estMitigations; // in TC02e\\n    uint256 verificationPeriodStart; // timestamp seconds since Unix\\n    uint256 verificationPeriodEnd;\\n    uint256 lastVerificationTimestamp;\\n}\\n\\nstruct RetirementData {\\n    address retiree;\\n    uint256 amount;\\n    uint256 vintageTokenId;\\n    string retireeName;\\n    string customUri;\\n    string comment;\\n}\\n\\nenum AdminActionReason {\\n    NoReason,\\n    OverEstimated,\\n    UnderEstimated,\\n    CreditsLost,\\n    CreditsGained\\n}\\n\\nabstract contract ProjectTypes {}\\n\",\"keccak256\":\"0xc33719689b0f5257f012954fe55d7a0193ac3a4587a9fa452d66426347527e9e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/CustomSignaturesTypes.sol":{"CustomSignaturesTypes":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/CustomSignaturesTypes.sol\":\"CustomSignaturesTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/utils/CustomSignaturesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Mojoflower\\n//\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nstruct signatureBatchTransferPayload {\\n    uint256 deadline;\\n    string description;\\n    address signer;\\n    address to;\\n    uint256[] tokenIds;\\n    uint256[] amounts;\\n    uint256 nonce;\\n}\\n\\nabstract contract CustomSignaturesTypes {}\\n\",\"keccak256\":\"0xa9b39a5b696ae19678ce29cfa2e67c5994971ffda8aca81c835095cbb01605a5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}